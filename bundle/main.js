/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.createApp = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst morgan_1 = __importDefault(__webpack_require__(/*! morgan */ \"morgan\"));\r\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"fs-extra\"));\r\nconst connect_timeout_1 = __importDefault(__webpack_require__(/*! connect-timeout */ \"connect-timeout\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst express_session_1 = __importDefault(__webpack_require__(/*! express-session */ \"express-session\"));\r\nconst redis_1 = __webpack_require__(/*! redis */ \"redis\");\r\nconst connect_redis_1 = __importDefault(__webpack_require__(/*! connect-redis */ \"connect-redis\"));\r\nconst swagger_ui_express_1 = __importDefault(__webpack_require__(/*! swagger-ui-express */ \"swagger-ui-express\"));\r\nconst swagger_jsdoc_1 = __importDefault(__webpack_require__(/*! swagger-jsdoc */ \"swagger-jsdoc\"));\r\nconst admin_swagger_json_1 = __importDefault(__webpack_require__(/*! ../bundle/admin-swagger.json */ \"./bundle/admin-swagger.json\"));\r\nconst swagger_json_1 = __importDefault(__webpack_require__(/*! ../bundle/swagger.json */ \"./bundle/swagger.json\"));\r\nconst config_1 = __importDefault(__webpack_require__(/*! ./config */ \"./src/config/index.ts\"));\r\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"./src/helpers/index.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! ./helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nconst errorHandler = __importStar(__webpack_require__(/*! @/middlewares/errorHandler */ \"./src/middlewares/errorHandler.ts\"));\r\nconst routes_1 = __webpack_require__(/*! @/routes */ \"./src/routes/index.ts\");\r\ndotenv_1.default.config();\r\nconst createApp = () => {\r\n    const app = (0, express_1.default)();\r\n    const redisClient = (0, redis_1.createClient)();\r\n    redisClient.connect();\r\n    redisClient.on(\"connect\", () => {\r\n        console.log(\"Redis client connected!\");\r\n    });\r\n    redisClient.on(\"error\", (err) => {\r\n        console.log(err.message);\r\n    });\r\n    const redisStore = new connect_redis_1.default({\r\n        client: redisClient,\r\n        prefix: \"arzan-api:\",\r\n    });\r\n    app.set(\"trust proxy\", 1);\r\n    app.use(express_1.default.json());\r\n    app.use(express_1.default.urlencoded({\r\n        extended: true,\r\n    }));\r\n    if (config_1.default.APP.ENV !== \"test\") {\r\n        app.use((0, morgan_1.default)(\"dev\"));\r\n        app.use((0, helpers_1.expressPinoLogger)());\r\n    }\r\n    app.use((0, connect_timeout_1.default)(config_1.default.SERVER.TIMEOUT));\r\n    app.use(\"/video/:url\", function (req, res) {\r\n        try {\r\n            const url = req.params.url;\r\n            const range = req.headers.range;\r\n            if (range === undefined) {\r\n                res.status(400).send(\"Requires Range header\");\r\n            }\r\n            let chunk = Number(`${process.env.CHUNK_SIZE}`);\r\n            if (range === \"\") {\r\n                chunk = 1;\r\n            }\r\n            const videoPath = path_1.default.join(__dirname, \"..\", \"video\", url);\r\n            const videoSize = fs_extra_1.default.statSync(videoPath).size;\r\n            const CHUNK_SIZE = 1024 * chunk;\r\n            const start = Number(range.replace(/\\D/g, \"\"));\r\n            const end = Math.min(start + CHUNK_SIZE, videoSize - 1);\r\n            const contentLength = end - start + 1;\r\n            const headers = {\r\n                \"Content-Range\": `bytes ${start}-${end}/${videoSize}`,\r\n                \"Accept-Ranges\": \"bytes\",\r\n                \"Content-Length\": contentLength,\r\n                \"Content-Type\": \"video/mp4\",\r\n            };\r\n            res.writeHead(206, headers);\r\n            const videoStream = fs_extra_1.default.createReadStream(videoPath, { start, end });\r\n            videoStream.pipe(res);\r\n        }\r\n        catch (err) {\r\n            res.status(err.status).json((0, apiResponse_1.apiResponse)({\r\n                status: false,\r\n                message: err.message,\r\n            }));\r\n        }\r\n    });\r\n    const options = {\r\n        definition: {\r\n            openapi: \"3.0.1\",\r\n            info: {\r\n                title: \"REST API for Swagger Documentation\",\r\n                version: \"1.0.0\",\r\n            },\r\n            schemes: [\"http\", \"https\"],\r\n            servers: [\r\n                {\r\n                    url: `http://${process.env.APP_HOST || \"localhost\"}:${process.env.PORT || 8081}/`,\r\n                },\r\n            ],\r\n        },\r\n        apis: [`${__dirname}/docs/public/*.ts`],\r\n    };\r\n    const adminOptions = {\r\n        definition: {\r\n            openapi: \"3.0.1\",\r\n            info: {\r\n                title: \"REST API for Swagger Documentation\",\r\n                version: \"1.0.0\",\r\n            },\r\n            schemes: [\"http\", \"https\"],\r\n            servers: [\r\n                {\r\n                    url: `http://${process.env.APP_HOST || \"localhost\"}:${process.env.PORT || 8081}/`,\r\n                },\r\n            ],\r\n        },\r\n        apis: [`${__dirname}/docs/admin/*.ts`],\r\n    };\r\n    const swaggerSpec = (0, swagger_jsdoc_1.default)(options);\r\n    const adminSwaggerSpec = (0, swagger_jsdoc_1.default)(adminOptions);\r\n    if (false) {}\r\n    else {\r\n        app.use(\"/api-docs\", swagger_ui_express_1.default.serveFiles(swaggerSpec), swagger_ui_express_1.default.setup(swaggerSpec));\r\n        app.use(\"/admin/api-docs\", swagger_ui_express_1.default.serveFiles(adminSwaggerSpec), swagger_ui_express_1.default.setup(adminSwaggerSpec));\r\n    }\r\n    app.use(`/api/${config_1.default.APP.VER}`, (0, express_session_1.default)({\r\n        store: redisStore,\r\n        secret: \"secret$%^134\",\r\n        resave: false,\r\n        saveUninitialized: false,\r\n        cookie: {\r\n            secure: false,\r\n            httpOnly: false,\r\n        },\r\n    }), routes_1.router);\r\n    app.use(\"/admin\", routes_1.adminRouter);\r\n    app.use(\"/static\", express_1.default.static(path_1.default.join(__dirname, \"..\", \"static\")));\r\n    app.use(errorHandler.genericErrorHandler);\r\n    app.use(errorHandler.notFoundError);\r\n    return app;\r\n};\r\nexports.createApp = createApp;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/app.ts?");

/***/ }),

/***/ "./src/components/admin/auth/controller.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/auth/controller.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminAuthController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/auth/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminAuthController {\r\n    static login = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AdminAuthServices();\r\n            const result = await authServices.login(requestBody);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminAuthController = AdminAuthController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/auth/controller.ts?");

/***/ }),

/***/ "./src/components/admin/auth/index.ts":
/*!********************************************!*\
  !*** ./src/components/admin/auth/index.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminAuthController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/auth/controller.ts\");\r\nObject.defineProperty(exports, \"AdminAuthController\", ({ enumerable: true, get: function () { return controller_1.AdminAuthController; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/auth/index.ts?");

/***/ }),

/***/ "./src/components/admin/auth/services.ts":
/*!***********************************************!*\
  !*** ./src/components/admin/auth/services.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminAuthServices = void 0;\r\nconst auth_1 = __webpack_require__(/*! @/db/admin/auth */ \"./src/db/admin/auth/index.ts\");\r\nclass AdminAuthServices {\r\n    adminAuthDAO;\r\n    constructor() {\r\n        this.adminAuthDAO = new auth_1.AdminAuthDAO();\r\n    }\r\n    login = async (body) => {\r\n        const result = await this.adminAuthDAO.login(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminAuthServices = AdminAuthServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/auth/services.ts?");

/***/ }),

/***/ "./src/components/admin/auth/validators.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/auth/validators.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminLoginValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nexports.adminLoginValidator = (0, express_validator_1.checkSchema)({\r\n    email: {\r\n        exists: {\r\n            errorMessage: \"email does not exists!\",\r\n        },\r\n        isString: {\r\n            errorMessage: \"email is not string!\",\r\n        },\r\n        isEmail: {\r\n            errorMessage: \"email is not valid!\",\r\n        },\r\n    },\r\n    password: {\r\n        exists: {\r\n            errorMessage: \"password does not exists!\",\r\n        },\r\n        isString: {\r\n            errorMessage: \"password is not string!\",\r\n        },\r\n        isLength: {\r\n            options: {\r\n                min: 8,\r\n                max: 15,\r\n            },\r\n            errorMessage: \"password length must be at least 8 and below 16 characters\",\r\n        },\r\n        isStrongPassword: {\r\n            options: {\r\n                minLowercase: 1,\r\n                minUppercase: 1,\r\n                minNumbers: 1,\r\n                minSymbols: 1,\r\n            },\r\n            errorMessage: \"password must contain at least one lowercase, uppercase, digit and special character\",\r\n        },\r\n        in: \"body\",\r\n    },\r\n});\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/auth/validators.ts?");

/***/ }),

/***/ "./src/components/admin/banner/controller.ts":
/*!***************************************************!*\
  !*** ./src/components/admin/banner/controller.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminBannerController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/banner/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminBannerController {\r\n    static create = async (req, res, next) => {\r\n        try {\r\n            const adminBannerServices = new services_1.AdminBannerServices();\r\n            const requestBody = req.body;\r\n            requestBody.page_category_ids = JSON.parse(req.body.page_category_ids);\r\n            requestBody.location_ids = JSON.parse(req.body.location_ids);\r\n            requestBody.platform_id = JSON.parse(req.body.platform_id);\r\n            requestBody.image = req.file.path;\r\n            const result = await adminBannerServices.create(requestBody);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static edit = async (req, res, next) => {\r\n        try {\r\n            const adminBannerServices = new services_1.AdminBannerServices();\r\n            const requestBody = req.body;\r\n            if (req.body.page_category_ids) {\r\n                requestBody.page_category_ids = JSON.parse(req.body.page_category_ids);\r\n            }\r\n            if (req.body.location_ids) {\r\n                requestBody.location_ids = JSON.parse(req.body.location_ids);\r\n            }\r\n            if (req.body.platform_id) {\r\n                requestBody.platform_id = JSON.parse(req.body.platform_id);\r\n            }\r\n            if (req.file) {\r\n                requestBody.image = req.file.path;\r\n            }\r\n            const result = await adminBannerServices.edit(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const adminBannerServices = new services_1.AdminBannerServices();\r\n            const result = await adminBannerServices.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Banner list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const adminBannerServices = new services_1.AdminBannerServices();\r\n            const result = await adminBannerServices.get(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Banner data\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const adminBannerServices = new services_1.AdminBannerServices();\r\n            const result = await adminBannerServices.delete(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    message: result.message,\r\n                    status: false,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminBannerController = AdminBannerController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/banner/controller.ts?");

/***/ }),

/***/ "./src/components/admin/banner/index.ts":
/*!**********************************************!*\
  !*** ./src/components/admin/banner/index.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminBannerUpload = exports.AdminBannerValidator = exports.AdminBannerController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/banner/controller.ts\");\r\nObject.defineProperty(exports, \"AdminBannerController\", ({ enumerable: true, get: function () { return controller_1.AdminBannerController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/admin/banner/validator.ts\");\r\nObject.defineProperty(exports, \"AdminBannerValidator\", ({ enumerable: true, get: function () { return validator_1.AdminBannerValidator; } }));\r\nvar storage_1 = __webpack_require__(/*! ./storage */ \"./src/components/admin/banner/storage.ts\");\r\nObject.defineProperty(exports, \"adminBannerUpload\", ({ enumerable: true, get: function () { return storage_1.adminBannerUpload; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/banner/index.ts?");

/***/ }),

/***/ "./src/components/admin/banner/services.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/banner/services.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminBannerServices = void 0;\r\nconst banner_1 = __webpack_require__(/*! @/db/admin/banner */ \"./src/db/admin/banner/index.ts\");\r\nclass AdminBannerServices {\r\n    adminBannerDAO;\r\n    constructor() {\r\n        this.adminBannerDAO = new banner_1.AdminBannerDAO();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.adminBannerDAO.create(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.adminBannerDAO.edit(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.adminBannerDAO.get(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.adminBannerDAO.list(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.adminBannerDAO.delete(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminBannerServices = AdminBannerServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/banner/services.ts?");

/***/ }),

/***/ "./src/components/admin/banner/storage.ts":
/*!************************************************!*\
  !*** ./src/components/admin/banner/storage.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminBannerUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass BannerStorage {\r\n    bannerMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/banner\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    bannerUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.bannerMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminBannerUpload = new BannerStorage().bannerUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/banner/storage.ts?");

/***/ }),

/***/ "./src/components/admin/banner/validator.ts":
/*!**************************************************!*\
  !*** ./src/components/admin/banner/validator.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminBannerValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminBannerValidator {\r\n    static createValidator = (0, express_validator_1.checkSchema)({\r\n        title: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"title does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"title must be string!\",\r\n            },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"title length must be minimum 1 character\",\r\n            },\r\n        },\r\n        description: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"description does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"description must be string!\",\r\n            },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"description length must be minimum 1 character\",\r\n            },\r\n        },\r\n        url: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"url does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"url must be string!\",\r\n            },\r\n            isLength: {\r\n                options: { max: 256 },\r\n                errorMessage: \"url length must be below 256 characters\",\r\n            },\r\n        },\r\n        start_date: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"start_date does not exist!\",\r\n            },\r\n            isISO8601: {\r\n                errorMessage: \"start_date is not in ISO8601!\",\r\n            },\r\n        },\r\n        end_date: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"end_date does not exist!\",\r\n            },\r\n            isISO8601: {\r\n                errorMessage: \"end_date is not in ISO8601!\",\r\n            },\r\n        },\r\n        platform_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"platform_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"platform_id is not numeric!\",\r\n            },\r\n        },\r\n        page_category_ids: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"page_category_ids does not exists!\",\r\n            },\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"page_category_ids must be a numeric array\",\r\n            },\r\n        },\r\n        location_ids: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"location_ids does not exists!\",\r\n            },\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"location_ids must be a numeric array\",\r\n            },\r\n        },\r\n    });\r\n    static edit = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n        title: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isString: {\r\n                errorMessage: \"title must be string!\",\r\n            },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"title length must be minimum 1 character\",\r\n            },\r\n        },\r\n        description: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isString: {\r\n                errorMessage: \"description must be string!\",\r\n            },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"description length must be minimum 1 character\",\r\n            },\r\n        },\r\n        url: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isString: {\r\n                errorMessage: \"url must be string!\",\r\n            },\r\n            isLength: {\r\n                options: { max: 256 },\r\n                errorMessage: \"url length must be below 256 characters\",\r\n            },\r\n        },\r\n        start_date: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isISO8601: {\r\n                errorMessage: \"start_date is not in ISO8601!\",\r\n            },\r\n        },\r\n        end_date: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isISO8601: {\r\n                errorMessage: \"end_date is not in ISO8601!\",\r\n            },\r\n        },\r\n        platform_id: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isNumeric: {\r\n                errorMessage: \"platform_id is not numeric!\",\r\n            },\r\n        },\r\n        page_category_ids: {\r\n            in: \"body\",\r\n            optional: true,\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"page_category_ids must be a numeric array\",\r\n            },\r\n        },\r\n        location_ids: {\r\n            in: \"body\",\r\n            optional: true,\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"location_ids must be a numeric array\",\r\n            },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        platform: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"platform is not numeric!\" },\r\n        },\r\n        location: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"location is not numeric!\" },\r\n        },\r\n        page_category: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category is not numeric!\" },\r\n        },\r\n    });\r\n    static deleteValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n}\r\nexports.AdminBannerValidator = AdminBannerValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/banner/validator.ts?");

/***/ }),

/***/ "./src/components/admin/category/controller.ts":
/*!*****************************************************!*\
  !*** ./src/components/admin/category/controller.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminCategoryController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/category/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminCategoryController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const image = req.file.path;\r\n            const categoryServices = new services_1.CategoryServices();\r\n            const result = await categoryServices.post(body, image);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const categoryServices = new services_1.CategoryServices();\r\n            const result = await categoryServices.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Category list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const categoryServices = new services_1.CategoryServices();\r\n            const result = await categoryServices.get(id);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Category\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const categoryServices = new services_1.CategoryServices();\r\n            const result = await categoryServices.delete(id);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminCategoryController = AdminCategoryController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/category/controller.ts?");

/***/ }),

/***/ "./src/components/admin/category/index.ts":
/*!************************************************!*\
  !*** ./src/components/admin/category/index.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminCategoryUpload = exports.AdminCategoryController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/category/controller.ts\");\r\nObject.defineProperty(exports, \"AdminCategoryController\", ({ enumerable: true, get: function () { return controller_1.AdminCategoryController; } }));\r\nvar storage_1 = __webpack_require__(/*! ./storage */ \"./src/components/admin/category/storage.ts\");\r\nObject.defineProperty(exports, \"adminCategoryUpload\", ({ enumerable: true, get: function () { return storage_1.adminCategoryUpload; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/category/index.ts?");

/***/ }),

/***/ "./src/components/admin/category/services.ts":
/*!***************************************************!*\
  !*** ./src/components/admin/category/services.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CategoryServices = void 0;\r\nconst category_1 = __webpack_require__(/*! @/db/admin/category */ \"./src/db/admin/category/index.ts\");\r\nclass CategoryServices {\r\n    categoryDAO;\r\n    constructor() {\r\n        this.categoryDAO = new category_1.CategoryDAO();\r\n    }\r\n    post = async (body, image) => {\r\n        const result = await this.categoryDAO.post(body, image);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.categoryDAO.list(query);\r\n        return result;\r\n    };\r\n    get = async (id) => {\r\n        const result = await this.categoryDAO.get(id);\r\n        return result;\r\n    };\r\n    delete = async (id) => {\r\n        const result = await this.categoryDAO.delete(id);\r\n        return result;\r\n    };\r\n}\r\nexports.CategoryServices = CategoryServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/category/services.ts?");

/***/ }),

/***/ "./src/components/admin/category/storage.ts":
/*!**************************************************!*\
  !*** ./src/components/admin/category/storage.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminCategoryUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass CategoryStorage {\r\n    bannerMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/category\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    bannerUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.bannerMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminCategoryUpload = new CategoryStorage().bannerUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/category/storage.ts?");

/***/ }),

/***/ "./src/components/admin/category/validators.ts":
/*!*****************************************************!*\
  !*** ./src/components/admin/category/validators.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminCategoryValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminCategoryValidator {\r\n    static createValidator = (0, express_validator_1.checkSchema)({\r\n        name: {\r\n            exists: {\r\n                errorMessage: \"Name field not exist\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Name is not a string format!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 2,\r\n                },\r\n                errorMessage: \"Category name length should be logner than 2 symbols!\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.AdminCategoryValidator = AdminCategoryValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/category/validators.ts?");

/***/ }),

/***/ "./src/components/admin/gallery/controller.ts":
/*!****************************************************!*\
  !*** ./src/components/admin/gallery/controller.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminGalleryController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/gallery/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminGalleryController {\r\n    static create = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const { avatar_image, images } = req.files;\r\n            body.images = images.map((e) => e.path);\r\n            body.avatar_image = avatar_image[0].path;\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.create(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static edit = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            if (req.files) {\r\n                const { avatar_image } = req.files;\r\n                if (avatar_image && avatar_image.length > 0) {\r\n                    body.avatar_image = avatar_image[0].path;\r\n                }\r\n            }\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.edit(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static addImages = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const { images } = req.files;\r\n            body.images = images.map((e) => e.path);\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.addImages(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static deleteImages = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.deleteImages(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const body = req.query;\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.list(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Gallery list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.get(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Gallery\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.delete(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static setPublicationType = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.setPublicationType(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static getPublicationType = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = {\r\n                id: Number(id),\r\n            };\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.getPublicationType(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"gallery photo publication type\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminGalleryController = AdminGalleryController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/gallery/controller.ts?");

/***/ }),

/***/ "./src/components/admin/gallery/index.ts":
/*!***********************************************!*\
  !*** ./src/components/admin/gallery/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminGalleryUpload = exports.AdminGalleryValidator = exports.AdminGalleryController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/gallery/controller.ts\");\r\nObject.defineProperty(exports, \"AdminGalleryController\", ({ enumerable: true, get: function () { return controller_1.AdminGalleryController; } }));\r\nvar validators_1 = __webpack_require__(/*! ./validators */ \"./src/components/admin/gallery/validators.ts\");\r\nObject.defineProperty(exports, \"AdminGalleryValidator\", ({ enumerable: true, get: function () { return validators_1.AdminGalleryValidator; } }));\r\nvar storage_1 = __webpack_require__(/*! ./storage */ \"./src/components/admin/gallery/storage.ts\");\r\nObject.defineProperty(exports, \"adminGalleryUpload\", ({ enumerable: true, get: function () { return storage_1.adminGalleryUpload; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/gallery/index.ts?");

/***/ }),

/***/ "./src/components/admin/gallery/services.ts":
/*!**************************************************!*\
  !*** ./src/components/admin/gallery/services.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GalleryServices = void 0;\r\nconst gallery_1 = __webpack_require__(/*! @/db/admin/gallery */ \"./src/db/admin/gallery/index.ts\");\r\nclass GalleryServices {\r\n    galleryDAO;\r\n    constructor() {\r\n        this.galleryDAO = new gallery_1.GalleryDAO();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.galleryDAO.create(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.galleryDAO.edit(body);\r\n        return result;\r\n    };\r\n    addImages = async (body) => {\r\n        const result = await this.galleryDAO.addImages(body);\r\n        return result;\r\n    };\r\n    deleteImages = async (body) => {\r\n        const result = await this.galleryDAO.deleteImages(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.galleryDAO.list(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.galleryDAO.get(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.galleryDAO.delete(body);\r\n        return result;\r\n    };\r\n    setPublicationType = async (body) => {\r\n        const result = await this.galleryDAO.setPublicationType(body);\r\n        return result;\r\n    };\r\n    getPublicationType = async (body) => {\r\n        const result = await this.galleryDAO.getPublicationType(body);\r\n        return result;\r\n    };\r\n}\r\nexports.GalleryServices = GalleryServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/gallery/services.ts?");

/***/ }),

/***/ "./src/components/admin/gallery/storage.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/gallery/storage.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminGalleryUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass GalleryStorage {\r\n    galleryMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, file, cb) => {\r\n            if (file.fieldname === \"avatar_image\") {\r\n                cb(null, \"static/gallery/avatar\");\r\n            }\r\n            else if (file.fieldname === \"images\") {\r\n                cb(null, \"static/gallery\");\r\n            }\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    galleryUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.galleryMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminGalleryUpload = new GalleryStorage().galleryUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/gallery/storage.ts?");

/***/ }),

/***/ "./src/components/admin/gallery/validators.ts":
/*!****************************************************!*\
  !*** ./src/components/admin/gallery/validators.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminGalleryValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminGalleryValidator {\r\n    static createValidator = (0, express_validator_1.checkSchema)({\r\n        title: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"title field not exist\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"title is not a string format!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 2,\r\n                },\r\n                errorMessage: \"title length should be logner than 2 symbols!\",\r\n            },\r\n        },\r\n        user_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"user_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"user_id is not numeric!\" },\r\n        },\r\n        page_category_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"page_category_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n    });\r\n    static edit = (0, express_validator_1.checkSchema)({\r\n        gallery_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"gallery_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"gallery_id is not numeric!\" },\r\n        },\r\n        title: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isString: {\r\n                errorMessage: \"title is not a string format!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 2,\r\n                },\r\n                errorMessage: \"title length should be logner than 2 symbols!\",\r\n            },\r\n        },\r\n        user_id: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isNumeric: { errorMessage: \"user_id is not numeric!\" },\r\n        },\r\n        page_category_id: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n    });\r\n    static addImages = (0, express_validator_1.checkSchema)({\r\n        gallery_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"gallery_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"gallery_id is not numeric!\" },\r\n        },\r\n    });\r\n    static deleteImages = (0, express_validator_1.checkSchema)({\r\n        gallery_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"gallery_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"gallery_id is not numeric!\" },\r\n        },\r\n        image_ids: {\r\n            in: \"body\",\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        let arr = [];\r\n                        if (value instanceof Array) {\r\n                            arr = value;\r\n                        }\r\n                        else {\r\n                            arr = JSON.parse(value);\r\n                        }\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        console.log(_);\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"image_ids must be a numeric array\",\r\n            },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static deleteValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        user_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"user_id is not numeric!\" },\r\n        },\r\n        page_category_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n        limit: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"limit is not numeric!\" },\r\n        },\r\n        offset: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"offset is not numeric!\" },\r\n        },\r\n        query: {\r\n            optional: true,\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"query does not exists!\",\r\n            },\r\n            isString: { errorMessage: \"query is not string!\" },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"query length must be minimum 1 character\",\r\n            },\r\n        },\r\n        sort: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"sort is not string!\" },\r\n        },\r\n        order: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"order is not string!\" },\r\n        },\r\n        publication_type_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"publication_type_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"publication_type_id must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n    static setPublicationTypeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"id must be numeric!\",\r\n            },\r\n        },\r\n        publication_type_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"publication_type_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"publication_type_id must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n    static getPublicationTypeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n}\r\nexports.AdminGalleryValidator = AdminGalleryValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/gallery/validators.ts?");

/***/ }),

/***/ "./src/components/admin/page-category/controller.ts":
/*!**********************************************************!*\
  !*** ./src/components/admin/page-category/controller.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPageCategoryController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/page-category/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminPageCategoryController {\r\n    static create = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            requestBody.image = req.file.path;\r\n            const videoCategoryServices = new services_1.AdminPageCategoryServices();\r\n            const result = await videoCategoryServices.create(requestBody);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static edit = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            if (req.file) {\r\n                requestBody.image = req.file.path;\r\n            }\r\n            const videoCategoryServices = new services_1.AdminPageCategoryServices();\r\n            const result = await videoCategoryServices.edit(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const requestBody = { id: Number(id) };\r\n            const videoCategoryServices = new services_1.AdminPageCategoryServices();\r\n            const result = await videoCategoryServices.get(requestBody);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"page category data\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const requestBody = { id: Number(id) };\r\n            const videoCategoryServices = new services_1.AdminPageCategoryServices();\r\n            const result = await videoCategoryServices.delete(requestBody);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const videoCategoryServices = new services_1.AdminPageCategoryServices();\r\n            const result = await videoCategoryServices.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"page-category list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static listPage = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const services = new services_1.AdminPageCategoryServices();\r\n            const result = await services.listPage(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"page list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static listCategory = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const services = new services_1.AdminPageCategoryServices();\r\n            const result = await services.listCategory(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"category list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminPageCategoryController = AdminPageCategoryController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/page-category/controller.ts?");

/***/ }),

/***/ "./src/components/admin/page-category/index.ts":
/*!*****************************************************!*\
  !*** ./src/components/admin/page-category/index.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminPageCategoryImageUpload = exports.AdminPageCategoryValidator = exports.AdminPageCategoryController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/page-category/controller.ts\");\r\nObject.defineProperty(exports, \"AdminPageCategoryController\", ({ enumerable: true, get: function () { return controller_1.AdminPageCategoryController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/admin/page-category/validator.ts\");\r\nObject.defineProperty(exports, \"AdminPageCategoryValidator\", ({ enumerable: true, get: function () { return validator_1.AdminPageCategoryValidator; } }));\r\nvar storage_1 = __webpack_require__(/*! ./storage */ \"./src/components/admin/page-category/storage.ts\");\r\nObject.defineProperty(exports, \"adminPageCategoryImageUpload\", ({ enumerable: true, get: function () { return storage_1.adminPageCategoryImageUpload; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/page-category/index.ts?");

/***/ }),

/***/ "./src/components/admin/page-category/services.ts":
/*!********************************************************!*\
  !*** ./src/components/admin/page-category/services.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPageCategoryServices = void 0;\r\nconst page_category_1 = __webpack_require__(/*! @/db/admin/page-category */ \"./src/db/admin/page-category/index.ts\");\r\nclass AdminPageCategoryServices {\r\n    adminPageCategoryDAO;\r\n    constructor() {\r\n        this.adminPageCategoryDAO = new page_category_1.AdminPageCategoryDAO();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.adminPageCategoryDAO.create(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.adminPageCategoryDAO.edit(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.adminPageCategoryDAO.get(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.adminPageCategoryDAO.delete(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.adminPageCategoryDAO.list(body);\r\n        return result;\r\n    };\r\n    listPage = async (body) => {\r\n        const result = await this.adminPageCategoryDAO.listPage(body);\r\n        return result;\r\n    };\r\n    listCategory = async (body) => {\r\n        const result = await this.adminPageCategoryDAO.listCategory(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminPageCategoryServices = AdminPageCategoryServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/page-category/services.ts?");

/***/ }),

/***/ "./src/components/admin/page-category/storage.ts":
/*!*******************************************************!*\
  !*** ./src/components/admin/page-category/storage.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminPageCategoryImageUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass PageCategoryImageStorage {\r\n    bannerMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/page-category\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    categoryImageUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.bannerMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminPageCategoryImageUpload = new PageCategoryImageStorage().categoryImageUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/page-category/storage.ts?");

/***/ }),

/***/ "./src/components/admin/page-category/validator.ts":
/*!*********************************************************!*\
  !*** ./src/components/admin/page-category/validator.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPageCategoryValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminPageCategoryValidator {\r\n    static createValidator = (0, express_validator_1.checkSchema)({\r\n        page_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"page_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"page_id must be numeric!\",\r\n            },\r\n        },\r\n        category_name: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"category_name does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"category_name must be string!\",\r\n            },\r\n        },\r\n    });\r\n    static edit = (0, express_validator_1.checkSchema)({\r\n        page_category_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"page_category_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"page_category_id must be numeric!\",\r\n            },\r\n        },\r\n        page_id: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isNumeric: {\r\n                errorMessage: \"page_id must be numeric!\",\r\n            },\r\n        },\r\n        category_name: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isString: {\r\n                errorMessage: \"category_name must be string!\",\r\n            },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static deleteValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        page_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_id is not numeric!\" },\r\n        },\r\n    });\r\n    static listPageValidator = (0, express_validator_1.checkSchema)({});\r\n    static listCategoryValidator = (0, express_validator_1.checkSchema)({});\r\n}\r\nexports.AdminPageCategoryValidator = AdminPageCategoryValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/page-category/validator.ts?");

/***/ }),

/***/ "./src/components/admin/payment/controller.ts":
/*!****************************************************!*\
  !*** ./src/components/admin/payment/controller.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPaymentController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/payment/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminPaymentController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const image = req.file.path;\r\n            const body = req.body;\r\n            const adminPaymentServices = new services_1.AdminPaymentServices();\r\n            const result = await adminPaymentServices.post(body, image);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (_, res, next) => {\r\n        try {\r\n            const adminPaymentServices = new services_1.AdminPaymentServices();\r\n            const result = await adminPaymentServices.list();\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static userList = async (_, res, next) => {\r\n        try {\r\n            const adminPaymentServices = new services_1.AdminPaymentServices();\r\n            const result = await adminPaymentServices.userList();\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const adminPaymentServices = new services_1.AdminPaymentServices();\r\n            const result = await adminPaymentServices.delete(id);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminPaymentController = AdminPaymentController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/payment/controller.ts?");

/***/ }),

/***/ "./src/components/admin/payment/services.ts":
/*!**************************************************!*\
  !*** ./src/components/admin/payment/services.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPaymentServices = void 0;\r\nconst payment_1 = __webpack_require__(/*! @/db/admin/payment */ \"./src/db/admin/payment/index.ts\");\r\nclass AdminPaymentServices {\r\n    paymentDAO;\r\n    constructor() {\r\n        this.paymentDAO = new payment_1.AdminPaymentDAO();\r\n    }\r\n    post = async (body, image) => {\r\n        const result = await this.paymentDAO.post(body, image);\r\n        return result;\r\n    };\r\n    list = async () => {\r\n        const result = await this.paymentDAO.list();\r\n        return result;\r\n    };\r\n    userList = async () => {\r\n        const result = await this.paymentDAO.userList();\r\n        return result;\r\n    };\r\n    delete = async (id) => {\r\n        const result = await this.paymentDAO.delete(id);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminPaymentServices = AdminPaymentServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/payment/services.ts?");

/***/ }),

/***/ "./src/components/admin/payment/storage.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/payment/storage.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminPaymentUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass PaymentStorage {\r\n    paymentMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/payment\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    paymentUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.paymentMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminPaymentUpload = new PaymentStorage().paymentUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/payment/storage.ts?");

/***/ }),

/***/ "./src/components/admin/post/controller.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/post/controller.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPostController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/post/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminPostController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const files = req.files;\r\n            const adminPostServices = new services_1.AdminPostServices();\r\n            const images = files.reduce((acc, curValue) => {\r\n                return [...acc, curValue.path];\r\n            }, []);\r\n            const result = await adminPostServices.post(body, images);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const adminPostServices = new services_1.AdminPostServices();\r\n            const result = await adminPostServices.list(query);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const adminPostServices = new services_1.AdminPostServices();\r\n            const result = await adminPostServices.get(id);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const adminPostServices = new services_1.AdminPostServices();\r\n            const result = await adminPostServices.delete(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static approve = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const body = req.body;\r\n            const adminPostServices = new services_1.AdminPostServices();\r\n            const result = await adminPostServices.approve(id, body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static setPublicationType = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.AdminPostServices();\r\n            const result = await services.setPublicationType(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static getPublicationType = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const services = new services_1.AdminPostServices();\r\n            const result = await services.getPublicationType(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"post publication type\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static update = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const files = req.files;\r\n            if (files && files.length > 0) {\r\n                body.images = files.reduce((acc, curValue) => {\r\n                    return [...acc, curValue.path];\r\n                }, []);\r\n            }\r\n            const services = new services_1.AdminPostServices();\r\n            const result = await services.update(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminPostController = AdminPostController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/post/controller.ts?");

/***/ }),

/***/ "./src/components/admin/post/index.ts":
/*!********************************************!*\
  !*** ./src/components/admin/post/index.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPostValidator = exports.AdminPostController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/post/controller.ts\");\r\nObject.defineProperty(exports, \"AdminPostController\", ({ enumerable: true, get: function () { return controller_1.AdminPostController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/admin/post/validator.ts\");\r\nObject.defineProperty(exports, \"AdminPostValidator\", ({ enumerable: true, get: function () { return validator_1.AdminPostValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/post/index.ts?");

/***/ }),

/***/ "./src/components/admin/post/services.ts":
/*!***********************************************!*\
  !*** ./src/components/admin/post/services.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPostServices = void 0;\r\nconst post_1 = __webpack_require__(/*! @/db/admin/post */ \"./src/db/admin/post/index.ts\");\r\nclass AdminPostServices {\r\n    postDAO;\r\n    constructor() {\r\n        this.postDAO = new post_1.PostDAO();\r\n    }\r\n    post = async (body, files) => {\r\n        const result = await this.postDAO.post(body, files);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.postDAO.list(query);\r\n        return result;\r\n    };\r\n    get = async (id) => {\r\n        const result = await this.postDAO.get(id);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.postDAO.delete(body);\r\n        return result;\r\n    };\r\n    approve = async (id, body) => {\r\n        const result = await this.postDAO.approve(id, body);\r\n        return result;\r\n    };\r\n    setPublicationType = async (body) => {\r\n        const result = await this.postDAO.setPublicationType(body);\r\n        return result;\r\n    };\r\n    getPublicationType = async (body) => {\r\n        const result = await this.postDAO.getPublicationType(body);\r\n        return result;\r\n    };\r\n    update = async (body) => {\r\n        const result = await this.postDAO.update(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminPostServices = AdminPostServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/post/services.ts?");

/***/ }),

/***/ "./src/components/admin/post/validator.ts":
/*!************************************************!*\
  !*** ./src/components/admin/post/validator.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPostValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminPostValidator {\r\n    static setPublicationTypeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"id must be numeric!\",\r\n            },\r\n        },\r\n        publication_type_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"publication_type_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"publication_type_id must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n    static getPublicationTypeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static deleteValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static update = (0, express_validator_1.checkSchema)({\r\n        post_id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"post_id is not numeric!\" },\r\n        },\r\n        title: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isString: { errorMessage: \"title is not string!\" },\r\n            isLength: {\r\n                options: {\r\n                    min: 8,\r\n                },\r\n                errorMessage: \"Title length should be logner than 8 characters!\",\r\n            },\r\n        },\r\n        description: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isString: { errorMessage: \"description is not string!\" },\r\n        },\r\n        phone: {\r\n            optional: true,\r\n            in: \"body\",\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n        price: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"price is not numeric!\" },\r\n        },\r\n        discount: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"discount is not numeric!\" },\r\n        },\r\n        category_id: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"category_id is not numeric!\" },\r\n        },\r\n        sub_category_id: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"sub_category_id is not numeric!\" },\r\n        },\r\n        start_date: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isISO8601: {\r\n                errorMessage: \"Start date not a valid!\",\r\n            },\r\n        },\r\n        end_date: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isISO8601: {\r\n                errorMessage: \"Start date not a valid!\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.AdminPostValidator = AdminPostValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/post/validator.ts?");

/***/ }),

/***/ "./src/components/admin/publication-type/controller.ts":
/*!*************************************************************!*\
  !*** ./src/components/admin/publication-type/controller.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPublicationTypeController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/publication-type/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminPublicationTypeController {\r\n    static create = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const services = new services_1.AdminPublicationTypeServices();\r\n            const result = await services.create(requestBody);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const requestBody = { id: Number(id) };\r\n            const services = new services_1.AdminPublicationTypeServices();\r\n            const result = await services.get(requestBody);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"publication-type data\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const services = new services_1.AdminPublicationTypeServices();\r\n            const result = await services.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"publication-type list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminPublicationTypeController = AdminPublicationTypeController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/publication-type/controller.ts?");

/***/ }),

/***/ "./src/components/admin/publication-type/index.ts":
/*!********************************************************!*\
  !*** ./src/components/admin/publication-type/index.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPublicationTypeValidator = exports.AdminPublicationTypeController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/publication-type/controller.ts\");\r\nObject.defineProperty(exports, \"AdminPublicationTypeController\", ({ enumerable: true, get: function () { return controller_1.AdminPublicationTypeController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/admin/publication-type/validator.ts\");\r\nObject.defineProperty(exports, \"AdminPublicationTypeValidator\", ({ enumerable: true, get: function () { return validator_1.AdminPublicationTypeValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/publication-type/index.ts?");

/***/ }),

/***/ "./src/components/admin/publication-type/services.ts":
/*!***********************************************************!*\
  !*** ./src/components/admin/publication-type/services.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPublicationTypeServices = void 0;\r\nconst publication_type_1 = __webpack_require__(/*! @/db/admin/publication-type */ \"./src/db/admin/publication-type/index.ts\");\r\nclass AdminPublicationTypeServices {\r\n    serviceDAO;\r\n    constructor() {\r\n        this.serviceDAO = new publication_type_1.AdminPublicationTypeDAO();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.serviceDAO.create(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.serviceDAO.get(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.serviceDAO.list(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminPublicationTypeServices = AdminPublicationTypeServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/publication-type/services.ts?");

/***/ }),

/***/ "./src/components/admin/publication-type/validator.ts":
/*!************************************************************!*\
  !*** ./src/components/admin/publication-type/validator.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPublicationTypeValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminPublicationTypeValidator {\r\n    static createValidator = (0, express_validator_1.checkSchema)({\r\n        type: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"name does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"name must be string!\",\r\n            },\r\n        },\r\n        amount: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: {\r\n                errorMessage: \"amount must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static deleteValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        type: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"type is not string!\" },\r\n        },\r\n    });\r\n}\r\nexports.AdminPublicationTypeValidator = AdminPublicationTypeValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/publication-type/validator.ts?");

/***/ }),

/***/ "./src/components/admin/service/controller.ts":
/*!****************************************************!*\
  !*** ./src/components/admin/service/controller.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminServiceController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/service/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminServiceController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const file = req.file.path;\r\n            const adminServiceServices = new services_1.AdminServiceServices();\r\n            const result = await adminServiceServices.post(body, file);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static put = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const id = Number(req.params.id);\r\n            const file = req.file?.path;\r\n            if (req.body.location_costs) {\r\n                body.location_costs = JSON.parse(body.location_costs);\r\n            }\r\n            const adminServiceServices = new services_1.AdminServiceServices();\r\n            const result = await adminServiceServices.put(id, body, file);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (_, res, next) => {\r\n        try {\r\n            const adminServiceServices = new services_1.AdminServiceServices();\r\n            const result = await adminServiceServices.list();\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const id = Number(req.params.id);\r\n            const adminServiceServices = new services_1.AdminServiceServices();\r\n            const result = await adminServiceServices.get(id);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const id = Number(req.params.id);\r\n            const adminServiceServices = new services_1.AdminServiceServices();\r\n            const result = await adminServiceServices.delete(id);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminServiceController = AdminServiceController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/service/controller.ts?");

/***/ }),

/***/ "./src/components/admin/service/services.ts":
/*!**************************************************!*\
  !*** ./src/components/admin/service/services.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminServiceServices = void 0;\r\nconst service_1 = __webpack_require__(/*! @/db/admin/service */ \"./src/db/admin/service/index.ts\");\r\nclass AdminServiceServices {\r\n    serviceDAO;\r\n    constructor() {\r\n        this.serviceDAO = new service_1.AdminServiceDAO();\r\n    }\r\n    post = async (body, image) => {\r\n        const result = await this.serviceDAO.post(body, image);\r\n        return result;\r\n    };\r\n    put = async (id, body, image) => {\r\n        const result = await this.serviceDAO.put(id, body, image);\r\n        return result;\r\n    };\r\n    list = async () => {\r\n        const result = await this.serviceDAO.list();\r\n        return result;\r\n    };\r\n    get = async (id) => {\r\n        const result = await this.serviceDAO.get(id);\r\n        return result;\r\n    };\r\n    delete = async (id) => {\r\n        const result = await this.serviceDAO.delete(id);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminServiceServices = AdminServiceServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/service/services.ts?");

/***/ }),

/***/ "./src/components/admin/service/storage.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/service/storage.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminServiceUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass ServiceStorage {\r\n    serviceMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/service\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    serviceUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.serviceMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminServiceUpload = new ServiceStorage().serviceUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/service/storage.ts?");

/***/ }),

/***/ "./src/components/admin/service/validators.ts":
/*!****************************************************!*\
  !*** ./src/components/admin/service/validators.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminServiceValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminServiceValidator {\r\n    static postValidator = (0, express_validator_1.checkSchema)({\r\n        name: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"name does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Name must be type of string!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 3,\r\n                },\r\n                errorMessage: \"Name length must be at least 3 characters!\",\r\n            },\r\n        },\r\n        cost: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Cost doesn't exists!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"Cost is not numeric!\",\r\n            },\r\n        },\r\n        count: {\r\n            in: \"body\",\r\n            isBoolean: {\r\n                errorMessage: \"Count is not boolean!\",\r\n            },\r\n        },\r\n        month: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isBoolean: {\r\n                errorMessage: \"month is not boolean!\",\r\n            },\r\n        },\r\n        month_cost: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: {\r\n                errorMessage: \"month_cost is not numeric!\",\r\n            },\r\n        },\r\n        location_costs: {\r\n            optional: true,\r\n            in: \"body\",\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        for (let i = 0; i < arr.length; i++) {\r\n                            const temp = arr[i];\r\n                            if (!temp) {\r\n                                return \"\";\r\n                            }\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"location_costs must be array or json array of location data\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.AdminServiceValidator = AdminServiceValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/service/validators.ts?");

/***/ }),

/***/ "./src/components/admin/sub-category/controller.ts":
/*!*********************************************************!*\
  !*** ./src/components/admin/sub-category/controller.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminSubCategoryController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/sub-category/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminSubCategoryController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const adminSubCategoryServices = new services_1.AdminSubCategoryServices();\r\n            const body = req.body;\r\n            const result = await adminSubCategoryServices.post(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const adminSubCategoryServices = new services_1.AdminSubCategoryServices();\r\n            const result = await adminSubCategoryServices.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const adminSubCategoryServices = new services_1.AdminSubCategoryServices();\r\n            const result = await adminSubCategoryServices.get(id);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const adminSubCategoryServices = new services_1.AdminSubCategoryServices();\r\n            const result = await adminSubCategoryServices.delete(id);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminSubCategoryController = AdminSubCategoryController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/sub-category/controller.ts?");

/***/ }),

/***/ "./src/components/admin/sub-category/services.ts":
/*!*******************************************************!*\
  !*** ./src/components/admin/sub-category/services.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminSubCategoryServices = void 0;\r\nconst sub_category_1 = __webpack_require__(/*! @/db/admin/sub-category */ \"./src/db/admin/sub-category/index.ts\");\r\nclass AdminSubCategoryServices {\r\n    subCategoryDAO;\r\n    constructor() {\r\n        this.subCategoryDAO = new sub_category_1.SubCategoryDAO();\r\n    }\r\n    post = async (body) => {\r\n        const result = await this.subCategoryDAO.post(body);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.subCategoryDAO.list(query);\r\n        return result;\r\n    };\r\n    get = async (id) => {\r\n        const result = await this.subCategoryDAO.get(id);\r\n        return result;\r\n    };\r\n    delete = async (id) => {\r\n        const result = await this.subCategoryDAO.delete(id);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminSubCategoryServices = AdminSubCategoryServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/sub-category/services.ts?");

/***/ }),

/***/ "./src/components/admin/sub-category/validators.ts":
/*!*********************************************************!*\
  !*** ./src/components/admin/sub-category/validators.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminSubCategoryValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminSubCategoryValidator {\r\n    static postValidator = (0, express_validator_1.checkSchema)({\r\n        name: {\r\n            exists: {\r\n                errorMessage: \"Name field not exist\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Name is not a string format!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 2,\r\n                },\r\n                errorMessage: \"Category name length should be logner than 2 symbols!\",\r\n            },\r\n        },\r\n        category_id: {\r\n            exists: {\r\n                errorMessage: \"Category id field not exist\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"Category id is not numeric value\",\r\n            },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            exists: {\r\n                errorMessage: \"Id param doesn't exist\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"Category id is not numeric value\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.AdminSubCategoryValidator = AdminSubCategoryValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/sub-category/validators.ts?");

/***/ }),

/***/ "./src/components/admin/user-profile/controller.ts":
/*!*********************************************************!*\
  !*** ./src/components/admin/user-profile/controller.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserProfileController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/user-profile/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminUserProfileController {\r\n    static listFollowReward = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const services = new services_1.AdminUserProfileServices();\r\n            const result = await services.listFollowReward(query);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static getFollowReward = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const services = new services_1.AdminUserProfileServices();\r\n            const result = await services.getFollowReward(query);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static setFollowReward = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.AdminUserProfileServices();\r\n            const result = await services.setFollowReward(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static setTopListLimit = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.AdminUserProfileServices();\r\n            const result = await services.setTopListLimit(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static listTopListLimit = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const services = new services_1.AdminUserProfileServices();\r\n            const result = await services.listTopListLimit(query);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static delteUser = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const services = new services_1.AdminUserProfileServices();\r\n            const result = await services.delteUser(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static setDayStreakCoinReward = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.AdminUserProfileServices();\r\n            const result = await services.setDayStreakCoinReward(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminUserProfileController = AdminUserProfileController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/user-profile/controller.ts?");

/***/ }),

/***/ "./src/components/admin/user-profile/index.ts":
/*!****************************************************!*\
  !*** ./src/components/admin/user-profile/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserProfileValidator = exports.AdminUserProfileController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/user-profile/controller.ts\");\r\nObject.defineProperty(exports, \"AdminUserProfileController\", ({ enumerable: true, get: function () { return controller_1.AdminUserProfileController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/admin/user-profile/validator.ts\");\r\nObject.defineProperty(exports, \"AdminUserProfileValidator\", ({ enumerable: true, get: function () { return validator_1.AdminUserProfileValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/user-profile/index.ts?");

/***/ }),

/***/ "./src/components/admin/user-profile/services.ts":
/*!*******************************************************!*\
  !*** ./src/components/admin/user-profile/services.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserProfileServices = void 0;\r\nconst user_profile_1 = __webpack_require__(/*! @/db/admin/user-profile */ \"./src/db/admin/user-profile/index.ts\");\r\nclass AdminUserProfileServices {\r\n    adminUserProfileDAO;\r\n    constructor() {\r\n        this.adminUserProfileDAO = new user_profile_1.AdminUserProfileDAO();\r\n    }\r\n    listFollowReward = async (body) => {\r\n        const result = await this.adminUserProfileDAO.listFollowReward(body);\r\n        return result;\r\n    };\r\n    getFollowReward = async (body) => {\r\n        const result = await this.adminUserProfileDAO.getFollowReward(body);\r\n        return result;\r\n    };\r\n    setFollowReward = async (body) => {\r\n        const result = await this.adminUserProfileDAO.setFollowReward(body);\r\n        return result;\r\n    };\r\n    setTopListLimit = async (body) => {\r\n        const result = await this.adminUserProfileDAO.setTopListLimit(body);\r\n        return result;\r\n    };\r\n    listTopListLimit = async (body) => {\r\n        const result = await this.adminUserProfileDAO.listTopListLimit(body);\r\n        return result;\r\n    };\r\n    delteUser = async (body) => {\r\n        const result = await this.adminUserProfileDAO.delteUser(body);\r\n        return result;\r\n    };\r\n    setDayStreakCoinReward = async (body) => {\r\n        const result = await this.adminUserProfileDAO.setDayStreakCoinReward(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminUserProfileServices = AdminUserProfileServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/user-profile/services.ts?");

/***/ }),

/***/ "./src/components/admin/user-profile/validator.ts":
/*!********************************************************!*\
  !*** ./src/components/admin/user-profile/validator.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserProfileValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminUserProfileValidator {\r\n    static listFollowReward = (0, express_validator_1.checkSchema)({\r\n        subscription_type_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"subscription_type_id is not numeric!\" },\r\n        },\r\n        location_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"location_id is not numeric!\" },\r\n        },\r\n        sort: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"sort is not string!\" },\r\n        },\r\n        order: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"order is not string!\" },\r\n        },\r\n    });\r\n    static getFollowReward = (0, express_validator_1.checkSchema)({\r\n        subscription_type_id: {\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"subscription_type_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"subscription_type_id is not numeric!\" },\r\n        },\r\n        location_id: {\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"location_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"location_id is not numeric!\" },\r\n        },\r\n    });\r\n    static setFollowReward = (0, express_validator_1.checkSchema)({\r\n        subscription_type_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"subscription_type_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"subscription_type_id must be numeric!\",\r\n            },\r\n        },\r\n        location_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"location_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"location_id must be numeric!\",\r\n            },\r\n        },\r\n        coin_amount: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"coin_amount does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"coin_amount must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n    static setTopListLimit = (0, express_validator_1.checkSchema)({\r\n        limit_count: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"limit_count does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"limit_count must be numeric!\",\r\n            },\r\n        },\r\n        name: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"name does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"name must be string!\",\r\n            },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"name length must be minimum 1 character\",\r\n            },\r\n        },\r\n    });\r\n    static listTopListLimit = (0, express_validator_1.checkSchema)({});\r\n    static delteUser = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static setDayStreakCoinReward = (0, express_validator_1.checkSchema)({\r\n        day_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"day_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"day_id must be numeric!\",\r\n            },\r\n        },\r\n        coin_amount: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"coin_amount does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"coin_amount must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.AdminUserProfileValidator = AdminUserProfileValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/user-profile/validator.ts?");

/***/ }),

/***/ "./src/components/admin/user/controller.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/user/controller.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/user/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminUserController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            console.log(\"Image\", req.file);\r\n            const image = req.file?.path;\r\n            const adminUserServices = new services_1.AdminUserServices();\r\n            const result = await adminUserServices.post(body, image);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const adminUserServices = new services_1.AdminUserServices();\r\n            const result = await adminUserServices.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminUserController = AdminUserController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/user/controller.ts?");

/***/ }),

/***/ "./src/components/admin/user/services.ts":
/*!***********************************************!*\
  !*** ./src/components/admin/user/services.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserServices = void 0;\r\nconst user_1 = __webpack_require__(/*! @/db/admin/user */ \"./src/db/admin/user/index.ts\");\r\nclass AdminUserServices {\r\n    userDAO;\r\n    constructor() {\r\n        this.userDAO = new user_1.AdminUserDAO();\r\n    }\r\n    post = async (body, image) => {\r\n        const result = await this.userDAO.post(body, image);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.userDAO.list(query);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminUserServices = AdminUserServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/user/services.ts?");

/***/ }),

/***/ "./src/components/admin/user/storage.ts":
/*!**********************************************!*\
  !*** ./src/components/admin/user/storage.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminUserUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass AdminUserStorage {\r\n    adminUserMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/user/avatar\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    userUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.adminUserMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminUserUpload = new AdminUserStorage().userUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/user/storage.ts?");

/***/ }),

/***/ "./src/components/admin/video/controller.ts":
/*!**************************************************!*\
  !*** ./src/components/admin/video/controller.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminVideoController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/admin/video/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AdminVideoController {\r\n    static create = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const videoServices = new services_1.AdminVideoServices();\r\n            const { video, thumbnail } = req.files;\r\n            requestBody.video = video[0].path;\r\n            requestBody.thumbnail = thumbnail[0].path;\r\n            requestBody.page_category_ids = JSON.parse(req.body.page_category_ids);\r\n            const result = await videoServices.create(requestBody);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static edit = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const videoServices = new services_1.AdminVideoServices();\r\n            if (req.body.page_category_ids) {\r\n                requestBody.page_category_ids = JSON.parse(req.body.page_category_ids);\r\n            }\r\n            if (req.files) {\r\n                const { thumbnail } = req.files;\r\n                if (thumbnail && thumbnail.length > 0) {\r\n                    requestBody.thumbnail = thumbnail[0].path;\r\n                }\r\n            }\r\n            const result = await videoServices.edit(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const requestBody = { id: Number(id) };\r\n            const videoServices = new services_1.AdminVideoServices();\r\n            const result = await videoServices.get(requestBody);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Video\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const requestBody = { id: Number(id) };\r\n            const videoServices = new services_1.AdminVideoServices();\r\n            const result = await videoServices.delete(requestBody);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const videoServices = new services_1.AdminVideoServices();\r\n            const result = await videoServices.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"video list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static setPublicationType = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const videoServices = new services_1.AdminVideoServices();\r\n            const result = await videoServices.setPublicationType(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static getPublicationType = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const videoServices = new services_1.AdminVideoServices();\r\n            const result = await videoServices.getPublicationType(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"video publication type\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.AdminVideoController = AdminVideoController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/video/controller.ts?");

/***/ }),

/***/ "./src/components/admin/video/index.ts":
/*!*********************************************!*\
  !*** ./src/components/admin/video/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminVideoUpload = exports.AdminVideoValidator = exports.AdminVideoController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/admin/video/controller.ts\");\r\nObject.defineProperty(exports, \"AdminVideoController\", ({ enumerable: true, get: function () { return controller_1.AdminVideoController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/admin/video/validator.ts\");\r\nObject.defineProperty(exports, \"AdminVideoValidator\", ({ enumerable: true, get: function () { return validator_1.AdminVideoValidator; } }));\r\nvar storage_1 = __webpack_require__(/*! ./storage */ \"./src/components/admin/video/storage.ts\");\r\nObject.defineProperty(exports, \"adminVideoUpload\", ({ enumerable: true, get: function () { return storage_1.adminVideoUpload; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/video/index.ts?");

/***/ }),

/***/ "./src/components/admin/video/services.ts":
/*!************************************************!*\
  !*** ./src/components/admin/video/services.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminVideoServices = void 0;\r\nconst video_1 = __webpack_require__(/*! @/db/admin/video */ \"./src/db/admin/video/index.ts\");\r\nclass AdminVideoServices {\r\n    adminVideoDAO;\r\n    constructor() {\r\n        this.adminVideoDAO = new video_1.AdminVideoDAO();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.adminVideoDAO.create(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.adminVideoDAO.edit(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.adminVideoDAO.get(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.adminVideoDAO.delete(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.adminVideoDAO.list(body);\r\n        return result;\r\n    };\r\n    setPublicationType = async (body) => {\r\n        const result = await this.adminVideoDAO.setPublicationType(body);\r\n        return result;\r\n    };\r\n    getPublicationType = async (body) => {\r\n        const result = await this.adminVideoDAO.getPublicationType(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminVideoServices = AdminVideoServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/video/services.ts?");

/***/ }),

/***/ "./src/components/admin/video/storage.ts":
/*!***********************************************!*\
  !*** ./src/components/admin/video/storage.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminVideoCategoryImageUpload = exports.adminVideoUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass VideoStorage {\r\n    videoMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, file, cb) => {\r\n            if (file.fieldname === \"video\") {\r\n                cb(null, \"video\");\r\n            }\r\n            else if (file.fieldname === \"thumbnail\") {\r\n                cb(null, \"static/video/thumbnail\");\r\n            }\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    videoUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.videoMulterStorage,\r\n            limits: { fileSize: 1 * 1024 * 1024 * 1024 },\r\n            fileFilter(_, file, cb) {\r\n                if (file.fieldname === \"video\" &&\r\n                    !file.originalname.match(/\\.(mp4|mkv|webm|webp)$/i)) {\r\n                    cb(new Error(\"Please upload video file\"));\r\n                }\r\n                else if (file.fieldname === \"thumbnail\" &&\r\n                    !file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nclass VideoCategoryImageStorage {\r\n    bannerMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/video/category\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    categoryImageUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.bannerMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.adminVideoUpload = new VideoStorage().videoUpload();\r\nexports.adminVideoCategoryImageUpload = new VideoCategoryImageStorage().categoryImageUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/video/storage.ts?");

/***/ }),

/***/ "./src/components/admin/video/validator.ts":
/*!*************************************************!*\
  !*** ./src/components/admin/video/validator.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminVideoValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass AdminVideoValidator {\r\n    static createValidator = (0, express_validator_1.checkSchema)({\r\n        user_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"user_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"user_id must be numeric!\",\r\n            },\r\n        },\r\n        title: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"title does not exist!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"title must be string!\",\r\n            },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"title length must be minimum 1 character\",\r\n            },\r\n        },\r\n        page_category_ids: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"page_category_ids does not exists!\",\r\n            },\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"page_category_ids must be a numeric array\",\r\n            },\r\n        },\r\n    });\r\n    static edit = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"id must be numeric!\",\r\n            },\r\n        },\r\n        user_id: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isNumeric: {\r\n                errorMessage: \"user_id must be numeric!\",\r\n            },\r\n        },\r\n        title: {\r\n            in: \"body\",\r\n            optional: true,\r\n            isString: {\r\n                errorMessage: \"title must be string!\",\r\n            },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"title length must be minimum 1 character\",\r\n            },\r\n        },\r\n        page_category_ids: {\r\n            in: \"body\",\r\n            optional: true,\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"page_category_ids must be a numeric array\",\r\n            },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static deleteValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        user_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"user_id is not numeric!\" },\r\n        },\r\n        page_category_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n        limit: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"limit is not numeric!\" },\r\n        },\r\n        offset: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"offset is not numeric!\" },\r\n        },\r\n        query: {\r\n            optional: true,\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"query does not exists!\",\r\n            },\r\n            isString: { errorMessage: \"query is not string!\" },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"query length must be minimum 1 character\",\r\n            },\r\n        },\r\n        sort: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"sort is not string!\" },\r\n        },\r\n        order: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"order is not string!\" },\r\n        },\r\n        publication_type_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"publication_type_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"publication_type_id must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n    static setPublicationTypeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"id must be numeric!\",\r\n            },\r\n        },\r\n        publication_type_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"publication_type_id does not exist!\",\r\n            },\r\n            isNumeric: {\r\n                errorMessage: \"publication_type_id must be numeric!\",\r\n            },\r\n        },\r\n    });\r\n    static getPublicationTypeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n}\r\nexports.AdminVideoValidator = AdminVideoValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/admin/video/validator.ts?");

/***/ }),

/***/ "./src/components/auth/controller.ts":
/*!*******************************************!*\
  !*** ./src/components/auth/controller.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AuthController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/auth/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass AuthController {\r\n    static signup = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AuthServices();\r\n            const result = await authServices.signup(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    message: result.message,\r\n                    status: false,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static login = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AuthServices();\r\n            const result = await authServices.login(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static accountVerify = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AuthServices();\r\n            const result = await authServices.accountVerify(requestBody);\r\n            if (!result) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                status: true,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static accountVerifyCheck = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AuthServices();\r\n            const result = await authServices.accountVerifyCheck(requestBody);\r\n            if (!result) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                status: true,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static recoverVerifyCheck = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AuthServices();\r\n            const result = await authServices.recoverVerifyCheck(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static userExists = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AuthServices();\r\n            const result = await authServices.userExists(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static resetPassword = async (req, res, next) => {\r\n        try {\r\n            const requestBody = req.body;\r\n            const authServices = new services_1.AuthServices();\r\n            const result = await authServices.resetPassword(requestBody);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.AuthController = AuthController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/auth/controller.ts?");

/***/ }),

/***/ "./src/components/auth/index.ts":
/*!**************************************!*\
  !*** ./src/components/auth/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AuthValidator = exports.AuthController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/auth/controller.ts\");\r\nObject.defineProperty(exports, \"AuthController\", ({ enumerable: true, get: function () { return controller_1.AuthController; } }));\r\nvar validators_1 = __webpack_require__(/*! ./validators */ \"./src/components/auth/validators.ts\");\r\nObject.defineProperty(exports, \"AuthValidator\", ({ enumerable: true, get: function () { return validators_1.AuthValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/auth/index.ts?");

/***/ }),

/***/ "./src/components/auth/services.ts":
/*!*****************************************!*\
  !*** ./src/components/auth/services.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AuthServices = void 0;\r\nconst auth_1 = __webpack_require__(/*! @/db/auth */ \"./src/db/auth/index.ts\");\r\nclass AuthServices {\r\n    authDAO;\r\n    constructor() {\r\n        this.authDAO = new auth_1.AuthDAO();\r\n    }\r\n    signup = async (body) => {\r\n        const result = await this.authDAO.signup(body);\r\n        return result;\r\n    };\r\n    login = async (body) => {\r\n        const result = await this.authDAO.login(body);\r\n        return result;\r\n    };\r\n    accountVerify = async (body) => {\r\n        const result = await this.authDAO.accountVerify(body);\r\n        return result;\r\n    };\r\n    accountVerifyCheck = async (body) => {\r\n        const result = await this.authDAO.accountVerifyCheck(body);\r\n        return result;\r\n    };\r\n    recoverVerifyCheck = async (body) => {\r\n        const result = await this.authDAO.recoverVerifyCheck(body);\r\n        return result;\r\n    };\r\n    userExists = async (body) => {\r\n        const result = await this.authDAO.userExists(body);\r\n        return result;\r\n    };\r\n    resetPassword = async (body) => {\r\n        const result = await this.authDAO.recoverPassword(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AuthServices = AuthServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/auth/services.ts?");

/***/ }),

/***/ "./src/components/auth/validators.ts":
/*!*******************************************!*\
  !*** ./src/components/auth/validators.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AuthValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\ndotenv_1.default.config();\r\nconst STAT_PASS = `${process.env.STAT_PASS}`;\r\nclass AuthValidator {\r\n    static signupValidator = (0, express_validator_1.checkSchema)({\r\n        name: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 5,\r\n                },\r\n                errorMessage: \"Username must be at least 8 characters long\",\r\n            },\r\n        },\r\n        phone: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n        password: {\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 6,\r\n                    max: 15,\r\n                },\r\n                errorMessage: \"Password length must be at least 8 and below 16 characters\",\r\n            },\r\n            in: \"body\",\r\n        },\r\n    });\r\n    static loginValidator = (0, express_validator_1.checkSchema)({\r\n        phone: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n        password: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 6,\r\n                    max: 15,\r\n                },\r\n                errorMessage: \"Password length must be at least 8 and below 16 characters\",\r\n            },\r\n        },\r\n    });\r\n    static accountVerifyValidator = (0, express_validator_1.checkSchema)({\r\n        phone: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n        statpass: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            equals: {\r\n                options: STAT_PASS,\r\n                errorMessage: \"Check your input data\",\r\n            },\r\n        },\r\n        recover: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isBoolean: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n        },\r\n    });\r\n    static accountVerifyCheckValidator = (0, express_validator_1.checkSchema)({\r\n        phone: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n    });\r\n    static passwordRecoveryValidator = (0, express_validator_1.checkSchema)({\r\n        phone: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isString: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n        password: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Check your input data!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 6,\r\n                },\r\n                errorMessage: \"Password must be at least 6 characters long!\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.AuthValidator = AuthValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/auth/validators.ts?");

/***/ }),

/***/ "./src/components/banner/controller.ts":
/*!*********************************************!*\
  !*** ./src/components/banner/controller.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BannerController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/banner/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass BannerController {\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const body = req.query;\r\n            const bannerServices = new services_1.BannerServices();\r\n            const result = await bannerServices.list(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Banner list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const bannerServices = new services_1.BannerServices();\r\n            const result = await bannerServices.get(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Banner data\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.BannerController = BannerController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/banner/controller.ts?");

/***/ }),

/***/ "./src/components/banner/index.ts":
/*!****************************************!*\
  !*** ./src/components/banner/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BannerListValidator = exports.BannerController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/banner/controller.ts\");\r\nObject.defineProperty(exports, \"BannerController\", ({ enumerable: true, get: function () { return controller_1.BannerController; } }));\r\nvar validators_1 = __webpack_require__(/*! ./validators */ \"./src/components/banner/validators.ts\");\r\nObject.defineProperty(exports, \"BannerListValidator\", ({ enumerable: true, get: function () { return validators_1.BannerListValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/banner/index.ts?");

/***/ }),

/***/ "./src/components/banner/services.ts":
/*!*******************************************!*\
  !*** ./src/components/banner/services.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BannerServices = void 0;\r\nconst banner_1 = __webpack_require__(/*! @/db/banner */ \"./src/db/banner/index.ts\");\r\nclass BannerServices {\r\n    bannerDAO;\r\n    constructor() {\r\n        this.bannerDAO = new banner_1.BannerDAO();\r\n    }\r\n    list = async (body) => {\r\n        const result = await this.bannerDAO.list(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.bannerDAO.get(body);\r\n        return result;\r\n    };\r\n}\r\nexports.BannerServices = BannerServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/banner/services.ts?");

/***/ }),

/***/ "./src/components/banner/validators.ts":
/*!*********************************************!*\
  !*** ./src/components/banner/validators.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BannerListValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass BannerListValidator {\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        platform: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"platform is not numeric!\" },\r\n        },\r\n        location: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"location is not numeric!\" },\r\n        },\r\n        page_category: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category is not numeric!\" },\r\n        },\r\n        page: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page is not numeric!\" },\r\n        },\r\n    });\r\n}\r\nexports.BannerListValidator = BannerListValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/banner/validators.ts?");

/***/ }),

/***/ "./src/components/category/controller.ts":
/*!***********************************************!*\
  !*** ./src/components/category/controller.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiCategoryController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/category/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass ApiCategoryController {\r\n    static list = async (_, res, next) => {\r\n        try {\r\n            const categoryServices = new services_1.CategoryServices();\r\n            const result = await categoryServices.list();\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.ApiCategoryController = ApiCategoryController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/category/controller.ts?");

/***/ }),

/***/ "./src/components/category/services.ts":
/*!*********************************************!*\
  !*** ./src/components/category/services.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CategoryServices = void 0;\r\nconst category_1 = __webpack_require__(/*! @/db/category */ \"./src/db/category/index.ts\");\r\nclass CategoryServices {\r\n    categoryDAO;\r\n    constructor() {\r\n        this.categoryDAO = new category_1.CategoryDAO();\r\n    }\r\n    list = async () => {\r\n        const result = await this.categoryDAO.list();\r\n        return result;\r\n    };\r\n}\r\nexports.CategoryServices = CategoryServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/category/services.ts?");

/***/ }),

/***/ "./src/components/gallery/controller.ts":
/*!**********************************************!*\
  !*** ./src/components/gallery/controller.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserGalleryController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/gallery/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nclass UserGalleryController {\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const body = req.query;\r\n            const session = req.session;\r\n            try {\r\n                const token = req.headers.authorization.split(\" \")[1];\r\n                const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n                body.current_user_id = decodedData.id;\r\n            }\r\n            catch (e) { }\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.list(body);\r\n            if (result.length > 0 &&\r\n                (!session.last_fetched_gallery_date\r\n                    ? true\r\n                    : new Date(result[0].created_at).getTime() >\r\n                        session.last_fetched_gallery_date)) {\r\n                session.last_fetched_gallery_date = new Date(result[0].created_at).getTime();\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Gallery list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            try {\r\n                const token = req.headers.authorization.split(\" \")[1];\r\n                const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n                body.current_user_id = decodedData.id;\r\n            }\r\n            catch (e) { }\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.get(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Gallery\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static getBadgeCount = async (req, res, next) => {\r\n        try {\r\n            const session = req.session;\r\n            const { last_fetched_date } = req.query;\r\n            const galleryServices = new services_1.GalleryServices();\r\n            const result = await galleryServices.getBadgeCount(session, last_fetched_date);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static like = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.like(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static view = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.GalleryServices();\r\n            const result = await services.view(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.UserGalleryController = UserGalleryController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/gallery/controller.ts?");

/***/ }),

/***/ "./src/components/gallery/index.ts":
/*!*****************************************!*\
  !*** ./src/components/gallery/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserGalleryValidator = exports.UserGalleryController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/gallery/controller.ts\");\r\nObject.defineProperty(exports, \"UserGalleryController\", ({ enumerable: true, get: function () { return controller_1.UserGalleryController; } }));\r\nvar validators_1 = __webpack_require__(/*! ./validators */ \"./src/components/gallery/validators.ts\");\r\nObject.defineProperty(exports, \"UserGalleryValidator\", ({ enumerable: true, get: function () { return validators_1.UserGalleryValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/gallery/index.ts?");

/***/ }),

/***/ "./src/components/gallery/services.ts":
/*!********************************************!*\
  !*** ./src/components/gallery/services.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GalleryServices = void 0;\r\nconst gallery_1 = __webpack_require__(/*! @/db/gallery */ \"./src/db/gallery/index.ts\");\r\nclass GalleryServices {\r\n    galleryDAO;\r\n    constructor() {\r\n        this.galleryDAO = new gallery_1.GalleryDAO();\r\n    }\r\n    list = async (body) => {\r\n        const result = await this.galleryDAO.list(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.galleryDAO.get(body);\r\n        return result;\r\n    };\r\n    like = async (body) => {\r\n        const result = await this.galleryDAO.like(body);\r\n        return result;\r\n    };\r\n    getBadgeCount = async (session, lastFetchedDate) => {\r\n        const result = await this.galleryDAO.getBadgeCount(session, lastFetchedDate);\r\n        return result;\r\n    };\r\n    view = async (body) => {\r\n        const result = await this.galleryDAO.view(body);\r\n        return result;\r\n    };\r\n}\r\nexports.GalleryServices = GalleryServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/gallery/services.ts?");

/***/ }),

/***/ "./src/components/gallery/validators.ts":
/*!**********************************************!*\
  !*** ./src/components/gallery/validators.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserGalleryValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass UserGalleryValidator {\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        user_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"user_id is not numeric!\" },\r\n        },\r\n        page_category_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n        limit: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"limit is not numeric!\" },\r\n        },\r\n        offset: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"offset is not numeric!\" },\r\n        },\r\n        query: {\r\n            optional: true,\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"query does not exists!\",\r\n            },\r\n            isString: { errorMessage: \"query is not string!\" },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"query length must be minimum 1 character\",\r\n            },\r\n        },\r\n        sort: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"sort is not string!\" },\r\n        },\r\n        order: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"order is not string!\" },\r\n        },\r\n    });\r\n    static likeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static viewValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n}\r\nexports.UserGalleryValidator = UserGalleryValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/gallery/validators.ts?");

/***/ }),

/***/ "./src/components/home/controller.ts":
/*!*******************************************!*\
  !*** ./src/components/home/controller.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HomeController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/home/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass HomeController {\r\n    static getAppInfo = async (req, res, next) => {\r\n        try {\r\n            const appInfoKey = req.query.key;\r\n            const homeServices = new services_1.HomeServices();\r\n            const result = await homeServices.getAppInfo(appInfoKey);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Home\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.HomeController = HomeController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/home/controller.ts?");

/***/ }),

/***/ "./src/components/home/index.ts":
/*!**************************************!*\
  !*** ./src/components/home/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.appKeyValidator = exports.HomeController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/home/controller.ts\");\r\nObject.defineProperty(exports, \"HomeController\", ({ enumerable: true, get: function () { return controller_1.HomeController; } }));\r\nvar validators_1 = __webpack_require__(/*! ./validators */ \"./src/components/home/validators.ts\");\r\nObject.defineProperty(exports, \"appKeyValidator\", ({ enumerable: true, get: function () { return validators_1.appKeyValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/home/index.ts?");

/***/ }),

/***/ "./src/components/home/services.ts":
/*!*****************************************!*\
  !*** ./src/components/home/services.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HomeServices = void 0;\r\nconst home_1 = __webpack_require__(/*! @/db/home */ \"./src/db/home.ts\");\r\nclass HomeServices {\r\n    homeDAO;\r\n    constructor() {\r\n        this.homeDAO = new home_1.HomeDAO();\r\n    }\r\n    getAppInfo = async (appInfoKey) => {\r\n        const result = await this.homeDAO.get(appInfoKey);\r\n        return result;\r\n    };\r\n}\r\nexports.HomeServices = HomeServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/home/services.ts?");

/***/ }),

/***/ "./src/components/home/validators.ts":
/*!*******************************************!*\
  !*** ./src/components/home/validators.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.appKeyValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nconst config_1 = __importDefault(__webpack_require__(/*! @/config */ \"./src/config/index.ts\"));\r\nconst appKeys = Object.keys(config_1.default.APP).map((key) => key.toLocaleLowerCase());\r\n(0, express_validator_1.body)(\"phone\").matches(/^[+][9]{2}[3][6][1-5][0-9]{6}$/);\r\nexports.appKeyValidator = [\r\n    (0, express_validator_1.query)(\"key\")\r\n        .optional()\r\n        .isString()\r\n        .isIn(appKeys)\r\n        .withMessage(\"`name` should be string type\"),\r\n];\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/home/validators.ts?");

/***/ }),

/***/ "./src/components/location/controller.ts":
/*!***********************************************!*\
  !*** ./src/components/location/controller.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LocationController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/location/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass LocationController {\r\n    static list = async (_, res, next) => {\r\n        try {\r\n            const locationServices = new services_1.LocationServices();\r\n            const result = await locationServices.list();\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Location list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.LocationController = LocationController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/location/controller.ts?");

/***/ }),

/***/ "./src/components/location/index.ts":
/*!******************************************!*\
  !*** ./src/components/location/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LocationController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/location/controller.ts\");\r\nObject.defineProperty(exports, \"LocationController\", ({ enumerable: true, get: function () { return controller_1.LocationController; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/location/index.ts?");

/***/ }),

/***/ "./src/components/location/services.ts":
/*!*********************************************!*\
  !*** ./src/components/location/services.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LocationServices = void 0;\r\nconst location_1 = __webpack_require__(/*! @/db/location */ \"./src/db/location/index.ts\");\r\nclass LocationServices {\r\n    locationDAO;\r\n    constructor() {\r\n        this.locationDAO = new location_1.LocationDAO();\r\n    }\r\n    list = async () => {\r\n        const result = await this.locationDAO.list();\r\n        return result;\r\n    };\r\n}\r\nexports.LocationServices = LocationServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/location/services.ts?");

/***/ }),

/***/ "./src/components/page-category/controller.ts":
/*!****************************************************!*\
  !*** ./src/components/page-category/controller.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserPageCategoryController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/page-category/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass UserPageCategoryController {\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const requestBody = { id: Number(id) };\r\n            const videoCategoryServices = new services_1.UserPageCategoryServices();\r\n            const result = await videoCategoryServices.get(requestBody);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"page category data\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const videoCategoryServices = new services_1.UserPageCategoryServices();\r\n            const result = await videoCategoryServices.list(query);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"page-category list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.UserPageCategoryController = UserPageCategoryController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/page-category/controller.ts?");

/***/ }),

/***/ "./src/components/page-category/index.ts":
/*!***********************************************!*\
  !*** ./src/components/page-category/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserPageCategoryValidator = exports.UserPageCategoryController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/page-category/controller.ts\");\r\nObject.defineProperty(exports, \"UserPageCategoryController\", ({ enumerable: true, get: function () { return controller_1.UserPageCategoryController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/page-category/validator.ts\");\r\nObject.defineProperty(exports, \"UserPageCategoryValidator\", ({ enumerable: true, get: function () { return validator_1.UserPageCategoryValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/page-category/index.ts?");

/***/ }),

/***/ "./src/components/page-category/services.ts":
/*!**************************************************!*\
  !*** ./src/components/page-category/services.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserPageCategoryServices = void 0;\r\nconst page_category_1 = __webpack_require__(/*! @/db/page-category */ \"./src/db/page-category/index.ts\");\r\nclass UserPageCategoryServices {\r\n    userPageCategoryDAO;\r\n    constructor() {\r\n        this.userPageCategoryDAO = new page_category_1.UserPageCategoryDAO();\r\n    }\r\n    get = async (body) => {\r\n        const result = await this.userPageCategoryDAO.get(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.userPageCategoryDAO.list(body);\r\n        return result;\r\n    };\r\n}\r\nexports.UserPageCategoryServices = UserPageCategoryServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/page-category/services.ts?");

/***/ }),

/***/ "./src/components/page-category/validator.ts":
/*!***************************************************!*\
  !*** ./src/components/page-category/validator.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserPageCategoryValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass UserPageCategoryValidator {\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        page_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_id is not numeric!\" },\r\n        },\r\n    });\r\n}\r\nexports.UserPageCategoryValidator = UserPageCategoryValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/page-category/validator.ts?");

/***/ }),

/***/ "./src/components/page/controller.ts":
/*!*******************************************!*\
  !*** ./src/components/page/controller.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiPageController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/page/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass ApiPageController {\r\n    static list = async (_, res, next) => {\r\n        try {\r\n            const pageServices = new services_1.ApiPageServices();\r\n            const result = await pageServices.list();\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Page list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.ApiPageController = ApiPageController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/page/controller.ts?");

/***/ }),

/***/ "./src/components/page/services.ts":
/*!*****************************************!*\
  !*** ./src/components/page/services.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiPageServices = void 0;\r\nconst page_1 = __webpack_require__(/*! @/db/page */ \"./src/db/page/index.ts\");\r\nclass ApiPageServices {\r\n    pageDAO;\r\n    constructor() {\r\n        this.pageDAO = new page_1.PageDAO();\r\n    }\r\n    list = async () => {\r\n        const result = await this.pageDAO.list();\r\n        return result;\r\n    };\r\n}\r\nexports.ApiPageServices = ApiPageServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/page/services.ts?");

/***/ }),

/***/ "./src/components/payment/controller.ts":
/*!**********************************************!*\
  !*** ./src/components/payment/controller.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiPaymentController = void 0;\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/payment/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = String(process.env.JWT_SECRET);\r\nclass ApiPaymentController {\r\n    static list = async (_, res, next) => {\r\n        try {\r\n            const paymentServices = new services_1.ApiPaymentServices();\r\n            const result = await paymentServices.list();\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static status = async (req, res, next) => {\r\n        try {\r\n            const orderId = req.params.uuid;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            const userId = decodedData.id;\r\n            const paymentServices = new services_1.ApiPaymentServices();\r\n            const result = await paymentServices.status(userId, orderId);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const id = req.params.id;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            const userId = decodedData.id;\r\n            const paymentServices = new services_1.ApiPaymentServices();\r\n            const result = await paymentServices.post(id, userId);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.ApiPaymentController = ApiPaymentController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/payment/controller.ts?");

/***/ }),

/***/ "./src/components/payment/services.ts":
/*!********************************************!*\
  !*** ./src/components/payment/services.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiPaymentServices = void 0;\r\nconst payment_1 = __webpack_require__(/*! @/db/payment */ \"./src/db/payment/index.ts\");\r\nclass ApiPaymentServices {\r\n    paymentDAO;\r\n    constructor() {\r\n        this.paymentDAO = new payment_1.PaymentDAO();\r\n    }\r\n    list = async () => {\r\n        const result = await this.paymentDAO.list();\r\n        return result;\r\n    };\r\n    status = async (userId, orderId) => {\r\n        const result = await this.paymentDAO.status(userId, orderId);\r\n        return result;\r\n    };\r\n    post = async (paymentId, userId) => {\r\n        const result = await this.paymentDAO.post(paymentId, userId);\r\n        return result;\r\n    };\r\n}\r\nexports.ApiPaymentServices = ApiPaymentServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/payment/services.ts?");

/***/ }),

/***/ "./src/components/platform/controller.ts":
/*!***********************************************!*\
  !*** ./src/components/platform/controller.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiPlatformController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/platform/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nclass ApiPlatformController {\r\n    static list = async (_, res, next) => {\r\n        try {\r\n            const platformServices = new services_1.ApiPlatformServices();\r\n            const result = await platformServices.list();\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"Platform list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.ApiPlatformController = ApiPlatformController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/platform/controller.ts?");

/***/ }),

/***/ "./src/components/platform/services.ts":
/*!*********************************************!*\
  !*** ./src/components/platform/services.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiPlatformServices = void 0;\r\nconst platform_1 = __webpack_require__(/*! @/db/platform */ \"./src/db/platform/index.ts\");\r\nclass ApiPlatformServices {\r\n    platformDAO;\r\n    constructor() {\r\n        this.platformDAO = new platform_1.PlatformDAO();\r\n    }\r\n    list = async () => {\r\n        const result = await this.platformDAO.list();\r\n        return result;\r\n    };\r\n}\r\nexports.ApiPlatformServices = ApiPlatformServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/platform/services.ts?");

/***/ }),

/***/ "./src/components/post/controller.ts":
/*!*******************************************!*\
  !*** ./src/components/post/controller.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiPostController = void 0;\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/post/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nclass ApiPostController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const files = req.files;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            const userId = decodedData.id;\r\n            const postServices = new services_1.PostServices();\r\n            const images = files.reduce((acc, curValue) => {\r\n                return [...acc, curValue.path];\r\n            }, []);\r\n            const result = await postServices.post(body, images, userId);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            return res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const query = req.query;\r\n            const session = req.session;\r\n            try {\r\n                const token = req.headers.authorization.split(\" \")[1];\r\n                const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n                query.current_user_id = decodedData.id;\r\n            }\r\n            catch (e) { }\r\n            const postServices = new services_1.PostServices();\r\n            const result = await postServices.list(query);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            if (Number(query.publication_type_id) === 3 &&\r\n                result.data &&\r\n                result.data.length > 0 &&\r\n                (!session.last_fetched_selected_post_date\r\n                    ? true\r\n                    : new Date(result.data[0].created_at).getTime() >\r\n                        session.last_fetched_selected_post_date)) {\r\n                session.last_fetched_selected_post_date = new Date(result.data[0].created_at).getTime();\r\n            }\r\n            if (Number(query.publication_type_id) !== 3 &&\r\n                result.data &&\r\n                result.data.length > 0 &&\r\n                (!session.last_fetched_post_date\r\n                    ? true\r\n                    : new Date(result.data[0].created_at).getTime() >\r\n                        session.last_fetched_post_date)) {\r\n                session.last_fetched_post_date = new Date(result.data[0].created_at).getTime();\r\n            }\r\n            res.status(lib_1.OK).send((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            try {\r\n                const token = req.headers.authorization.split(\" \")[1];\r\n                const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n                body.current_user_id = decodedData.id;\r\n            }\r\n            catch (e) { }\r\n            const postServices = new services_1.PostServices();\r\n            const result = await postServices.get(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static getBadgeCount = async (req, res, next) => {\r\n        try {\r\n            const session = req.session;\r\n            const { last_fetched_date, publication_type_id } = req.query;\r\n            const postServices = new services_1.PostServices();\r\n            const result = await postServices.getBadgeCount(session, Number(last_fetched_date), Number(publication_type_id));\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static like = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.PostServices();\r\n            const result = await services.like(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static view = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.PostServices();\r\n            const result = await services.view(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static delete = async (req, res, next) => {\r\n        try {\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const adminPostServices = new services_1.PostServices();\r\n            const result = await adminPostServices.delete(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n    static update = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const files = req.files;\r\n            if (files && files.length > 0) {\r\n                body.images = files.reduce((acc, curValue) => {\r\n                    return [...acc, curValue.path];\r\n                }, []);\r\n            }\r\n            const services = new services_1.PostServices();\r\n            const result = await services.update(body);\r\n            if (!result.status) {\r\n                res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\nexports.ApiPostController = ApiPostController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/post/controller.ts?");

/***/ }),

/***/ "./src/components/post/index.ts":
/*!**************************************!*\
  !*** ./src/components/post/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.postUpload = exports.PostValidator = exports.ApiPostController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/post/controller.ts\");\r\nObject.defineProperty(exports, \"ApiPostController\", ({ enumerable: true, get: function () { return controller_1.ApiPostController; } }));\r\nvar validators_1 = __webpack_require__(/*! ./validators */ \"./src/components/post/validators.ts\");\r\nObject.defineProperty(exports, \"PostValidator\", ({ enumerable: true, get: function () { return validators_1.PostValidator; } }));\r\nvar storage_1 = __webpack_require__(/*! ./storage */ \"./src/components/post/storage.ts\");\r\nObject.defineProperty(exports, \"postUpload\", ({ enumerable: true, get: function () { return storage_1.postUpload; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/post/index.ts?");

/***/ }),

/***/ "./src/components/post/services.ts":
/*!*****************************************!*\
  !*** ./src/components/post/services.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PostServices = void 0;\r\nconst post_1 = __webpack_require__(/*! @/db/post */ \"./src/db/post/index.ts\");\r\nclass PostServices {\r\n    postDAO;\r\n    constructor() {\r\n        this.postDAO = new post_1.PostDAO();\r\n    }\r\n    post = async (body, files, userId) => {\r\n        const result = await this.postDAO.post(body, files, userId);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.postDAO.list(query);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.postDAO.get(body);\r\n        return result;\r\n    };\r\n    like = async (body) => {\r\n        const result = await this.postDAO.like(body);\r\n        return result;\r\n    };\r\n    getBadgeCount = async (session, lastFetchedDate, publicationTypeId) => {\r\n        const result = await this.postDAO.getBadgeCount(session, lastFetchedDate, publicationTypeId);\r\n        return result;\r\n    };\r\n    view = async (body) => {\r\n        const result = await this.postDAO.view(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.postDAO.delete(body);\r\n        return result;\r\n    };\r\n    update = async (body) => {\r\n        const result = await this.postDAO.update(body);\r\n        return result;\r\n    };\r\n}\r\nexports.PostServices = PostServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/post/services.ts?");

/***/ }),

/***/ "./src/components/post/storage.ts":
/*!****************************************!*\
  !*** ./src/components/post/storage.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.postUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass PostStorage {\r\n    postMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/post\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    postUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.postMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.postUpload = new PostStorage().postUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/post/storage.ts?");

/***/ }),

/***/ "./src/components/post/validators.ts":
/*!*******************************************!*\
  !*** ./src/components/post/validators.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PostValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass PostValidator {\r\n    static createValidator = (0, express_validator_1.checkSchema)({\r\n        title: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Title field doesn't exists!\",\r\n            },\r\n            isLength: {\r\n                options: {\r\n                    min: 8,\r\n                },\r\n                errorMessage: \"Title length should be logner than 8 characters!\",\r\n            },\r\n        },\r\n        description: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Description field doesn't exists!\",\r\n            },\r\n        },\r\n        phone: {\r\n            in: \"body\",\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n        price: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Price field doesn't exists!\",\r\n            },\r\n        },\r\n        category_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Category id field doesn't exists!\",\r\n            },\r\n        },\r\n        sub_category_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Sub category id doesn't exists!\",\r\n            },\r\n        },\r\n        start_date: {\r\n            in: \"body\",\r\n            isISO8601: {\r\n                errorMessage: \"Start date not a valid!\",\r\n            },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        user_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"user_id is not numeric!\" },\r\n        },\r\n        category_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n        sub_category_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n        limit: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"limit is not numeric!\" },\r\n        },\r\n        offset: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"offset is not numeric!\" },\r\n        },\r\n        query: {\r\n            optional: true,\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"query does not exists!\",\r\n            },\r\n            isString: { errorMessage: \"query is not string!\" },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"query length must be minimum 1 character\",\r\n            },\r\n        },\r\n        sort: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"sort is not string!\" },\r\n        },\r\n        order: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"order is not string!\" },\r\n        },\r\n    });\r\n    static likeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static viewValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static update = (0, express_validator_1.checkSchema)({\r\n        post_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"post_id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"post_id is not numeric!\" },\r\n        },\r\n        title: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isString: { errorMessage: \"title is not string!\" },\r\n            isLength: {\r\n                options: {\r\n                    min: 8,\r\n                },\r\n                errorMessage: \"Title length should be logner than 8 characters!\",\r\n            },\r\n        },\r\n        description: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isString: { errorMessage: \"description is not string!\" },\r\n        },\r\n        phone: {\r\n            optional: true,\r\n            in: \"body\",\r\n            matches: {\r\n                options: /^[+][9]{2}[3][6][1-5][0-9]{6}$/,\r\n                errorMessage: \"Not a valid phone number!\",\r\n            },\r\n        },\r\n        price: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"price is not numeric!\" },\r\n        },\r\n        discount: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"discount is not numeric!\" },\r\n        },\r\n        category_id: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"category_id is not numeric!\" },\r\n        },\r\n        sub_category_id: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"sub_category_id is not numeric!\" },\r\n        },\r\n        start_date: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isISO8601: {\r\n                errorMessage: \"Start date not a valid!\",\r\n            },\r\n        },\r\n        end_date: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isISO8601: {\r\n                errorMessage: \"Start date not a valid!\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.PostValidator = PostValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/post/validators.ts?");

/***/ }),

/***/ "./src/components/service-request/controller.ts":
/*!******************************************************!*\
  !*** ./src/components/service-request/controller.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiServiceRequestController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/service-request/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nclass ApiServiceRequestController {\r\n    static post = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.user_auth_id = decodedData.id;\r\n            const serviceRequestServices = new services_1.ApiServiceRequestServices();\r\n            const result = await serviceRequestServices.post(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.ApiServiceRequestController = ApiServiceRequestController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/service-request/controller.ts?");

/***/ }),

/***/ "./src/components/service-request/services.ts":
/*!****************************************************!*\
  !*** ./src/components/service-request/services.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiServiceRequestServices = void 0;\r\nconst service_request_1 = __webpack_require__(/*! @/db/service-request */ \"./src/db/service-request/index.ts\");\r\nclass ApiServiceRequestServices {\r\n    serviceRequestDAO;\r\n    constructor() {\r\n        this.serviceRequestDAO = new service_request_1.ServiceRequestDAO();\r\n    }\r\n    post = async (body) => {\r\n        const result = await this.serviceRequestDAO.post(body);\r\n        return result;\r\n    };\r\n}\r\nexports.ApiServiceRequestServices = ApiServiceRequestServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/service-request/services.ts?");

/***/ }),

/***/ "./src/components/service-request/validators.ts":
/*!******************************************************!*\
  !*** ./src/components/service-request/validators.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ApiServiceRequestValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass ApiServiceRequestValidator {\r\n    static postValidator = (0, express_validator_1.checkSchema)({\r\n        service_id: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Service id doesn't exists!\",\r\n            },\r\n        },\r\n        location_ids: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Location ids doesn't exists!\",\r\n            },\r\n            isArray: {\r\n                options: {\r\n                    min: 1,\r\n                },\r\n                errorMessage: \"Location ids is not array!\",\r\n            },\r\n            custom: {\r\n                options(value) {\r\n                    if (!value.every(Number.isInteger))\r\n                        throw new Error(\"Location ids is not numeric!\");\r\n                    return true;\r\n                },\r\n            },\r\n        },\r\n        count: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: {\r\n                errorMessage: \"Count is not numeric!\",\r\n            },\r\n        },\r\n        active_time: {\r\n            in: \"body\",\r\n            exists: {\r\n                errorMessage: \"Active time doesn't exists!\",\r\n            },\r\n            isISO8601: {\r\n                errorMessage: \"Incorrect timestamp!\",\r\n            },\r\n        },\r\n        month: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isNumeric: {\r\n                errorMessage: \"month is not numeric!\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.ApiServiceRequestValidator = ApiServiceRequestValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/service-request/validators.ts?");

/***/ }),

/***/ "./src/components/user-profile/controller.ts":
/*!***************************************************!*\
  !*** ./src/components/user-profile/controller.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserProfileController = void 0;\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/user-profile/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nclass UserProfileController {\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const body = req.query;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.list(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"user profile list\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.get(body);\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: \"user profile get\",\r\n                data: result,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static update = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.update(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static setAvatar = async (req, res, next) => {\r\n        try {\r\n            const image = req.file?.path;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            const body = {\r\n                id: decodedData.id,\r\n                image: image,\r\n            };\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.setAvatar(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static follow = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.follow(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static unFollow = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.unFollow(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static setDayStreak = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.setDayStreak(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static listDayStreakCoinReward = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.listDayStreakCoinReward(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static addUserProfileBackgroundImage = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const files = req.files;\r\n            body.images = files.reduce((acc, curValue) => {\r\n                return [...acc, curValue.path];\r\n            }, []);\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.addUserProfileBackgroundImage(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static deleteUserProfileBackgroundImage = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const services = new services_1.UserProfileServices();\r\n            const result = await services.deleteUserProfileBackgroundImage(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.UserProfileController = UserProfileController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/user-profile/controller.ts?");

/***/ }),

/***/ "./src/components/user-profile/index.ts":
/*!**********************************************!*\
  !*** ./src/components/user-profile/index.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.userProfileBGImagesUpload = exports.userProfileAvatarUpload = exports.UserProfileValidator = exports.UserProfileController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/user-profile/controller.ts\");\r\nObject.defineProperty(exports, \"UserProfileController\", ({ enumerable: true, get: function () { return controller_1.UserProfileController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/user-profile/validator.ts\");\r\nObject.defineProperty(exports, \"UserProfileValidator\", ({ enumerable: true, get: function () { return validator_1.UserProfileValidator; } }));\r\nvar storage_1 = __webpack_require__(/*! ./storage */ \"./src/components/user-profile/storage.ts\");\r\nObject.defineProperty(exports, \"userProfileAvatarUpload\", ({ enumerable: true, get: function () { return storage_1.userProfileAvatarUpload; } }));\r\nvar storage_2 = __webpack_require__(/*! ./storage */ \"./src/components/user-profile/storage.ts\");\r\nObject.defineProperty(exports, \"userProfileBGImagesUpload\", ({ enumerable: true, get: function () { return storage_2.userProfileBGImagesUpload; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/user-profile/index.ts?");

/***/ }),

/***/ "./src/components/user-profile/services.ts":
/*!*************************************************!*\
  !*** ./src/components/user-profile/services.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserProfileServices = void 0;\r\nconst user_profile_1 = __webpack_require__(/*! @/db/user-profile */ \"./src/db/user-profile/index.ts\");\r\nclass UserProfileServices {\r\n    userDAO;\r\n    constructor() {\r\n        this.userDAO = new user_profile_1.UserProfileDAO();\r\n    }\r\n    list = async (body) => {\r\n        const result = await this.userDAO.list(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.userDAO.get(body);\r\n        return result;\r\n    };\r\n    update = async (body) => {\r\n        const result = await this.userDAO.update(body);\r\n        return result;\r\n    };\r\n    setAvatar = async (body) => {\r\n        const result = await this.userDAO.setAvatar(body);\r\n        return result;\r\n    };\r\n    follow = async (body) => {\r\n        const result = await this.userDAO.follow(body);\r\n        return result;\r\n    };\r\n    unFollow = async (body) => {\r\n        const result = await this.userDAO.unFollow(body);\r\n        return result;\r\n    };\r\n    setDayStreak = async (body) => {\r\n        const result = await this.userDAO.setDayStreak(body);\r\n        return result;\r\n    };\r\n    listDayStreakCoinReward = async (body) => {\r\n        const result = await this.userDAO.listDayStreakCoinReward(body);\r\n        return result;\r\n    };\r\n    addUserProfileBackgroundImage = async (body) => {\r\n        const result = await this.userDAO.addUserProfileBackgroundImage(body);\r\n        return result;\r\n    };\r\n    deleteUserProfileBackgroundImage = async (body) => {\r\n        const result = await this.userDAO.deleteUserProfileBackgroundImage(body);\r\n        return result;\r\n    };\r\n}\r\nexports.UserProfileServices = UserProfileServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/user-profile/services.ts?");

/***/ }),

/***/ "./src/components/user-profile/storage.ts":
/*!************************************************!*\
  !*** ./src/components/user-profile/storage.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.userProfileBGImagesUpload = exports.userProfileAvatarUpload = void 0;\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\r\nclass UserProfileStorage {\r\n    avatarMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/user/avatar\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    avatarUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.avatarMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n    BGImagesMulterStorage = multer_1.default.diskStorage({\r\n        destination: (_, __, cb) => {\r\n            cb(null, \"static/user/profile/bg-images\");\r\n        },\r\n        filename: (_, file, cb) => {\r\n            const ext = file.mimetype.split(\"/\")[1];\r\n            const filename = `${crypto_1.default\r\n                .createHash(\"md5\")\r\n                .update(file.originalname + Date.now())\r\n                .digest(\"hex\")}`;\r\n            cb(null, `${filename}.${ext}`);\r\n        },\r\n    });\r\n    BGImagesUpload() {\r\n        return (0, multer_1.default)({\r\n            storage: this.BGImagesMulterStorage,\r\n            fileFilter(_, file, cb) {\r\n                if (!file.originalname.match(/\\.(png|jpg|jpeg|webp|svg)$/i)) {\r\n                    cb(new Error(\"Please upload image file\"));\r\n                }\r\n                cb(null, true);\r\n            },\r\n        });\r\n    }\r\n}\r\nexports.userProfileAvatarUpload = new UserProfileStorage().avatarUpload();\r\nexports.userProfileBGImagesUpload = new UserProfileStorage().BGImagesUpload();\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/user-profile/storage.ts?");

/***/ }),

/***/ "./src/components/user-profile/validator.ts":
/*!**************************************************!*\
  !*** ./src/components/user-profile/validator.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserProfileValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass UserProfileValidator {\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        location_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"location_id is not numeric!\" },\r\n        },\r\n        subscription_type_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"subscription_type_id is not numeric!\" },\r\n        },\r\n        subscription_type: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"subscription_type is not string!\" },\r\n        },\r\n        limit: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"limit is not numeric!\" },\r\n        },\r\n        offset: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"offset is not numeric!\" },\r\n        },\r\n    });\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static update = (0, express_validator_1.checkSchema)({\r\n        name: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isString: { errorMessage: \"name is not string!\" },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"name length must be minimum 1 character\",\r\n            },\r\n        },\r\n        about: {\r\n            optional: true,\r\n            in: \"body\",\r\n            isString: { errorMessage: \"about is not string!\" },\r\n        },\r\n    });\r\n    static followValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static unFollowValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static setDayStreak = (0, express_validator_1.checkSchema)({});\r\n    static listDayStreakCoinReward = (0, express_validator_1.checkSchema)({});\r\n    static addUserProfileBackgroundImage = (0, express_validator_1.checkSchema)({});\r\n    static deleteUserProfileBackgroundImage = (0, express_validator_1.checkSchema)({\r\n        image_ids: {\r\n            in: \"body\",\r\n            custom: {\r\n                options: (value) => {\r\n                    try {\r\n                        const arr = JSON.parse(value);\r\n                        const isNotValid = arr.reduce((acc, curValue) => {\r\n                            if (typeof curValue === \"number\") {\r\n                                return [...acc, true];\r\n                            }\r\n                            return [...acc, false];\r\n                        }, []);\r\n                        if (isNotValid.length === 0) {\r\n                            return \"\";\r\n                        }\r\n                        const checkNotPassed = isNotValid.includes(false);\r\n                        if (checkNotPassed) {\r\n                            return \"\";\r\n                        }\r\n                        return value;\r\n                    }\r\n                    catch (_) {\r\n                        return \"\";\r\n                    }\r\n                },\r\n                errorMessage: \"image_ids must be a numeric array\",\r\n            },\r\n        },\r\n    });\r\n}\r\nexports.UserProfileValidator = UserProfileValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/user-profile/validator.ts?");

/***/ }),

/***/ "./src/components/video/controller.ts":
/*!********************************************!*\
  !*** ./src/components/video/controller.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserVideoController = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst services_1 = __webpack_require__(/*! ./services */ \"./src/components/video/services.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nclass UserVideoController {\r\n    static get = async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params || \"\";\r\n            const body = { id: Number(id) };\r\n            try {\r\n                const token = req.headers.authorization.split(\" \")[1];\r\n                const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n                body.current_user_id = decodedData.id;\r\n            }\r\n            catch (e) { }\r\n            const videoServices = new services_1.UserVideoServices();\r\n            const result = await videoServices.get(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static list = async (req, res, next) => {\r\n        try {\r\n            const body = req.query;\r\n            const session = req.session;\r\n            try {\r\n                const token = req.headers.authorization.split(\" \")[1];\r\n                const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n                body.current_user_id = decodedData.id;\r\n            }\r\n            catch (e) { }\r\n            const videoServices = new services_1.UserVideoServices();\r\n            const result = await videoServices.list(body);\r\n            if (result.data &&\r\n                result.data.length > 0 &&\r\n                (!session.last_fetched_video_date\r\n                    ? true\r\n                    : new Date(result.data[0].created_at).getTime() >\r\n                        session.last_fetched_video_date)) {\r\n                session.last_fetched_video_date = new Date(result.data[0].created_at).getTime();\r\n            }\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static like = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const token = req.headers.authorization.split(\" \")[1];\r\n            const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n            body.current_user_id = decodedData.id;\r\n            const videoServices = new services_1.UserVideoServices();\r\n            const result = await videoServices.like(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static getBadgeCount = async (req, res, next) => {\r\n        try {\r\n            const session = req.session;\r\n            const { last_fetched_date } = req.query;\r\n            const videoServices = new services_1.UserVideoServices();\r\n            const result = await videoServices.getBadgeCount(session, last_fetched_date);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)(result));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)(result));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n    static view = async (req, res, next) => {\r\n        try {\r\n            const body = req.body;\r\n            const videoServices = new services_1.UserVideoServices();\r\n            const result = await videoServices.view(body);\r\n            if (!result.status) {\r\n                return res.status(lib_1.BAD_REQUEST).json((0, apiResponse_1.apiResponse)({\r\n                    status: false,\r\n                    message: result.message,\r\n                }));\r\n            }\r\n            res.status(lib_1.OK).json((0, apiResponse_1.apiResponse)({\r\n                message: result.message,\r\n                data: result.data,\r\n            }));\r\n        }\r\n        catch (error) {\r\n            return next(error);\r\n        }\r\n    };\r\n}\r\nexports.UserVideoController = UserVideoController;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/video/controller.ts?");

/***/ }),

/***/ "./src/components/video/index.ts":
/*!***************************************!*\
  !*** ./src/components/video/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserVideoValidator = exports.UserVideoController = void 0;\r\nvar controller_1 = __webpack_require__(/*! ./controller */ \"./src/components/video/controller.ts\");\r\nObject.defineProperty(exports, \"UserVideoController\", ({ enumerable: true, get: function () { return controller_1.UserVideoController; } }));\r\nvar validator_1 = __webpack_require__(/*! ./validator */ \"./src/components/video/validator.ts\");\r\nObject.defineProperty(exports, \"UserVideoValidator\", ({ enumerable: true, get: function () { return validator_1.UserVideoValidator; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/video/index.ts?");

/***/ }),

/***/ "./src/components/video/services.ts":
/*!******************************************!*\
  !*** ./src/components/video/services.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserVideoServices = void 0;\r\nconst video_1 = __webpack_require__(/*! @/db/video */ \"./src/db/video/index.ts\");\r\nclass UserVideoServices {\r\n    userVideoDAO;\r\n    constructor() {\r\n        this.userVideoDAO = new video_1.UserVideoDAO();\r\n    }\r\n    get = async (body) => {\r\n        const result = await this.userVideoDAO.get(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.userVideoDAO.list(body);\r\n        return result;\r\n    };\r\n    like = async (body) => {\r\n        const result = await this.userVideoDAO.like(body);\r\n        return result;\r\n    };\r\n    getBadgeCount = async (session, lastFetchedDate) => {\r\n        const result = await this.userVideoDAO.getBadgeCount(session, lastFetchedDate);\r\n        return result;\r\n    };\r\n    view = async (body) => {\r\n        const result = await this.userVideoDAO.view(body);\r\n        return result;\r\n    };\r\n}\r\nexports.UserVideoServices = UserVideoServices;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/video/services.ts?");

/***/ }),

/***/ "./src/components/video/validator.ts":
/*!*******************************************!*\
  !*** ./src/components/video/validator.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserVideoValidator = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nclass UserVideoValidator {\r\n    static getValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"params\",\r\n            exists: {\r\n                errorMessage: \"id does not exists!\",\r\n            },\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static listValidator = (0, express_validator_1.checkSchema)({\r\n        user_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"user_id is not numeric!\" },\r\n        },\r\n        page_category_id: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"page_category_id is not numeric!\" },\r\n        },\r\n        query: {\r\n            optional: true,\r\n            in: \"query\",\r\n            exists: {\r\n                errorMessage: \"query does not exists!\",\r\n            },\r\n            isString: { errorMessage: \"query is not string!\" },\r\n            trim: true,\r\n            isLength: {\r\n                options: { min: 1 },\r\n                errorMessage: \"query length must be minimum 1 character\",\r\n            },\r\n        },\r\n        sort: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"sort is not string!\" },\r\n        },\r\n        order: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isString: { errorMessage: \"order is not string!\" },\r\n        },\r\n        limit: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"limit is not numeric!\" },\r\n        },\r\n        offset: {\r\n            optional: true,\r\n            in: \"query\",\r\n            isNumeric: { errorMessage: \"offset is not numeric!\" },\r\n        },\r\n    });\r\n    static likeValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n    static viewValidator = (0, express_validator_1.checkSchema)({\r\n        id: {\r\n            in: \"body\",\r\n            isNumeric: { errorMessage: \"id is not numeric!\" },\r\n        },\r\n    });\r\n}\r\nexports.UserVideoValidator = UserVideoValidator;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/components/video/validator.ts?");

/***/ }),

/***/ "./src/config/db.ts":
/*!**************************!*\
  !*** ./src/config/db.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst pg_1 = __webpack_require__(/*! pg */ \"pg\");\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\ndotenv_1.default.config();\r\nconst pg = new pg_1.Pool({\r\n    user: process.env.DB_USER,\r\n    database: process.env.DB_NAME,\r\n    host: process.env.DB_HOST,\r\n    password: process.env.DB_PASSWORD,\r\n    port: Number(process.env.DB_PORT),\r\n});\r\nexports[\"default\"] = pg;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/config/db.ts?");

/***/ }),

/***/ "./src/config/index.ts":
/*!*****************************!*\
  !*** ./src/config/index.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst package_json_1 = __importDefault(__webpack_require__(/*! ../../package.json */ \"./package.json\"));\r\ndotenv_1.default.config();\r\nconst CONFIG = {\r\n    APP: {\r\n        NAME: package_json_1.default.name,\r\n        VERSION: package_json_1.default.version,\r\n        VER: `v${package_json_1.default.version[0]}`,\r\n        DESCRIPTION: package_json_1.default.description,\r\n        AUTHORS: package_json_1.default.authors,\r\n        HOST: process.env.APP_HOST,\r\n        BASE_URL: process.env.API_BASE_URL,\r\n        PORT: process.env.PORT || 8080,\r\n        ENV: \"development\",\r\n    },\r\n    SERVER: {\r\n        TIMEOUT: 60000,\r\n    },\r\n    DATABASE: {\r\n        NAME: process.env.DB_DATABASE,\r\n        HOST: process.env.DB_HOST,\r\n        PORT: process.env.DB_PORT,\r\n        USER: process.env.DB_USER,\r\n        PASSWORD: process.env.DB_PASSWORD,\r\n    },\r\n    LOG: {\r\n        PATH: process.env.LOGGING_DIR || \"logs\",\r\n        LEVEL: process.env.LOGGING_LEVEL || \"info\",\r\n        MAX_FILES: process.env.LOGGING_MAX_FILES || 5,\r\n    },\r\n    AUTH: {\r\n        SALT_ROUNDS: process.env.SALT_ROUNDS || \"11\",\r\n        ACCESS_TOKEN_EXPIRE: process.env.ACCESS_TOKEN_DURATION || \"300000\",\r\n        REFRESH_TOKEN_EXPIRE: process.env.REFRESH_TOKEN_DURATION || \"86400000\",\r\n        ACCESS_TOKEN_SALT: process.env.ACCESS_TOKEN_SALT,\r\n        REFRESH_TOKEN_SALT: process.env.REFRESH_TOKEN_SALT,\r\n    },\r\n    EXTERNAL: {\r\n        API_KEY: process.env.API_KEY,\r\n    },\r\n};\r\nexports[\"default\"] = CONFIG;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/config/index.ts?");

/***/ }),

/***/ "./src/db/admin/auth/index.ts":
/*!************************************!*\
  !*** ./src/db/admin/auth/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminAuthDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/admin/auth/utils.ts\");\r\nclass AdminAuthDAO {\r\n    login = async (body) => {\r\n        const adminData = await (0, utils_1.checkAdminPassword)(body);\r\n        if (adminData) {\r\n            const accessToken = (0, utils_1.generateAccessToken)(adminData.id);\r\n            return {\r\n                status: true,\r\n                message: \"Successfully logged in!\",\r\n                data: {\r\n                    token: accessToken,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            message: \"Check your input data!\",\r\n            status: false,\r\n        };\r\n    };\r\n}\r\nexports.AdminAuthDAO = AdminAuthDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/auth/index.ts?");

/***/ }),

/***/ "./src/db/admin/auth/utils.ts":
/*!************************************!*\
  !*** ./src/db/admin/auth/utils.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.generateAccessToken = exports.checkAdminPassword = exports.getAdminDataByEmail = void 0;\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst bcrypt_1 = __importDefault(__webpack_require__(/*! bcrypt */ \"bcrypt\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nasync function getAdminDataByEmail(email) {\r\n    const { rows: list } = await db_1.default.query(\"SELECT * FROM tb_admin_auth where email = $1\", [email]);\r\n    return list.length > 0 ? list[0] : null;\r\n}\r\nexports.getAdminDataByEmail = getAdminDataByEmail;\r\nasync function checkAdminPassword(body) {\r\n    const { email, password } = body;\r\n    const adminData = await getAdminDataByEmail(email);\r\n    if (!adminData) {\r\n        return null;\r\n    }\r\n    const isValidPassword = await bcrypt_1.default.compare(password, adminData.password);\r\n    if (!isValidPassword) {\r\n        return null;\r\n    }\r\n    return adminData;\r\n}\r\nexports.checkAdminPassword = checkAdminPassword;\r\nfunction generateAccessToken(id) {\r\n    const payload = {\r\n        id,\r\n    };\r\n    return jsonwebtoken_1.default.sign(payload, JWT_SECRET, { expiresIn: \"1d\" });\r\n}\r\nexports.generateAccessToken = generateAccessToken;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/auth/utils.ts?");

/***/ }),

/***/ "./src/db/admin/banner/index.ts":
/*!**************************************!*\
  !*** ./src/db/admin/banner/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminBannerDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/admin/banner/utils.ts\");\r\nclass AdminBannerDAO {\r\n    banner;\r\n    constructor() {\r\n        this.banner = new utils_1.AdminBannerDB();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.banner.insert(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.banner.edit(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const adminBannerData = await this.banner.get(body);\r\n        return adminBannerData;\r\n    };\r\n    list = async (body) => {\r\n        const adminBannerDataList = await this.banner.list(body);\r\n        return adminBannerDataList;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.banner.delete(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminBannerDAO = AdminBannerDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/banner/index.ts?");

/***/ }),

/***/ "./src/db/admin/banner/utils.ts":
/*!**************************************!*\
  !*** ./src/db/admin/banner/utils.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminBannerDB = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"fs-extra\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass AdminBannerDB {\r\n    async insert(body) {\r\n        try {\r\n            const { title, description, url, image, start_date, end_date, platform_id, page_category_ids, location_ids, } = body;\r\n            const { rows: banner_list } = await db_1.default.query(`INSERT INTO tb_banner (title, description, url, start_date, end_date)\n    VALUES ($1, $2, $3, $4, $5)\n    RETURNING *`, [title, description, url, start_date, end_date]);\r\n            const adminBannerData = banner_list[0];\r\n            const { rows: image_list } = await db_1.default.query(`INSERT INTO tb_image (url) VALUES ($1) RETURNING *`, [image]);\r\n            const adminImageData = image_list[0];\r\n            await db_1.default.query(`INSERT INTO tb_banner_image (banner_id, image_id) VALUES ($1, $2)`, [adminBannerData.id, adminImageData.id]);\r\n            await db_1.default.query(`INSERT INTO tb_banner_platform (banner_id, platform_id) VALUES ($1, $2)`, [adminBannerData.id, platform_id]);\r\n            page_category_ids.map(async (item) => {\r\n                await db_1.default.query(`INSERT INTO tb_banner_page_category(banner_id, page_category_id) VALUES ($1, $2);`, [adminBannerData.id, item]);\r\n            });\r\n            location_ids.map(async (item) => {\r\n                await db_1.default.query(`INSERT INTO tb_banner_location(banner_id, location_id) values($1, $2);`, [adminBannerData.id, item]);\r\n            });\r\n            return {\r\n                status: true,\r\n                message: \"Banner created successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async edit(body) {\r\n        try {\r\n            const { id, title, description, url, image, start_date, end_date, platform_id, page_category_ids, location_ids, } = body;\r\n            const { rows: bannerList } = await db_1.default.query(`SELECT * FROM tb_banner WHERE tb_banner.id = $1`, [id]);\r\n            if (bannerList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong id!\",\r\n                };\r\n            }\r\n            if (title) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_banner\n          SET\n            title = $2\n          WHERE\n            tb_banner.id = $1\n          `, [id, title]);\r\n            }\r\n            if (description) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_banner\n          SET\n            description = $2\n          WHERE\n            tb_banner.id = $1\n          `, [id, description]);\r\n            }\r\n            if (url) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_banner\n          SET\n            url = $2\n          WHERE\n            tb_banner.id = $1\n          `, [id, url]);\r\n            }\r\n            if (start_date) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_banner\n          SET\n            start_date = $2\n          WHERE\n            tb_banner.id = $1\n          `, [id, start_date]);\r\n            }\r\n            if (end_date) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_banner\n          SET\n            end_date = $2\n          WHERE\n            tb_banner.id = $1\n          `, [id, end_date]);\r\n            }\r\n            if (image) {\r\n                const { rows: oldImageList } = await db_1.default.query(`\n          WITH x AS (\n            DELETE FROM\n              tb_banner_image\n            WHERE\n              tb_banner_image.banner_id = $1\n            RETURNING *\n          )\n          DELETE FROM\n            tb_image\n          WHERE\n            tb_image.id = ANY(SELECT x.image_id FROM x)\n          RETURNING *\n          `, [id]);\r\n                oldImageList.map(async (elem) => {\r\n                    const filepath = path_1.default.resolve(elem.url);\r\n                    await fs_extra_1.default.unlink(filepath);\r\n                });\r\n                await db_1.default.query(`\n          WITH x as (\n            INSERT INTO tb_image (url) values($2) RETURNING *\n          )\n          INSERT INTO tb_banner_image(banner_id, image_id) SELECT $1, x.id FROM x\n          `, [id, image]);\r\n            }\r\n            if (page_category_ids) {\r\n                const { rows: pageCategoryList } = await db_1.default.query(\"SELECT * from tb_page_category WHERE tb_page_category.id = ANY(SELECT unnest(ARRAY[$1::int[]]))\", [page_category_ids]);\r\n                if (pageCategoryList.length != page_category_ids.length) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Page categories does not exists!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`\n          WITH x as (\n            DELETE FROM\n              tb_banner_page_category\n            WHERE\n              tb_banner_page_category.banner_id = $1\n          )\n          INSERT INTO tb_banner_page_category(banner_id, page_category_id) SELECT $1, unnest(ARRAY[$2::int[]])\n          `, [id, page_category_ids]);\r\n            }\r\n            if (location_ids) {\r\n                const { rows: locationList } = await db_1.default.query(\"SELECT * from tb_location WHERE tb_location.id = ANY(SELECT unnest(ARRAY[$1::int[]]))\", [location_ids]);\r\n                if (locationList.length != location_ids.length) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Locations does not exists!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`\n          WITH x as (\n            DELETE FROM\n              tb_banner_location\n            WHERE\n              tb_banner_location.banner_id = $1\n          )\n          INSERT INTO tb_banner_location(banner_id, location_id) SELECT $1, unnest(ARRAY[$2::int[]])\n          `, [id, location_ids]);\r\n            }\r\n            if (platform_id) {\r\n                const { rows: platformList } = await db_1.default.query(`SELECT * FROM tb_platform WHERE tb_platform.id = $1`, [platform_id]);\r\n                if (platformList.length === 0) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Wrong platform!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`WITH x AS (\n            DELETE FROM tb_banner_platform WHERE tb_banner_platform.banner_id = $1\n          )\n          INSERT INTO tb_banner_platform (banner_id, platform_id) VALUES ($1, $2)`, [id, platform_id]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Banner edited successfully\",\r\n                data: await this.get({\r\n                    id: id,\r\n                }),\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(body) {\r\n        const { id } = body;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_banner.id,\n        tb_banner.title,\n        tb_banner.description,\n        tb_banner.url as url,\n        tb_banner.start_date,\n        tb_banner.end_date,\n        tb_banner.created_at,\n        jsonb_build_object('url', tb_image.url) as image,\n        json_agg(DISTINCT (tb_platform)) as platform,\n        json_agg(DISTINCT (tb_location)) as location,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category\n      FROM\n        tb_banner\n        LEFT JOIN tb_banner_platform ON tb_banner_platform.banner_id = tb_banner.id\n        LEFT JOIN tb_platform ON tb_platform.id = tb_banner_platform.platform_id\n        LEFT JOIN tb_banner_location ON tb_banner_location.banner_id = tb_banner.id\n        LEFT JOIN tb_location ON tb_location.id = tb_banner_location.location_id\n        LEFT JOIN tb_banner_image ON tb_banner_image.banner_id = tb_banner.id\n        LEFT JOIN tb_image ON tb_image.id = tb_banner_image.image_id\n        LEFT JOIN tb_banner_page_category ON tb_banner_page_category.banner_id = tb_banner.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_banner_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n      WHERE\n        tb_banner.id = $1\n      GROUP BY\n        tb_banner.id,\n        tb_image.id\n      `, [id]);\r\n        return list.length > 0 ? list[0] : null;\r\n    }\r\n    async list(body) {\r\n        const { platform, location, page_category } = body;\r\n        const pltfmIdFilter = `${platform ? `tb_banner_platform.platform_id = $1` : `$1`}`;\r\n        const locIdFilter = `${location\r\n            ? `$2 IN (SELECT tb_banner_location.location_id FROM tb_banner_location WHERE tb_banner_location.banner_id = tb_banner.id)`\r\n            : `$2`}`;\r\n        const pageCategoryIdFilter = `${page_category\r\n            ? `$3 IN (SELECT tb_banner_page_category.page_category_id FROM tb_banner_page_category WHERE tb_banner_page_category.banner_id = tb_banner.id)`\r\n            : `$3`}`;\r\n        const finalQuery = `WHERE ${pltfmIdFilter} AND ${locIdFilter} AND ${pageCategoryIdFilter}`;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_banner.id,\n        tb_banner.title,\n        tb_banner.description,\n        tb_banner.url as url,\n        tb_banner.start_date,\n        tb_banner.end_date,\n        tb_banner.created_at,\n        jsonb_build_object('url', tb_image.url) as image,\n        json_agg(DISTINCT (tb_platform)) as platform,\n        json_agg(DISTINCT (tb_location)) as location,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category\n      FROM\n        tb_banner\n        LEFT JOIN tb_banner_platform ON tb_banner_platform.banner_id = tb_banner.id\n        LEFT JOIN tb_platform ON tb_platform.id = tb_banner_platform.platform_id\n        LEFT JOIN tb_banner_location ON tb_banner_location.banner_id = tb_banner.id\n        LEFT JOIN tb_location ON tb_location.id = tb_banner_location.location_id\n        LEFT JOIN tb_banner_image ON tb_banner_image.banner_id = tb_banner.id\n        LEFT JOIN tb_image ON tb_image.id = tb_banner_image.image_id\n        LEFT JOIN tb_banner_page_category ON tb_banner_page_category.banner_id = tb_banner.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_banner_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n      ${finalQuery}\n      GROUP BY\n        tb_banner.id,\n        tb_image.id\n      `, [platform || `TRUE`, location || `TRUE`, page_category || `TRUE`]);\r\n        return list;\r\n    }\r\n    async delete(body) {\r\n        try {\r\n            const { id } = body;\r\n            const { rows: bannerList } = await db_1.default.query(`SELECT * FROM tb_banner WHERE tb_banner.id = $1`, [id]);\r\n            if (bannerList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"banner does not exist\",\r\n                };\r\n            }\r\n            const { rows: banner_image_list } = await db_1.default.query(`DELETE FROM tb_banner_image WHERE tb_banner_image.banner_id = $1 RETURNING *`, [id]);\r\n            if (banner_image_list.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"banner image does not exist\",\r\n                };\r\n            }\r\n            const imageId = banner_image_list[0].image_id;\r\n            if (imageId) {\r\n                await db_1.default.query(`DELETE FROM tb_image WHERE tb_image.id = $1`, [\r\n                    imageId,\r\n                ]);\r\n            }\r\n            await db_1.default.query(`DELETE FROM tb_banner_platform WHERE tb_banner_platform.banner_id = $1`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_banner_page_category WHERE tb_banner_page_category.banner_id = $1`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_banner_location WHERE tb_banner_location.banner_id = $1`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_banner WHERE tb_banner.id = $1`, [id]);\r\n            return {\r\n                message: \"Banner succesfully deleted!\",\r\n                status: true,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.AdminBannerDB = AdminBannerDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/banner/utils.ts?");

/***/ }),

/***/ "./src/db/admin/category/index.ts":
/*!****************************************!*\
  !*** ./src/db/admin/category/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CategoryDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/admin/category/query.ts\");\r\nclass CategoryDAO {\r\n    category;\r\n    constructor() {\r\n        this.category = new query_1.CategoryDB();\r\n    }\r\n    post = async (body, image) => {\r\n        const result = await this.category.insert(body, image);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.category.list(query);\r\n        return result;\r\n    };\r\n    get = async (id) => {\r\n        const result = await this.category.get(id);\r\n        return result;\r\n    };\r\n    delete = async (id) => {\r\n        const result = await this.category.delete(id);\r\n        return result;\r\n    };\r\n}\r\nexports.CategoryDAO = CategoryDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/category/index.ts?");

/***/ }),

/***/ "./src/db/admin/category/query.ts":
/*!****************************************!*\
  !*** ./src/db/admin/category/query.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CategoryDB = void 0;\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nclass CategoryDB {\r\n    async insert(body, image) {\r\n        const { name } = body;\r\n        const { rows: list } = await db_1.default.query(\"SELECT id from tb_category WHERE name = $1\", [name]);\r\n        if (list.length > 0) {\r\n            return {\r\n                status: false,\r\n                message: \"Category with this name exists!\",\r\n            };\r\n        }\r\n        const { rows: categoryList } = await db_1.default.query(\"INSERT INTO tb_category (name) VALUES($1) RETURNING id\", [name]);\r\n        const categoryId = categoryList[0].id;\r\n        const { rows: postCategoryList } = await db_1.default.query(\"INSERT INTO tb_post_category (category_id) VALUES($1) RETURNING id\", [categoryId]);\r\n        const postCategoryId = postCategoryList[0].id;\r\n        const { rows: imageList } = await db_1.default.query(\"INSERT INTO tb_image(url) VALUES($1) RETURNING id\", [image]);\r\n        const imageId = imageList[0].id;\r\n        await db_1.default.query(\"INSERT INTO tb_post_category_image (post_category_id, image_id) VALUES($1, $2)\", [postCategoryId, imageId]);\r\n        return {\r\n            status: true,\r\n            message: \"Category created successfully\",\r\n        };\r\n    }\r\n    async list(query) {\r\n        const { limit, offset } = query;\r\n        const { rows: list } = await db_1.default.query(`SELECT tb_post_category.id as id, CONCAT('${process.env.STATIC_HOST}', tb_image.url) as image, tb_category.name as name\n      FROM tb_post_category\n      JOIN tb_post_category_image ON tb_post_category_image.post_category_id = tb_post_category.id\n      JOIN tb_image ON tb_post_category_image.image_id = tb_image.id\n      JOIN tb_category ON tb_post_category.category_id = tb_category.id\n      GROUP BY tb_post_category.id, tb_category.id, tb_image.id\n      ORDER BY id\n      LIMIT $1\n      OFFSET $2`, [limit || 10, offset || 0]);\r\n        return list;\r\n    }\r\n    async get(id) {\r\n        const { rows: list } = await db_1.default.query(`SELECT tb_post_category.id as id, CONCAT('${process.env.STATIC_HOST}', tb_image.url) as image, tb_category.name as name\n      FROM tb_post_category\n      JOIN tb_post_category_image ON tb_post_category_image.post_category_id = tb_post_category.id\n      JOIN tb_image ON tb_post_category_image.image_id = tb_image.id\n      JOIN tb_category ON tb_post_category.category_id = tb_category.id\n      WHERE tb_post_category.id = $1\n      GROUP BY tb_post_category.id, tb_category.id, tb_image.id\n      ORDER BY id`, [id]);\r\n        return list[0];\r\n    }\r\n    async delete(id) {\r\n        try {\r\n            const { rows: subCategoryList } = await db_1.default.query(\"SELECT id FROM tb_post_sub_category WHERE post_category_id = $1\", [id]);\r\n            if (subCategoryList.length > 0) {\r\n                return {\r\n                    message: \"Delete sub categories of category to proceed\",\r\n                    status: false,\r\n                };\r\n            }\r\n            const { rows: postCategoryList } = await db_1.default.query(\"SELECT category_id from tb_post_category WHERE id = $1\", [id]);\r\n            const { rows: postCategoryImageList } = await db_1.default.query(\"SELECT id, image_id from tb_post_category_image WHERE post_category_id = $1\", [id]);\r\n            const imageId = postCategoryImageList[0].image_id;\r\n            const categoryId = postCategoryList[0].category_id;\r\n            const postCategoryImageId = postCategoryImageList[0].id;\r\n            await db_1.default.query(\"DELETE FROM tb_post_category_image WHERE id = $1\", [\r\n                postCategoryImageId,\r\n            ]);\r\n            await db_1.default.query(\"DELETE FROM tb_post_category WHERE id = $1\", [id]);\r\n            await db_1.default.query(\"DELETE FROM tb_image WHERE id = $1\", [imageId]);\r\n            await db_1.default.query(\"DELETE FROM tb_category WHERE id = $1\", [categoryId]);\r\n            return {\r\n                message: \"Category succesfully deleted!\",\r\n                status: true,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.CategoryDB = CategoryDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/category/query.ts?");

/***/ }),

/***/ "./src/db/admin/gallery/index.ts":
/*!***************************************!*\
  !*** ./src/db/admin/gallery/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GalleryDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/admin/gallery/query.ts\");\r\nclass GalleryDAO {\r\n    gallery;\r\n    constructor() {\r\n        this.gallery = new query_1.GalleryDB();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.gallery.insert(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.gallery.edit(body);\r\n        return result;\r\n    };\r\n    addImages = async (body) => {\r\n        const result = await this.gallery.addImages(body);\r\n        return result;\r\n    };\r\n    deleteImages = async (body) => {\r\n        const result = await this.gallery.deleteImages(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.gallery.list(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.gallery.get(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.gallery.delete(body);\r\n        return result;\r\n    };\r\n    setPublicationType = async (body) => {\r\n        const result = await this.gallery.setPublicationType(body);\r\n        return result;\r\n    };\r\n    getPublicationType = async (body) => {\r\n        const result = await this.gallery.getPublicationType(body);\r\n        return result;\r\n    };\r\n}\r\nexports.GalleryDAO = GalleryDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/gallery/index.ts?");

/***/ }),

/***/ "./src/db/admin/gallery/query.ts":
/*!***************************************!*\
  !*** ./src/db/admin/gallery/query.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GalleryDB = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"fs-extra\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nclass GalleryDB {\r\n    async insert(body) {\r\n        try {\r\n            const { title, user_id, avatar_image, images, page_category_id } = body;\r\n            const { rows: list } = await db_1.default.query(`SELECT tb_page_category.id from tb_page_category WHERE tb_page_category.id = $1`, [page_category_id]);\r\n            if (list.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong page_category_id!\",\r\n                };\r\n            }\r\n            const { rows: imagesDB } = await db_1.default.query(\"INSERT INTO tb_image (url) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id\", [images]);\r\n            const imagesIds = imagesDB.map((elem) => elem.id);\r\n            const { rows: userImagesDB } = await db_1.default.query(\"INSERT INTO tb_user_image (user_auth_id, image_id) SELECT $1, unnest(ARRAY[$2::int[]]) RETURNING *\", [user_id, imagesIds]);\r\n            const userImagesDBIds = userImagesDB.map((elem) => elem.id);\r\n            const { rows: avatar_image_list } = await db_1.default.query(\"INSERT INTO tb_image (url) VALUES($1) RETURNING *\", [avatar_image]);\r\n            const avatar_image_id = avatar_image_list[0].id;\r\n            const { rows: gallery_list } = await db_1.default.query(\"INSERT INTO tb_gallery (title, user_auth_id, image_id) VALUES($1, $2, $3) RETURNING *\", [title, user_id, avatar_image_id]);\r\n            const gallery = gallery_list[0];\r\n            await db_1.default.query(\"INSERT INTO tb_gallery_page_category (gallery_id, page_category_id) VALUES($1, $2)\", [gallery.id, page_category_id]);\r\n            await db_1.default.query(\"INSERT INTO tb_gallery_user_image (gallery_id, user_image_id)  SELECT $1, unnest(ARRAY[$2::int[]])\", [gallery.id, userImagesDBIds]);\r\n            await db_1.default.query(`INSERT INTO tb_user_image_publication_type(user_image_id, publication_type_id) SELECT unnest(ARRAY[$1::int[]]), $2`, [userImagesDBIds, 1]);\r\n            return {\r\n                status: true,\r\n                message: \"Gallery created successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async edit(body) {\r\n        try {\r\n            const { gallery_id, title, user_id, avatar_image, page_category_id } = body;\r\n            const { rows: galleryList } = await db_1.default.query(`SELECT * FROM tb_gallery WHERE tb_gallery.id = $1`, [gallery_id]);\r\n            if (galleryList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong gallery_id!\",\r\n                };\r\n            }\r\n            const galleryData = galleryList[0];\r\n            if (!galleryData) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong gallery_id!\",\r\n                };\r\n            }\r\n            if (title) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_gallery\n          SET\n            title = $2\n          WHERE\n            tb_gallery.id = $1\n          `, [gallery_id, title]);\r\n            }\r\n            if (user_id) {\r\n                const { rows: list } = await db_1.default.query(`SELECT tb_user_auth.id from tb_user_auth WHERE tb_user_auth.id = $1`, [user_id]);\r\n                if (list.length === 0) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Wrong user_id!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`\n          UPDATE\n            tb_gallery\n          SET\n            user_auth_id = $2\n          WHERE\n            tb_gallery.id = $1\n          `, [gallery_id, user_id]);\r\n            }\r\n            if (avatar_image) {\r\n                const { rows: imageList } = await db_1.default.query(`INSERT INTO tb_image(url) values($1) RETURNING *`, [avatar_image]);\r\n                await db_1.default.query(`\n          UPDATE\n            tb_gallery\n          SET\n            image_id = $2\n          WHERE\n            tb_gallery.id = $1\n          `, [gallery_id, imageList[0].id]);\r\n                const { rows: oldImageList } = await db_1.default.query(\"DELETE from tb_image WHERE tb_image.id = $1 RETURNING *\", [galleryData.image_id]);\r\n                oldImageList.map(async (elem) => {\r\n                    const filepath = path_1.default.resolve(elem.url);\r\n                    await fs_extra_1.default.unlink(filepath);\r\n                });\r\n            }\r\n            if (page_category_id) {\r\n                const { rows: list } = await db_1.default.query(`SELECT tb_page_category.id from tb_page_category WHERE tb_page_category.id = $1`, [page_category_id]);\r\n                if (list.length === 0) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Wrong page_category_id!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`\n          UPDATE\n            tb_gallery_page_category\n          SET\n            page_category_id = $2\n          WHERE\n            tb_gallery_page_category.gallery_id = $1\n          `, [gallery_id, page_category_id]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Gallery edited successfully\",\r\n                data: await this.get({\r\n                    id: gallery_id,\r\n                }),\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async addImages(body) {\r\n        try {\r\n            const { gallery_id, images } = body;\r\n            const { rows: galleryList } = await db_1.default.query(`SELECT * FROM tb_gallery WHERE tb_gallery.id = $1`, [gallery_id]);\r\n            if (galleryList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong gallery_id!\",\r\n                };\r\n            }\r\n            const galleryData = galleryList[0];\r\n            const { rows: imagesDB } = await db_1.default.query(\"INSERT INTO tb_image (url) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id\", [images]);\r\n            const imagesIds = imagesDB.map((elem) => elem.id);\r\n            const { rows: userImagesDB } = await db_1.default.query(\"INSERT INTO tb_user_image (user_auth_id, image_id) SELECT $1, unnest(ARRAY[$2::int[]]) RETURNING *\", [galleryData.user_auth_id, imagesIds]);\r\n            const userImagesDBIds = userImagesDB.map((elem) => elem.id);\r\n            await db_1.default.query(\"INSERT INTO tb_gallery_user_image (gallery_id, user_image_id)  SELECT $1, unnest(ARRAY[$2::int[]])\", [gallery_id, userImagesDBIds]);\r\n            await db_1.default.query(`INSERT INTO tb_user_image_publication_type(user_image_id, publication_type_id) SELECT unnest(ARRAY[$1::int[]]), $2`, [userImagesDBIds, 1]);\r\n            return {\r\n                status: true,\r\n                message: \"Gallery images added successfully!\",\r\n                data: await this.get({\r\n                    id: gallery_id,\r\n                }),\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async deleteImages(body) {\r\n        try {\r\n            const { gallery_id, image_ids } = body;\r\n            const { rows: galleryList } = await db_1.default.query(`SELECT * FROM tb_gallery WHERE tb_gallery.id = $1`, [gallery_id]);\r\n            if (galleryList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong gallery_id!\",\r\n                };\r\n            }\r\n            const { rows: oldImageList } = await db_1.default.query(`WITH x AS (\n          DELETE FROM\n            tb_user_image\n          WHERE\n            tb_user_image.id = ANY(SELECT unnest(ARRAY[$1::int[]]))\n          RETURNING *\n        )\n        DELETE FROM\n          tb_image\n        WHERE\n          tb_image.id = ANY(SELECT x.image_id FROM x)\n        RETURNING *`, [image_ids]);\r\n            oldImageList.map(async (elem) => {\r\n                const filepath = path_1.default.resolve(elem.url);\r\n                await fs_extra_1.default.unlink(filepath);\r\n            });\r\n            return {\r\n                status: true,\r\n                message: \"Gallery images deleted successfully!\",\r\n                data: await this.get({\r\n                    id: gallery_id,\r\n                }),\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async list(body) {\r\n        const { user_id, page_category_id, publication_type_id, limit, offset, query, sort, order, } = body;\r\n        const userIdFilter = user_id ? `tb_gallery.user_auth_id = $1` : `$1`;\r\n        const pageCategoryIdFilter = page_category_id\r\n            ? `($2 IN (SELECT tb_gallery_page_category.page_category_id\n                  FROM tb_gallery_page_category\n                  WHERE tb_gallery_page_category.gallery_id = tb_gallery.id))`\r\n            : `$2`;\r\n        const sqlquery = query ? \"%\" + query + \"%\" : null;\r\n        const queryFilter = query\r\n            ? ` tb_gallery.title ILIKE $3 OR\n            tb_user_auth.name ILIKE $3 OR\n            tb_subscription_type.type ILIKE $3`\r\n            : `$3`;\r\n        const publicationTypeIdFilter = publication_type_id\r\n            ? `tb_publication_type.id = $4`\r\n            : `$4`;\r\n        let sortBy = `tb_gallery.created_at`;\r\n        switch (sort) {\r\n            case \"time\":\r\n                sortBy = `tb_gallery.created_at`;\r\n                break;\r\n            case \"like\":\r\n                sortBy = `like_count`;\r\n                break;\r\n            case \"view\":\r\n                sortBy = `view_count`;\r\n                break;\r\n        }\r\n        let orderBy = `DESC`;\r\n        switch (order) {\r\n            case \"asc\":\r\n                orderBy = `ASC`;\r\n                break;\r\n            case \"desc\":\r\n                orderBy = `DESC`;\r\n                break;\r\n        }\r\n        const finalQuery = `WHERE ${userIdFilter} AND ${pageCategoryIdFilter} AND ${queryFilter} AND ${publicationTypeIdFilter}`;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_gallery.id,\n        CAST(COUNT(tb_gallery.id) OVER() AS INTEGER) as items_full_count,\n        tb_gallery.title,\n        jsonb_build_object(\n          'id',\n          tb_user_auth.id,\n          'name',\n          tb_user_auth.name,\n          'avatar_image',\n          jsonb_build_object('url', user_auth_avatar_image_image.url),\n          'role',\n          tb_subscription_type.type\n        ) as user,\n        jsonb_build_object('url', tb_image_avatar.url) as avatar_image,\n        CAST(SUM(COUNT(tb_user_image_like.id)) OVER (PARTITION BY tb_gallery.id) as INTEGER) as like_count,\n        CAST(SUM(tb_user_image.viewed_count) as INTEGER) as view_count,\n        CAST(COUNT(tb_user_image.id) as INTEGER) as image_count,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category,\n        tb_gallery.created_at\n      FROM\n        tb_gallery\n        LEFT JOIN tb_gallery_user_image ON tb_gallery_user_image.gallery_id = tb_gallery.id\n        LEFT JOIN tb_user_image ON tb_user_image.id = tb_gallery_user_image.user_image_id\n        LEFT JOIN tb_user_image_like ON tb_user_image_like.user_image_id = tb_user_image.id\n        \n        LEFT JOIN tb_user_image_publication_type ON tb_user_image_publication_type.user_image_id = tb_user_image.id\n        LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_image_publication_type.publication_type_id\n        \n        LEFT JOIN tb_image as tb_image_avatar ON tb_image_avatar.id = tb_gallery.image_id\n        LEFT JOIN tb_image ON tb_image.id = tb_user_image.image_id\n        LEFT JOIN tb_gallery_page_category ON tb_gallery_page_category.gallery_id = tb_gallery.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_gallery_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_gallery.user_auth_id\n        LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n        LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      ${finalQuery}\n      GROUP BY\n        tb_gallery.id,\n        tb_image_avatar.url,\n        tb_user_auth.id,\n        user_auth_avatar_image_image.url,\n        tb_subscription_type.type\n      ORDER BY\n        ${sortBy} ${orderBy}\n      LIMIT $5\n      OFFSET $6\n      `, [\r\n            user_id || `TRUE`,\r\n            page_category_id || `TRUE`,\r\n            sqlquery || `TRUE`,\r\n            publication_type_id || `TRUE`,\r\n            limit || 10,\r\n            offset || 0,\r\n        ]);\r\n        return list;\r\n    }\r\n    async get(body) {\r\n        const { id } = body;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_gallery.id,\n        tb_gallery.title,\n        jsonb_build_object(\n          'id', tb_user_auth.id,\n          'name', tb_user_auth.name,\n          'avatar_image', \n          jsonb_build_object('url', user_auth_avatar_image_image.url),\n          'role', tb_subscription_type.type\n        ) as user,\n        jsonb_build_object('url', tb_image_avatar.url) as avatar_image,\n        json_agg(\n          jsonb_build_object(\n            'id',\n            tb_user_image.id,\n            'view_count',\n            tb_user_image.viewed_count,\n            'user_id',\n            tb_user_image.user_auth_id,\n            'url',\n            tb_image.url,\n            'created_at',\n            tb_user_image.created_at,\n            'publication_type',\n            (\n              SELECT\n                to_json(tb_publication_type.*)\n              FROM\n                tb_publication_type\n              WHERE\n                tb_publication_type.id = tb_user_image_publication_type.publication_type_id\n              LIMIT 1\n            ),\n            'like_count',\n            CAST(\n              COALESCE(\n                (\n                  SELECT\n                    count(tb_user_image_like.id)\n                  FROM\n                    tb_user_image_like\n                  WHERE\n                    tb_user_image_like.user_image_id = tb_user_image.id\n                ),\n                '0'\n              ) as INTEGER\n            )\n          )\n        ) as images,\n        json_agg(DISTINCT jsonb_build_object(\n          'id',\n          tb_page_category.id,\n          'page',\n          tb_page,\n          'category',\n          tb_category,\n          'image',\n          jsonb_build_object('url', page_category_tb_image.url)\n        )) as page_category,\n        tb_gallery.created_at\n      FROM\n        tb_gallery\n        LEFT JOIN tb_gallery_user_image ON tb_gallery_user_image.gallery_id = tb_gallery.id\n        LEFT JOIN tb_user_image ON tb_user_image.id = tb_gallery_user_image.user_image_id\n        LEFT JOIN tb_user_image_publication_type ON tb_user_image_publication_type.user_image_id = tb_user_image.id\n        LEFT JOIN tb_image as tb_image_avatar ON tb_image_avatar.id = tb_gallery.image_id\n        LEFT JOIN tb_image ON tb_image.id = tb_user_image.image_id\n        LEFT JOIN tb_gallery_page_category ON tb_gallery_page_category.gallery_id = tb_gallery.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_gallery_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n\n        LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_gallery.user_auth_id\n        LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n        LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      WHERE\n        tb_gallery.id = $1\n      GROUP BY\n        tb_gallery.id,\n        tb_image_avatar.url,\n        tb_user_auth.id,\n        user_auth_avatar_image_image.url,\n        tb_subscription_type.type\n      ORDER BY\n        tb_gallery.id\n      `, [id]);\r\n        return list[0];\r\n    }\r\n    async delete(body) {\r\n        try {\r\n            const { id } = body;\r\n            const { rows: galleryList } = await db_1.default.query(`SELECT tb_gallery.* from tb_gallery WHERE tb_gallery.id = $1`, [id]);\r\n            if (galleryList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong gallery id!\",\r\n                };\r\n            }\r\n            const gallery = galleryList[0];\r\n            await db_1.default.query(`DELETE FROM tb_gallery_page_category WHERE tb_gallery_page_category.gallery_id = $1`, [gallery.id]);\r\n            await db_1.default.query(`\n        WITH\n          deleted_user_image as (\n            DELETE FROM\n              tb_gallery_user_image\n            WHERE\n              tb_gallery_user_image.gallery_id = $1 RETURNING tb_gallery_user_image.user_image_id\n          ),\n          deleted_user_image_pub_type as (\n            DELETE FROM\n              tb_user_image_publication_type\n            WHERE\n              tb_user_image_publication_type.user_image_id = ANY(\n                SELECT\n                  deleted_user_image.user_image_id\n                FROM\n                  deleted_user_image\n              ) RETURNING *\n          ),\n          deleted_image as (\n            DELETE FROM\n              tb_user_image\n            WHERE\n              tb_user_image.id = ANY(\n                SELECT\n                  deleted_user_image.user_image_id\n                FROM\n                  deleted_user_image\n              ) RETURNING tb_user_image.image_id\n          )\n        DELETE FROM\n          tb_image\n        WHERE\n          tb_image.id = ANY(\n            SELECT\n              deleted_image.image_id\n            FROM\n              deleted_image\n          )\n        `, [gallery.id]);\r\n            await db_1.default.query(`DELETE FROM tb_image WHERE tb_image.id = $1`, [\r\n                gallery.image_id,\r\n            ]);\r\n            await db_1.default.query(`DELETE FROM tb_gallery WHERE tb_gallery.id = $1`, [\r\n                gallery.id,\r\n            ]);\r\n            return {\r\n                message: \"Gallery succesfully deleted!\",\r\n                status: true,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async setPublicationType(query) {\r\n        try {\r\n            const { id, publication_type_id } = query;\r\n            const { rows: tb_user_image } = await db_1.default.query(`SELECT * FROM tb_user_image WHERE tb_user_image.id = $1`, [id]);\r\n            const { rows: tb_publication_type } = await db_1.default.query(`SELECT * FROM tb_publication_type WHERE tb_publication_type.id = $1`, [publication_type_id]);\r\n            if (tb_user_image.length === 0 || tb_publication_type.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Gallery photo or publication type does not exist\",\r\n                };\r\n            }\r\n            const { rows: current_tb_publication_type } = await db_1.default.query(`\n        SELECT * FROM tb_user_image_publication_type\n        WHERE\n          tb_user_image_publication_type.user_image_id = $1\n        `, [id]);\r\n            if (current_tb_publication_type.length > 0) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_image_publication_type\n          SET\n            publication_type_id = $1\n          WHERE\n            tb_user_image_publication_type.user_image_id = $2\n          `, [publication_type_id, id]);\r\n            }\r\n            else {\r\n                await db_1.default.query(`\n          INSERT INTO tb_user_image_publication_type (user_image_id, publication_type_id) VALUES($1, $2)\n          `, [id, publication_type_id]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Gellery photo publication type was set successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async getPublicationType(query) {\r\n        const { id } = query;\r\n        const { rows: tb_publication_type } = await db_1.default.query(`SELECT tb_publication_type.*\n      FROM\n        tb_user_image_publication_type\n        LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_image_publication_type.publication_type_id\n      WHERE\n        tb_user_image_publication_type.user_image_id = $1`, [id]);\r\n        return tb_publication_type.length > 0 ? tb_publication_type[0] : null;\r\n    }\r\n}\r\nexports.GalleryDB = GalleryDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/gallery/query.ts?");

/***/ }),

/***/ "./src/db/admin/page-category/index.ts":
/*!*********************************************!*\
  !*** ./src/db/admin/page-category/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPageCategoryDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/admin/page-category/utils.ts\");\r\nclass AdminPageCategoryDAO {\r\n    pageCategory;\r\n    constructor() {\r\n        this.pageCategory = new utils_1.PageCategoryDB();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.pageCategory.insert(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.pageCategory.edit(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.pageCategory.get(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.pageCategory.delete(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.pageCategory.list(body);\r\n        return result;\r\n    };\r\n    listPage = async (body) => {\r\n        const result = await this.pageCategory.listPage(body);\r\n        return result;\r\n    };\r\n    listCategory = async (body) => {\r\n        const result = await this.pageCategory.listCategory(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminPageCategoryDAO = AdminPageCategoryDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/page-category/index.ts?");

/***/ }),

/***/ "./src/db/admin/page-category/utils.ts":
/*!*********************************************!*\
  !*** ./src/db/admin/page-category/utils.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PageCategoryDB = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"fs-extra\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PageCategoryDB {\r\n    async insert(body) {\r\n        try {\r\n            const { page_id, category_name, image } = body;\r\n            const { rows: list } = await db_1.default.query(\"SELECT * from tb_category WHERE name = $1\", [category_name]);\r\n            if (list.length === 0) {\r\n                const { rows: list1 } = await db_1.default.query(`INSERT INTO tb_category(name) values($1) RETURNING *`, [category_name]);\r\n                list[0] = list1[0];\r\n            }\r\n            const category_id = list[0].id;\r\n            if (image) {\r\n                const { rows: image_list } = await db_1.default.query(`INSERT INTO tb_image(url) values($1) RETURNING *`, [image]);\r\n                const { rows: page_category_list } = await db_1.default.query(`INSERT INTO tb_page_category(page_id, category_id, image_id) values($1, $2, $3) RETURNING *`, [page_id, category_id, image_list[0].id]);\r\n                return {\r\n                    status: true,\r\n                    message: \"Page category was created successfully\",\r\n                    data: page_category_list[0],\r\n                };\r\n            }\r\n            const { rows: page_category_list } = await db_1.default.query(`INSERT INTO tb_page_category(page_id, category_id) values($1, $2) RETURNING *`, [page_id, category_id]);\r\n            return {\r\n                status: true,\r\n                message: \"Page category was created successfully\",\r\n                data: page_category_list[0],\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async edit(body) {\r\n        try {\r\n            const { page_category_id, page_id, category_name, image } = body;\r\n            const { rows: pageCategoryList } = await db_1.default.query(\"SELECT * from tb_page_category WHERE id = $1\", [page_category_id]);\r\n            if (pageCategoryList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Page category does not exists!\",\r\n                };\r\n            }\r\n            if (page_id) {\r\n                const { rows: pageList } = await db_1.default.query(\"SELECT * from tb_page WHERE id = $1\", [page_id]);\r\n                if (pageList.length === 0) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Page does not exists!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`\n          UPDATE\n            tb_page_category\n          SET\n            page_id = $2\n          WHERE\n            tb_page_category.id = $1\n          `, [page_category_id, page_id]);\r\n            }\r\n            if (category_name) {\r\n                const { rows: categoryList } = await db_1.default.query(\"SELECT * from tb_category WHERE name = $1\", [category_name]);\r\n                if (categoryList.length === 0) {\r\n                    const { rows: list1 } = await db_1.default.query(`INSERT INTO tb_category(name) values($1) RETURNING *`, [category_name]);\r\n                    categoryList[0] = list1[0];\r\n                }\r\n                const category_id = categoryList[0].id;\r\n                await db_1.default.query(`\n          UPDATE\n            tb_page_category\n          SET\n            category_id = $2\n          WHERE\n            tb_page_category.id = $1\n          `, [page_category_id, category_id]);\r\n            }\r\n            if (image) {\r\n                const { rows: image_list } = await db_1.default.query(`INSERT INTO tb_image(url) values($1) RETURNING *`, [image]);\r\n                await db_1.default.query(`\n          UPDATE\n            tb_page_category\n          SET\n            image_id = $2\n          WHERE\n            tb_page_category.id = $1\n          `, [page_category_id, image_list[0].id]);\r\n                const { rows: oldImageList } = await db_1.default.query(\"DELETE from tb_image WHERE tb_image.id = $1 RETURNING *\", [pageCategoryList[0].image_id]);\r\n                oldImageList.map(async (elem) => {\r\n                    const filepath = path_1.default.resolve(elem.url);\r\n                    await fs_extra_1.default.unlink(filepath);\r\n                });\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Page category was edited successfully\",\r\n                data: await this.get({\r\n                    id: page_category_id,\r\n                }),\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(query) {\r\n        const { id } = query;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_page_category.id as id,\n        to_json(tb_page) as page,\n        to_json(tb_category) as category,\n        jsonb_build_object('url', tb_image.url) as image,\n        jsonb_build_object(\n          'video_count', CAST(COALESCE(tb_page_category_statistic.video_count, '0') AS INTEGER),\n          'gallery_count', CAST(COALESCE(tb_page_category_statistic.gallery_count, '0') AS INTEGER)\n        ) as statistics\n      FROM\n        tb_page_category\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image ON tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_page_category_statistic ON tb_page_category_statistic.page_category_id = tb_page_category.id\n      WHERE\n        tb_page_category.id = $1\n      `, [id]);\r\n        return list[0];\r\n    }\r\n    async delete(query) {\r\n        try {\r\n            const { id } = query;\r\n            const { rows: list } = await db_1.default.query(`DELETE FROM tb_page_category WHERE tb_page_category.id = $1 RETURNING *`, [id]);\r\n            return {\r\n                status: true,\r\n                message: \"Video category deleted successfully\",\r\n                data: list[0],\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async list(query) {\r\n        const { page_id } = query;\r\n        const pageIdFilter = page_id ? `tb_page_category.page_id = $1` : `$1`;\r\n        const finalQuery = `WHERE ${pageIdFilter}`;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_page_category.id as id,\n        to_json(tb_page) as page,\n        to_json(tb_category) as category,\n        jsonb_build_object('url', tb_image.url) as image,\n        jsonb_build_object(\n          'video_count', CAST(COALESCE(tb_page_category_statistic.video_count, '0') AS INTEGER),\n          'gallery_count', CAST(COALESCE(tb_page_category_statistic.gallery_count, '0') AS INTEGER)\n        ) as statistics\n      FROM\n        tb_page_category\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image ON tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_page_category_statistic ON tb_page_category_statistic.page_category_id = tb_page_category.id\n      ${finalQuery}\n      `, [page_id || `TRUE`]);\r\n        return list;\r\n    }\r\n    async listPage(query) {\r\n        const {} = query;\r\n        const { rows: list } = await db_1.default.query(`SELECT * FROM tb_page`);\r\n        return list;\r\n    }\r\n    async listCategory(query) {\r\n        const {} = query;\r\n        const { rows: list } = await db_1.default.query(`SELECT * FROM tb_category`);\r\n        return list;\r\n    }\r\n}\r\nexports.PageCategoryDB = PageCategoryDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/page-category/utils.ts?");

/***/ }),

/***/ "./src/db/admin/payment/index.ts":
/*!***************************************!*\
  !*** ./src/db/admin/payment/index.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPaymentDAO = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass AdminPaymentDAO {\r\n    post = async (body, image) => {\r\n        try {\r\n            const { amount, price } = body;\r\n            const { rows: paymentList } = await db_1.default.query(\"INSERT INTO tb_payment(amount, price) VALUES($1, $2) RETURNING id\", [amount, price]);\r\n            const { rows: imageList } = await db_1.default.query(\"INSERT INTO tb_image(url) VALUES($1) RETURNING id\", [image]);\r\n            const imageId = imageList[0].id;\r\n            const paymentId = paymentList[0].id;\r\n            await db_1.default.query(\"INSERT INTO tb_payment_image(image_id, payment_id) VALUES($1, $2)\", [imageId, paymentId]);\r\n            return {\r\n                status: true,\r\n                message: \"Payment created successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n    list = async () => {\r\n        const { rows: list } = await db_1.default.query(`SELECT tb_payment.id as id, tb_image.url as image, tb_payment.amount as amount, tb_payment.price as price\n      FROM tb_payment\n      JOIN tb_payment_image ON tb_payment_image.payment_id = tb_payment.id\n      JOIN tb_image ON tb_image.id = tb_payment_image.image_id`);\r\n        return {\r\n            status: true,\r\n            message: \"Payment list\",\r\n            data: list,\r\n        };\r\n    };\r\n    userList = async () => {\r\n        try {\r\n            const { rows: list } = await db_1.default.query(`SELECT\n        tb_user_payment.id as id,\n        tb_user_payment.order_id as order_id,\n        tb_user_payment.status as status,\n        tb_payment.amount as amount,\n        to_json(json_build_object('id', tb_user_auth.id, 'name', tb_user_auth.name)) user\n        FROM tb_user_payment\n        JOIN tb_payment ON tb_payment.id = tb_user_payment.payment_id\n        JOIN tb_user_auth ON tb_user_auth.id = tb_user_payment.user_auth_id`);\r\n            return {\r\n                status: true,\r\n                message: \"User payment list\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n    delete = async (id) => {\r\n        const { rows: paymentImageList } = await db_1.default.query(\"DELETE FROM tb_payment_image WHERE tb_payment_image.payment_id = $1 RETURNING image_id\", [id]);\r\n        const paymentImageId = paymentImageList[0].image_id;\r\n        await db_1.default.query(\"DELETE FROM tb_image WHERE id = $1\", [paymentImageId]);\r\n        await db_1.default.query(\"DELETE FROM tb_payment WHERE id = $1\", [id]);\r\n        return {\r\n            status: true,\r\n            message: \"Payment deleted successfully!\",\r\n        };\r\n    };\r\n}\r\nexports.AdminPaymentDAO = AdminPaymentDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/payment/index.ts?");

/***/ }),

/***/ "./src/db/admin/post/index.ts":
/*!************************************!*\
  !*** ./src/db/admin/post/index.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PostDAO = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PostDAO {\r\n    async post(body, images) {\r\n        try {\r\n            const { user_id, title, description, price, phone, discount, tags, category_id, sub_category_id, start_date, end_date, } = body;\r\n            const { rows: postList } = await db_1.default.query(`INSERT INTO\n        tb_post(user_auth_id, title, description, price, phone, discount, post_category_id, post_sub_category_id, start_date, end_date, approved, waiting)\n        VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n        RETURNING id`, [\r\n                user_id,\r\n                title,\r\n                description,\r\n                price,\r\n                phone,\r\n                discount,\r\n                category_id,\r\n                sub_category_id,\r\n                start_date,\r\n                end_date,\r\n                true,\r\n                false,\r\n            ]);\r\n            const postId = postList[0].id;\r\n            if (tags.length > 0) {\r\n                const { rows: tagList } = await db_1.default.query(`INSERT INTO tb_tag(name) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id`, [JSON.parse(tags)]);\r\n                const tagIds = tagList.reduce((acc, curValue) => {\r\n                    return [...acc, curValue.id];\r\n                }, []);\r\n                await db_1.default.query(`INSERT INTO tb_post_tag(post_id, tag_id) SELECT $1, unnest(ARRAY[$2::int[]])`, [postId, tagIds]);\r\n            }\r\n            const { rows: imageList } = await db_1.default.query(\"INSERT INTO tb_image(url) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id\", [images]);\r\n            const imageIds = imageList.reduce((acc, curValue) => {\r\n                return [...acc, curValue.id];\r\n            }, []);\r\n            await db_1.default.query(\"INSERT INTO tb_post_image(post_id, image_id) SELECT $1, unnest($2::int[])\", [postId, imageIds]);\r\n            await db_1.default.query(`INSERT INTO tb_post_publication_type(post_id, publication_type_id) values($1, $2)`, [postId, 1]);\r\n            return {\r\n                status: true,\r\n                message: \"Post created successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async list(body) {\r\n        try {\r\n            const { category_id, sub_category_id, publication_type_id, title, description, limit, offset, query, sort, order, } = body;\r\n            const categoryFilter = category_id\r\n                ? \"tb_post.post_category_id = $1\"\r\n                : \"$1\";\r\n            const subCategoryFilter = category_id\r\n                ? \"tb_post.post_sub_category_id = $2\"\r\n                : \"$2\";\r\n            const titleFilter = title ? \"tb_post.title ILIKE $3\" : \"$3\";\r\n            const descriptionFilter = description\r\n                ? \"tb_post.description ILIKE $4\"\r\n                : \"$4\";\r\n            const sqlquery = query ? \"%\" + query + \"%\" : null;\r\n            const queryFilter = query\r\n                ? `(tb_post.title ILIKE $5 OR\n            tb_post.description ILIKE $5 OR\n            tb_user_auth.name ILIKE $5)`\r\n                : `$5`;\r\n            const publicationTypeIdFilter = publication_type_id\r\n                ? `tb_publication_type.id = $6`\r\n                : `$6`;\r\n            let sortBy = `tb_post.created_at`;\r\n            switch (sort) {\r\n                case \"time\":\r\n                    sortBy = `tb_post.created_at`;\r\n                    break;\r\n                case \"like\":\r\n                    sortBy = `likes_count`;\r\n                    break;\r\n                case \"view\":\r\n                    sortBy = `viewed_count`;\r\n                    break;\r\n            }\r\n            let orderBy = `DESC`;\r\n            switch (order) {\r\n                case \"asc\":\r\n                    orderBy = `ASC`;\r\n                    break;\r\n                case \"desc\":\r\n                    orderBy = `DESC`;\r\n                    break;\r\n            }\r\n            const filterQuery = `WHERE ${categoryFilter} AND ${subCategoryFilter} AND ${titleFilter} AND ${descriptionFilter} AND ${queryFilter} AND ${publicationTypeIdFilter}`;\r\n            const { rows: list } = await db_1.default.query(`\n        SELECT\n          tb_post.id as id,\n          CAST(COUNT(tb_post.id) OVER() AS INTEGER) as items_full_count,\n          tb_post.title as title,\n          tb_post.description as description,\n          tb_image.url as image,\n          tb_post.viewed_count as viewed_count,\n          tb_post.price as price,\n          tb_post.discount as discount,\n          tb_post.approved as approved,\n          tb_post.waiting as waiting,\n          tb_post.created_at as created_at,\n          CAST(\n            COALESCE(\n              (\n                SELECT\n                  count(tb_post_like.id)\n                FROM\n                  tb_post_like\n                WHERE\n                  tb_post_like.post_id = tb_post.id\n              ),\n              '0'\n            ) as INTEGER\n          ) as likes_count,\n          to_json(tb_publication_type) as publication_type\n        FROM\n          tb_post\n          LEFT JOIN tb_post_publication_type ON tb_post_publication_type.post_id = tb_post.id\n          LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_post_publication_type.publication_type_id\n          LEFT JOIN LATERAL\n          (\n          SELECT  post_id, image_id\n          FROM    tb_post_image\n          WHERE   tb_post_image.post_id = tb_post.id\n          limit 1\n          ) tb_post_image ON true\n          JOIN tb_image ON tb_image.id = tb_post_image.image_id\n        ${filterQuery}\n        GROUP BY\n          tb_post.id,\n          tb_image.url,\n          tb_publication_type\n        ORDER BY\n          ${sortBy} ${orderBy}\n        LIMIT $7\n        OFFSET $8\n        `, [\r\n                category_id || \"TRUE\",\r\n                sub_category_id || \"TRUE\",\r\n                title ? `%${title}%` : \"TRUE\",\r\n                description ? `%${description}%` : \"TRUE\",\r\n                sqlquery || `TRUE`,\r\n                publication_type_id || `TRUE`,\r\n                limit || 10,\r\n                offset || 0,\r\n            ]);\r\n            return {\r\n                status: true,\r\n                message: \"Post list\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(id) {\r\n        try {\r\n            const { rows: list } = await db_1.default.query(`\n        SELECT\n          tb_post.id as id,\n          tb_post.title as title,\n          tb_post.description as description,\n          json_agg(DISTINCT tb_image.*) images,\n          json_agg(DISTINCT tb_tag.*) tags,\n          to_json(\n            json_build_object(\n              'id',\n              tb_user_auth.id,\n              'name',\n              tb_user_auth.name,\n              'image',\n              to_json(tb_user_image.*)\n            )\n          ) user,\n          tb_post.phone as phone,\n          tb_post.approved as approved,\n          tb_post.viewed_count as viewed_count,\n          tb_post.price as price,\n          tb_post.discount as discount,\n          tb_post.created_at as created_at,\n          tb_post.start_date as start_date,\n          tb_post.end_date as end_date,\n          CAST(\n            COALESCE(\n              (\n                SELECT\n                  count(tb_post_like.id)\n                FROM\n                  tb_post_like\n                WHERE\n                  tb_post_like.post_id = tb_post.id\n              ),\n              '0'\n            ) as INTEGER\n          ) as likes_count,\n          to_json(tb_publication_type) as publication_type\n        FROM\n          tb_post\n          LEFT JOIN tb_post_publication_type ON tb_post_publication_type.post_id = tb_post.id\n          LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_post_publication_type.publication_type_id\n        \n          LEFT JOIN LATERAL (\n            SELECT\n              id,\n              tag_id\n            FROM\n              tb_post_tag\n            WHERE\n              tb_post_tag.post_id = tb_post.id\n          ) tb_post_tag ON true\n          LEFT JOIN LATERAL (\n            SELECT\n              id,\n              name\n            FROM\n              tb_tag\n            WHERE\n              tb_post_tag.tag_id = tb_tag.id\n          ) tb_tag ON true\n          LEFT JOIN LATERAL (\n            SELECT\n              id,\n              image_id\n            FROM\n              tb_post_image\n            WHERE\n              tb_post_image.post_id = tb_post.id\n          ) tb_post_image ON true\n          LEFT JOIN LATERAL (\n            SELECT\n              id,\n              url\n            FROM\n              tb_image\n            WHERE\n              tb_post_image.image_id = tb_image.id\n          ) tb_image ON true\n          JOIN tb_user_auth ON tb_user_auth.id = tb_post.user_auth_id\n          JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_post.user_auth_id\n          LEFT JOIN LATERAL (\n            SELECT\n              id,\n              url\n            FROM\n              tb_image\n            WHERE\n              tb_user_auth_avatar_image.image_id = tb_image.id\n          ) tb_user_image ON true\n        WHERE\n          tb_post.id = $1\n        GROUP BY\n          tb_post.id,\n          tb_user_auth.id,\n          tb_user_image.*,\n          tb_publication_type\n        ORDER BY\n          created_at DESC\n        `, [id]);\r\n            if (list.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Post doesn't exists!\",\r\n                };\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Post\",\r\n                data: list[0],\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async approve(id, body) {\r\n        try {\r\n            const { approve } = body;\r\n            await db_1.default.query(`UPDATE tb_post SET approved = $1, waiting = false WHERE id = $2`, [approve, id]);\r\n            return {\r\n                status: true,\r\n                message: \"Post approved\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async setPublicationType(query) {\r\n        try {\r\n            const { id, publication_type_id } = query;\r\n            const { rows: tb_post } = await db_1.default.query(`SELECT * FROM tb_post WHERE tb_post.id = $1`, [id]);\r\n            const { rows: tb_publication_type } = await db_1.default.query(`SELECT * FROM tb_publication_type WHERE tb_publication_type.id = $1`, [publication_type_id]);\r\n            if (tb_post.length === 0 || tb_publication_type.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Post or publication type does not exist\",\r\n                };\r\n            }\r\n            const { rows: current_tb_publication_type } = await db_1.default.query(`\n        SELECT * FROM tb_post_publication_type\n        WHERE\n          tb_post_publication_type.post_id = $1\n        `, [id]);\r\n            if (current_tb_publication_type.length > 0) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_post_publication_type\n          SET\n            publication_type_id = $1\n          WHERE\n            tb_post_publication_type.post_id = $2\n          `, [publication_type_id, id]);\r\n            }\r\n            else {\r\n                await db_1.default.query(`\n          INSERT INTO tb_post_publication_type (post_id, publication_type_id) VALUES($1, $2)\n          `, [id, publication_type_id]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Post publication type was set successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async getPublicationType(query) {\r\n        const { id } = query;\r\n        const { rows: tb_publication_type } = await db_1.default.query(`SELECT tb_publication_type.*\n      FROM\n        tb_post_publication_type\n        LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_post_publication_type.publication_type_id\n      WHERE\n        tb_post_publication_type.post_id = $1`, [id]);\r\n        return tb_publication_type.length > 0 ? tb_publication_type[0] : null;\r\n    }\r\n    async delete(body) {\r\n        try {\r\n            const { id } = body;\r\n            const { rows: imageList } = await db_1.default.query(`\n        WITH\n          deleted_post_tag as (DELETE FROM tb_post_tag WHERE tb_post_tag.post_id = $1 RETURNING *),\n          deleted_tag as (DELETE FROM tb_tag WHERE tb_tag.id = ANY(SELECT deleted_post_tag.tag_id FROM deleted_post_tag) RETURNING *),\n          deleted_post_publication_type as (DELETE FROM tb_post_publication_type WHERE tb_post_publication_type.post_id = $1 RETURNING *),\n          deleted_post_image as (DELETE FROM tb_post_image WHERE tb_post_image.post_id = $1 RETURNING *),\n          deleted_post_like as (DELETE FROM tb_post_like WHERE tb_post_like.post_id = $1 RETURNING *),\n          deleted_post as (DELETE FROM tb_post WHERE tb_post.id = $1 RETURNING *)\n          DELETE FROM tb_image WHERE tb_image.id = ANY(SELECT deleted_post_image.image_id FROM deleted_post_image) RETURNING *\n        `, [id]);\r\n            imageList.map(async (elem) => {\r\n                const filepath = path_1.default.resolve(elem.url);\r\n                await promises_1.default.unlink(filepath);\r\n            });\r\n            return {\r\n                status: true,\r\n                message: \"Post deleted successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async update(body) {\r\n        try {\r\n            const { post_id, title, description, phone, price, discount, tags, category_id, sub_category_id, start_date, end_date, images, } = body;\r\n            const { rows: checkPostList } = await db_1.default.query(`SELECT\n          tb_post.id\n        FROM\n          tb_post\n        WHERE\n          tb_post.id = $1`, [post_id]);\r\n            if (checkPostList.length == 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Post not found!\",\r\n                };\r\n            }\r\n            if (title) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            title = $2 \n          WHERE tb_post.id = $1`, [post_id, title]);\r\n            }\r\n            if (description) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            description = $2 \n          WHERE tb_post.id = $1`, [post_id, description]);\r\n            }\r\n            if (phone) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            phone = $2 \n          WHERE tb_post.id = $1`, [post_id, phone]);\r\n            }\r\n            if (price) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            price = $2 \n          WHERE tb_post.id = $1`, [post_id, price]);\r\n            }\r\n            if (discount) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            discount = $2 \n          WHERE tb_post.id = $1`, [post_id, discount]);\r\n            }\r\n            if (category_id) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            post_category_id = $2 \n          WHERE tb_post.id = $1`, [post_id, category_id]);\r\n            }\r\n            if (sub_category_id) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            post_sub_category_id = $2 \n          WHERE tb_post.id = $1`, [post_id, sub_category_id]);\r\n            }\r\n            if (start_date) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            start_date = $2 \n          WHERE tb_post.id = $1`, [post_id, start_date]);\r\n            }\r\n            if (end_date) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            end_date = $2 \n          WHERE tb_post.id = $1`, [post_id, end_date]);\r\n            }\r\n            if (tags && tags.length > 0) {\r\n                await db_1.default.query(`WITH x AS (\n            DELETE FROM\n              tb_post_tag\n            WHERE\n              tb_post_tag.post_id = $1\n            RETURNING *)\n          DELETE FROM\n            tb_tag\n          WHERE\n            tb_tag.id = ANY(SELECT x.tag_id FROM x)`, [post_id]);\r\n                const { rows: tagList } = await db_1.default.query(`INSERT INTO tb_tag(name) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id`, [JSON.parse(tags)]);\r\n                const tagIds = tagList.reduce((acc, curValue) => {\r\n                    return [...acc, curValue.id];\r\n                }, []);\r\n                await db_1.default.query(`INSERT INTO tb_post_tag(post_id, tag_id) SELECT $1, unnest(ARRAY[$2::int[]])`, [post_id, tagIds]);\r\n            }\r\n            if (images) {\r\n                const { rows: oldImageList } = await db_1.default.query(`WITH x AS (\n            DELETE FROM\n              tb_post_image\n            WHERE\n              tb_post_image.post_id = $1\n            RETURNING *)\n          DELETE FROM\n            tb_image\n          WHERE\n            tb_image.id = ANY(SELECT x.image_id FROM x)\n          RETURNING *`, [post_id]);\r\n                oldImageList.map(async (elem) => {\r\n                    const filepath = path_1.default.resolve(elem.url);\r\n                    await promises_1.default.unlink(filepath);\r\n                });\r\n                await db_1.default.query(`WITH imgs AS (\n            INSERT INTO\n              tb_image(url) SELECT unnest(ARRAY[$1::varchar[]])\n            RETURNING id)\n          INSERT INTO\n            tb_post_image(post_id, image_id) SELECT $2, imgs.id FROM imgs\n          `, [images, post_id]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Post edited successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.PostDAO = PostDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/post/index.ts?");

/***/ }),

/***/ "./src/db/admin/publication-type/index.ts":
/*!************************************************!*\
  !*** ./src/db/admin/publication-type/index.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminPublicationTypeDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/admin/publication-type/utils.ts\");\r\nclass AdminPublicationTypeDAO {\r\n    db;\r\n    constructor() {\r\n        this.db = new utils_1.PublicationTypeDB();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.db.post(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.db.get(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.db.list(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminPublicationTypeDAO = AdminPublicationTypeDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/publication-type/index.ts?");

/***/ }),

/***/ "./src/db/admin/publication-type/utils.ts":
/*!************************************************!*\
  !*** ./src/db/admin/publication-type/utils.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PublicationTypeDB = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PublicationTypeDB {\r\n    async post(body) {\r\n        try {\r\n            const { type, like_amount } = body;\r\n            const { rows: tb_publication_type } = await db_1.default.query(`INSERT INTO tb_publication_type(type) values($1) RETURNING *`, [type]);\r\n            const publicationType = tb_publication_type[0];\r\n            const { rows: tb_publication_type_like_amount } = await db_1.default.query(`INSERT INTO tb_publication_type_like_amount(amount, publication_type_id) values($1, $2) RETURNING amount, created_at`, [like_amount || 0, publicationType.id]);\r\n            publicationType.like_amount = tb_publication_type_like_amount[0];\r\n            return {\r\n                status: true,\r\n                message: \"Publication type created successfully\",\r\n                data: publicationType,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(query) {\r\n        const { id } = query;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_publication_type.*,\n        to_json(tb_publication_type_like_amount) as like_amount\n      FROM\n        tb_publication_type\n        LEFT JOIN tb_publication_type_like_amount ON tb_publication_type_like_amount.publication_type_id = tb_publication_type.id\n      WHERE\n        tb_publication_type.id = $1\n      `, [id]);\r\n        return list.length > 0 ? list[0] : null;\r\n    }\r\n    async list(query) {\r\n        const { type } = query;\r\n        const typeFilter = type ? `tb_publication_type.type = $1` : `$1`;\r\n        const finalQuery = `WHERE ${typeFilter}`;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_publication_type.*,\n        to_json(tb_publication_type_like_amount) as like_amount\n      FROM\n        tb_publication_type\n        LEFT JOIN tb_publication_type_like_amount ON tb_publication_type_like_amount.publication_type_id = tb_publication_type.id\n      ${finalQuery}\n      `, [type || `TRUE`]);\r\n        return list;\r\n    }\r\n}\r\nexports.PublicationTypeDB = PublicationTypeDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/publication-type/utils.ts?");

/***/ }),

/***/ "./src/db/admin/service/index.ts":
/*!***************************************!*\
  !*** ./src/db/admin/service/index.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminServiceDAO = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"fs-extra\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass AdminServiceDAO {\r\n    post = async (body, image) => {\r\n        try {\r\n            const { name, cost, count, month, month_cost } = body;\r\n            const { rows: serviceList } = await db_1.default.query(\"INSERT INTO tb_service(name, cost, count) VALUES($1, $2, $3) RETURNING id\", [name, cost, count]);\r\n            const { rows: imageList } = await db_1.default.query(\"INSERT INTO tb_image(url) VALUES($1) RETURNING id\", [image]);\r\n            const imageId = imageList[0].id;\r\n            const serviceId = serviceList[0].id;\r\n            await db_1.default.query(\"INSERT INTO tb_service_image(image_id, service_id) VALUES($1, $2)\", [imageId, serviceId]);\r\n            if (month) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_service\n          SET\n            month = $2\n          WHERE\n            tb_service.id = $1\n          `, [serviceId, month]);\r\n            }\r\n            if (month_cost) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_service\n          SET\n            month_cost = $2\n          WHERE\n            tb_service.id = $1\n          `, [serviceId, month_cost]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Service created successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n    put = async (id, body, image) => {\r\n        try {\r\n            const { name, cost, count, month, month_cost, location_costs } = body;\r\n            await db_1.default.query(\"UPDATE tb_service SET name = $2, cost = $3, count = $4 WHERE id = $1\", [id, name, cost, count]);\r\n            if (month) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_service\n          SET\n            month = $2\n          WHERE\n            tb_service.id = $1\n          `, [id, month]);\r\n            }\r\n            if (month_cost) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_service\n          SET\n            month_cost = $2\n          WHERE\n            tb_service.id = $1\n          `, [id, month_cost]);\r\n            }\r\n            if (image) {\r\n                const { rows: oldImageList } = await db_1.default.query(`\n          WITH\n          deleted_service_image as (DELETE FROM tb_service_image WHERE tb_service_image.service_id = $1 RETURNING image_id)\n          DELETE FROM tb_image WHERE tb_image.id = (SELECT deleted_service_image.image_id FROM deleted_service_image) RETURNING url\n        `, [id]);\r\n                if (oldImageList[0]) {\r\n                    const url = oldImageList[0].url;\r\n                    const filePath = path_1.default.resolve(url);\r\n                    await fs_extra_1.default.unlink(filePath);\r\n                }\r\n                const { rows: imageList } = await db_1.default.query(\"INSERT INTO tb_image(url) VALUES($1) RETURNING id\", [image]);\r\n                const imageId = imageList[0].id;\r\n                await db_1.default.query(\"INSERT INTO tb_service_image(image_id, service_id) VALUES($1, $2)\", [imageId, id]);\r\n            }\r\n            if (location_costs) {\r\n                for (let i = 0; i < location_costs.length; i++) {\r\n                    const elem = location_costs[i];\r\n                    const { rows: elemList } = await db_1.default.query(`SELECT\n              tb_service_location.service_id\n            FROM\n              tb_service_location\n            WHERE\n              tb_service_location.service_id = $1 AND tb_service_location.location_id = $2\n            `, [id, elem.id]);\r\n                    if (elemList.length == 0) {\r\n                        return {\r\n                            status: false,\r\n                            message: \"Service does not have this location\",\r\n                        };\r\n                    }\r\n                    if (elem.cost) {\r\n                        await db_1.default.query(`\n              UPDATE\n                tb_service_location\n              SET\n                cost = $3\n              WHERE\n                tb_service_location.service_id = $1 AND tb_service_location.location_id = $2\n              `, [id, elem.id, elem.cost]);\r\n                    }\r\n                    if (elem.month_cost) {\r\n                        await db_1.default.query(`\n              UPDATE\n                tb_service_location\n              SET\n                month_cost = $3\n              WHERE\n                tb_service_location.service_id = $1 AND tb_service_location.location_id = $2\n              `, [id, elem.id, elem.month_cost]);\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Service updated successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n    list = async () => {\r\n        try {\r\n            const { rows } = await db_1.default.query(`\n        SELECT\n        tb_service.id as id,\n        tb_service.name as name,\n        tb_service.cost as cost,\n        tb_service.count as count,\n        tb_image.url as image\n        FROM tb_service\n        JOIN tb_service_image ON tb_service_image.service_id = tb_service.id\n        JOIN tb_image ON tb_image.id = tb_service_image.image_id\n      `);\r\n            return {\r\n                status: true,\r\n                message: \"Service list!\",\r\n                data: rows,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n    get = async (id) => {\r\n        try {\r\n            const { rows } = await db_1.default.query(`\n        WITH service AS (\n          SELECT\n            tb_service.id as id,\n            tb_service.name as name,\n            tb_service.cost as cost,\n            tb_service.count as count,\n            tb_image.url as image\n          FROM tb_service\n            JOIN tb_service_image ON tb_service_image.service_id = tb_service.id\n            JOIN tb_image ON tb_image.id = tb_service_image.image_id\n          WHERE\n            tb_service.id = $1\n\n        ), service_location AS (\n          SELECT\n            service.id as id,\n            json_agg(\n              jsonb_build_object(\n                'location',\n                ( \n                  SELECT\n                    to_json(tb_location.*)\n                  FROM\n                    tb_location\n                  WHERE\n                    tb_location.id = tb_service_location.location_id\n                  LIMIT 1\n                ),\n                'cost',\n                tb_service_location.cost,\n                'month_cost',\n                tb_service_location.month_cost,\n                'created_at',\n                tb_service_location.created_at\n              )\n            ) as location_costs\n          FROM\n            service\n            LEFT JOIN tb_service_location ON tb_service_location.service_id = service.id\n          GROUP BY\n            service.id\n        )\n        SELECT\n          service.*,\n          service_location.location_costs\n        FROM\n          service\n          LEFT JOIN service_location ON service_location.id = service.id\n      `, [id]);\r\n            return {\r\n                status: true,\r\n                message: \"Service!\",\r\n                data: rows,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n    delete = async (id) => {\r\n        try {\r\n            const { rows: imageList } = await db_1.default.query(`\n        WITH\n          deleted_service as (DELETE FROM tb_service WHERE id = $1),\n          deleted_service_image as (DELETE FROM tb_service_image WHERE tb_service_image.service_id = $1 RETURNING image_id)\n          DELETE FROM tb_image WHERE tb_image.id = (SELECT deleted_service_image.image_id FROM deleted_service_image) RETURNING url\n      `, [id]);\r\n            if (imageList[0]) {\r\n                const url = imageList[0].url;\r\n                const filePath = path_1.default.resolve(url);\r\n                await fs_extra_1.default.unlink(filePath);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Service deleted successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n}\r\nexports.AdminServiceDAO = AdminServiceDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/service/index.ts?");

/***/ }),

/***/ "./src/db/admin/sub-category/index.ts":
/*!********************************************!*\
  !*** ./src/db/admin/sub-category/index.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SubCategoryDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/admin/sub-category/query.ts\");\r\nclass SubCategoryDAO {\r\n    subCategory;\r\n    constructor() {\r\n        this.subCategory = new query_1.SubCategoryDB();\r\n    }\r\n    post = async (body) => {\r\n        const result = await this.subCategory.insert(body);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.subCategory.list(query);\r\n        return result;\r\n    };\r\n    get = async (id) => {\r\n        const result = await this.subCategory.get(id);\r\n        return result;\r\n    };\r\n    delete = async (id) => {\r\n        const result = await this.subCategory.delete(id);\r\n        return result;\r\n    };\r\n}\r\nexports.SubCategoryDAO = SubCategoryDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/sub-category/index.ts?");

/***/ }),

/***/ "./src/db/admin/sub-category/query.ts":
/*!********************************************!*\
  !*** ./src/db/admin/sub-category/query.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SubCategoryDB = void 0;\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nclass SubCategoryDB {\r\n    async insert(body) {\r\n        const { name, category_id: postCategoryId } = body;\r\n        const { rows: postCategoryList } = await db_1.default.query(\"SELECT id FROM tb_post_category WHERE id = $1\", [postCategoryId]);\r\n        if (postCategoryList.length === 0) {\r\n            return {\r\n                status: false,\r\n                message: \"Category doesn't exists!\",\r\n            };\r\n        }\r\n        const { rows: categoryList } = await db_1.default.query(\"INSERT INTO tb_category(name) VALUES ($1) RETURNING id\", [name]);\r\n        const categoryId = categoryList[0].id;\r\n        await db_1.default.query(\"INSERT INTO tb_post_sub_category(category_id, post_category_id) VALUES ($1, $2)\", [categoryId, postCategoryId]);\r\n        return {\r\n            status: true,\r\n            message: \"Sub Category created successfully\",\r\n        };\r\n    }\r\n    async list(query) {\r\n        try {\r\n            const { category_id } = query;\r\n            const filter = `${category_id ? \"WHERE \" : \"\"}${category_id ? \"tb_post_category.id = $1\" : \"\"}`;\r\n            const returnValues = [...Object.entries(query)].reduce((acc, curValue) => {\r\n                if (curValue) {\r\n                    return [...acc, curValue[1]];\r\n                }\r\n                return acc;\r\n            }, []);\r\n            const { rows: list } = await db_1.default.query(`SELECT tb_post_sub_category.id as id, tb_category.name as name,\n        to_json(json_build_object('id', tb_post_category.id, 'name', tb_parent_category.name)) category\n        FROM tb_post_sub_category\n        INNER JOIN tb_category ON tb_category.id = tb_post_sub_category.category_id\n        JOIN tb_post_category ON tb_post_category.id = tb_post_sub_category.post_category_id\n        LEFT JOIN tb_category as tb_parent_category ON tb_parent_category.id = tb_post_category.category_id\n        GROUP BY tb_post_sub_category.id, tb_category.name, tb_post_category.id, tb_parent_category.name\n        ${filter}\n    `, returnValues);\r\n            return {\r\n                status: true,\r\n                message: \"Sub category list\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(id) {\r\n        try {\r\n            const { rows: list } = await db_1.default.query(`SELECT tb_post_sub_category.id as id, tb_category.name as name,\n        to_json(json_build_object('id', tb_post_category.id, 'name', tb_parent_category.name)) category\n        FROM tb_post_sub_category\n        INNER JOIN tb_category ON tb_category.id = tb_post_sub_category.category_id\n        JOIN tb_post_category ON tb_post_category.id = tb_post_sub_category.post_category_id\n        LEFT JOIN tb_category as tb_parent_category ON tb_parent_category.id = tb_post_category.category_id\n        WHERE tb_post_sub_category.id = $1\n        GROUP BY tb_post_sub_category.id, tb_category.name, tb_post_category.id, tb_parent_category.name\n        `, [id]);\r\n            return {\r\n                status: true,\r\n                message: \"Sub Category get\",\r\n                data: list[0],\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async delete(id) {\r\n        try {\r\n            const { rows: categoryList } = await db_1.default.query(\"SELECT category_id FROM tb_post_sub_category WHERE id = $1\", [id]);\r\n            const categoryId = categoryList[0].category_id;\r\n            await db_1.default.query(\"DELETE FROM tb_post_sub_category WHERE id = $1\", [id]);\r\n            await db_1.default.query(\"DELETE FROM tb_category WHERE id = $1\", [categoryId]);\r\n            return {\r\n                message: \"Sub Category succesfully deleted!\",\r\n                status: true,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.SubCategoryDB = SubCategoryDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/sub-category/query.ts?");

/***/ }),

/***/ "./src/db/admin/user-profile/index.ts":
/*!********************************************!*\
  !*** ./src/db/admin/user-profile/index.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserProfileDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/admin/user-profile/utils.ts\");\r\nclass AdminUserProfileDAO {\r\n    user;\r\n    constructor() {\r\n        this.user = new utils_1.AdminUserProfileDB();\r\n    }\r\n    listFollowReward = async (body) => {\r\n        const result = await this.user.listFollowReward(body);\r\n        return result;\r\n    };\r\n    getFollowReward = async (body) => {\r\n        const result = await this.user.getFollowReward(body);\r\n        return result;\r\n    };\r\n    setFollowReward = async (body) => {\r\n        const result = await this.user.setFollowReward(body);\r\n        return result;\r\n    };\r\n    setTopListLimit = async (body) => {\r\n        const result = await this.user.setTopListLimit(body);\r\n        return result;\r\n    };\r\n    listTopListLimit = async (body) => {\r\n        const result = await this.user.listTopListLimit(body);\r\n        return result;\r\n    };\r\n    delteUser = async (body) => {\r\n        const result = await this.user.delteUser(body);\r\n        return result;\r\n    };\r\n    setDayStreakCoinReward = async (body) => {\r\n        const result = await this.user.setDayStreakCoinReward(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminUserProfileDAO = AdminUserProfileDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/user-profile/index.ts?");

/***/ }),

/***/ "./src/db/admin/user-profile/utils.ts":
/*!********************************************!*\
  !*** ./src/db/admin/user-profile/utils.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserProfileDB = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass AdminUserProfileDB {\r\n    async listFollowReward(body) {\r\n        try {\r\n            const { subscription_type_id, location_id } = body;\r\n            const subscriptionTypeIdFilter = subscription_type_id\r\n                ? `tb_subscription_type.id = $1`\r\n                : `$1`;\r\n            const locationIdFilter = location_id ? `tb_location.id = $2` : `$2`;\r\n            const userQuery = `WHERE ${subscriptionTypeIdFilter} AND ${locationIdFilter}`;\r\n            const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_subscription_type.type,\n        json_agg(\n          jsonb_build_object(\n            'location', tb_location,\n            'coin_amount', tb_user_follow_coin_amount.coin_amount\n          )\n        ) AS data\n      FROM\n        tb_user_follow_coin_amount\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_follow_coin_amount.subscription_type_id\n        LEFT JOIN tb_location ON tb_location.id = tb_user_follow_coin_amount.location_id\n      ${userQuery}\n      GROUP BY\n        tb_subscription_type.type\n      `, [subscription_type_id || `TRUE`, location_id || `TRUE`]);\r\n            return {\r\n                status: true,\r\n                message: \"Follow reward list\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async getFollowReward(body) {\r\n        try {\r\n            const { location_id, subscription_type_id } = body;\r\n            const values = [location_id, subscription_type_id];\r\n            const { rows: list } = await db_1.default.query(` \n      SELECT\n        tb_subscription_type.type,\n        json_agg(\n          jsonb_build_object(\n            'location', tb_location,\n            'coin_amount', tb_user_follow_coin_amount.coin_amount\n          )\n        ) AS data\n      FROM\n        tb_user_follow_coin_amount\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_follow_coin_amount.subscription_type_id\n        LEFT JOIN tb_location ON tb_location.id = tb_user_follow_coin_amount.location_id\n      WHERE\n        tb_location.id = $1 AND tb_subscription_type.id = $2\n      GROUP BY\n        tb_subscription_type.type\n      `, values);\r\n            return {\r\n                status: true,\r\n                message: \"Follow reward\",\r\n                data: list.length > 0 ? list[0] : null,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async setFollowReward(body) {\r\n        try {\r\n            const { subscription_type_id, location_id, coin_amount } = body;\r\n            const { rows: itemList } = await db_1.default.query(`SELECT\n          *\n        FROM\n          tb_user_follow_coin_amount\n        WHERE\n          tb_user_follow_coin_amount.subscription_type_id = $1 AND \n          tb_user_follow_coin_amount.location_id = $2`, [subscription_type_id, location_id]);\r\n            if (itemList.length < 1) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Wrong subscription_type_id or location_id\",\r\n                };\r\n            }\r\n            await db_1.default.query(`\n        UPDATE\n          tb_user_follow_coin_amount\n        SET\n          coin_amount = $3\n        WHERE\n          tb_user_follow_coin_amount.subscription_type_id = $1 AND \n          tb_user_follow_coin_amount.location_id = $2`, [subscription_type_id, location_id, coin_amount]);\r\n            return {\r\n                status: true,\r\n                message: \"Follow reward was set successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async setTopListLimit(body) {\r\n        try {\r\n            const { name, limit_count } = body;\r\n            const { rows: itemList } = await db_1.default.query(`SELECT\n          *\n        FROM\n          tb_top_list_limit\n        WHERE\n          tb_top_list_limit.name = $1`, [name]);\r\n            if (itemList.length < 1) {\r\n                await db_1.default.query(`INSERT INTO tb_top_list_limit(name, limit_count) VALUES ($1, $2)`, [name, limit_count]);\r\n            }\r\n            await db_1.default.query(`\n        UPDATE\n          tb_top_list_limit\n        SET\n          limit_count = $2\n        WHERE\n          tb_top_list_limit.name = $1`, [name, limit_count]);\r\n            return {\r\n                status: true,\r\n                message: \"Top list limit was set successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async listTopListLimit(body) {\r\n        try {\r\n            const {} = body;\r\n            const { rows: list } = await db_1.default.query(`SELECT * FROM tb_top_list_limit`);\r\n            return {\r\n                status: true,\r\n                message: \"Top list limit\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async delteUser(body) {\r\n        try {\r\n            const { id } = body;\r\n            const { rows: itemList } = await db_1.default.query(`SELECT\n          *\n        FROM\n          tb_user_auth\n        WHERE\n          tb_user_auth.id = $1`, [id]);\r\n            if (itemList.length < 1) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User does not exists!\",\r\n                };\r\n            }\r\n            await db_1.default.query(`DELETE FROM tb_video\n        WHERE tb_video.id IN\n          (\n            SELECT\n              tb_user_video.video_id\n            FROM \n              tb_user_video\n            WHERE \n              tb_user_video.user_auth_id = $1\n          )`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_image\n        WHERE tb_image.id IN\n          (\n            SELECT\n              tb_gallery.image_id\n            FROM \n              tb_gallery\n            WHERE \n              tb_gallery.user_auth_id = $1\n          )`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_image\n        WHERE tb_image.id IN\n          (\n            SELECT\n              tb_user_image.image_id\n            FROM \n              tb_user_image\n            WHERE \n              tb_user_image.user_auth_id = $1\n          )`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_user_auth WHERE tb_user_auth.id = $1`, [\r\n                id,\r\n            ]);\r\n            return {\r\n                status: true,\r\n                message: \"User was deleted successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async setDayStreakCoinReward(body) {\r\n        try {\r\n            const { day_id, coin_amount } = body;\r\n            const { rows: dayStreakList } = await db_1.default.query(`\n        UPDATE\n          tb_day_streak_coin_amount\n        SET\n          coin_amount = $2,\n          created_at = CURRENT_TIMESTAMP\n        WHERE\n          tb_day_streak_coin_amount.day_id = $1\n        RETURNING\n          *`, [day_id, coin_amount]);\r\n            if (dayStreakList.length == 0) {\r\n                await db_1.default.query(`INSERT INTO tb_day_streak_coin_amount(day_id, coin_amount) VALUES ($1, $2)`, [day_id, coin_amount]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Admin set day streak coin reward successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.AdminUserProfileDB = AdminUserProfileDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/user-profile/utils.ts?");

/***/ }),

/***/ "./src/db/admin/user/index.ts":
/*!************************************!*\
  !*** ./src/db/admin/user/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminUserDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/admin/user/query.ts\");\r\nclass AdminUserDAO {\r\n    user;\r\n    constructor() {\r\n        this.user = new query_1.UserDB();\r\n    }\r\n    post = async (body, image) => {\r\n        const result = await this.user.insert(body, image);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.user.list(query);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminUserDAO = AdminUserDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/user/index.ts?");

/***/ }),

/***/ "./src/db/admin/user/query.ts":
/*!************************************!*\
  !*** ./src/db/admin/user/query.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserDB = void 0;\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst bcrypt_1 = __importDefault(__webpack_require__(/*! bcrypt */ \"bcrypt\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nconst SALT_ROUNDS = Number(process.env.SALT_ROUNDS) || 10;\r\nclass UserDB {\r\n    async insert(body, image) {\r\n        try {\r\n            const { name, password, email, phone, location_id, type, start_time, end_time, } = body;\r\n            const { rows: userList } = await db_1.default.query(`SELECT tb_user_auth.id as id\n        FROM tb_user_auth\n        WHERE name = $1`, [name]);\r\n            if (userList.length > 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User with this name already exists!\",\r\n                };\r\n            }\r\n            const { rows: userPhoneList } = await db_1.default.query(`\n        SELECT tb_user_auth.id as id\n        FROM tb_user_auth\n        JOIN tb_phone ON tb_phone.user_auth_id = tb_user_auth.id\n        WHERE tb_phone.phone = $1`, [phone]);\r\n            if (userPhoneList.length > 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User with this phone number already exists!\",\r\n                };\r\n            }\r\n            const hashPassword = await bcrypt_1.default.hash(password, SALT_ROUNDS);\r\n            const { rows: newUserList } = await db_1.default.query(\"INSERT INTO tb_user_auth(name, password, verify) VALUES($1, $2, $3) RETURNING id\", [name, hashPassword, \"TRUE\"]);\r\n            const newUserId = newUserList[0].id;\r\n            if (image) {\r\n                const { rows: imageList } = await db_1.default.query(\"INSERT INTO tb_image(url) VALUES ($1) RETURNING id\", [image]);\r\n                const imageId = imageList[0].id;\r\n                await db_1.default.query(\"INSERT INTO tb_user_auth_avatar_image(image_id, user_auth_id) VALUES($1, $2)\", [imageId, newUserId]);\r\n            }\r\n            const { rows: subscriptionTypeList } = await db_1.default.query(`\n        SELECT id\n        FROM tb_subscription_type\n        WHERE type = $1\n        `, [type]);\r\n            if (!subscriptionTypeList[0]?.id) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Invalid subscription type!\",\r\n                };\r\n            }\r\n            const subscriptionTypeId = subscriptionTypeList[0].id;\r\n            if (type === \"OFFICIAL\") {\r\n                await db_1.default.query(\"INSERT INTO tb_official_user(user_auth_id, email, start_date, expiry_date) VALUES($1, $2, $3, $4)\", [newUserId, email, start_time, end_time]);\r\n            }\r\n            await db_1.default.query(\"INSERT INTO tb_user_subscription_type(user_auth_id, subscription_type_id) VALUES($1, $2)\", [newUserId, subscriptionTypeId]);\r\n            await db_1.default.query(\"INSERT INTO tb_phone(user_auth_id, phone) VALUES($1, $2)\", [newUserId, phone]);\r\n            await db_1.default.query(\"INSERT INTO tb_user_location(user_auth_id, location_id) SELECT $1, unnest(ARRAY[$2::int[]])\", [newUserId, JSON.parse(location_id)]);\r\n            return {\r\n                status: true,\r\n                message: \"User created successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async list(query) {\r\n        try {\r\n            const { type, location_id, name, limit, offset } = query;\r\n            const typeFilter = type ? `tb_subscription_type.type = $1` : \"$1\";\r\n            const nameFilter = name ? `tb_user_auth.name ILIKE $2` : \"$2\";\r\n            const locationFilter = location_id ? `tb_location.id = $3` : \"$3\";\r\n            const filterQuery = `WHERE ${typeFilter} AND ${nameFilter} AND ${locationFilter}`;\r\n            const { rows: list } = await db_1.default.query(`SELECT\n        tb_user_auth.id as id,\n        tb_user_auth.name as name,\n        tb_image.url as avatar_image,\n        tb_phone.phone as phone,\n        tb_user_coin_balance.balance as balance,\n        tb_official_user.email as email,\n        tb_official_user.start_date as start_date,\n        tb_official_user.expiry_date as expiry_date,\n        (SELECT json_agg(to_json(json_build_object('id', t_l.id, 'name', t_l.display_name)))\n          FROM tb_user_location t_u_l\n          JOIN tb_location t_l ON t_l.id = t_u_l.location_id\n          WHERE t_u_l.user_auth_id = tb_user_auth.id) as locations,\n        to_json(json_build_object('id', tb_subscription_type.id, 'type', tb_subscription_type.type)) type\n      \n        FROM tb_user_auth\n\n      LEFT JOIN LATERAL\n      (\n        SELECT balance, user_auth_id\n        FROM tb_user_coin_balance\n        WHERE tb_user_coin_balance.user_auth_id = tb_user_auth.id\n      ) tb_user_coin_balance ON true\n\n      LEFT JOIN LATERAL\n      (\n        SELECT tb_location.id as id, tb_location.name as name\n        FROM tb_user_location\n        JOIN tb_location ON tb_location.id = tb_user_location.location_id\n        WHERE tb_user_location.user_auth_id = tb_user_auth.id\n      ) tb_location ON true\n\n      LEFT JOIN LATERAL\n        (\n        SELECT tb_image.id as id, tb_image.url as url\n        FROM tb_user_auth_avatar_image\n        JOIN tb_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n        WHERE tb_user_auth_avatar_image.user_auth_id = tb_user_auth.id\n        ) tb_image ON true\n\n      JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_auth.id\n      JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      JOIN tb_phone ON tb_phone.user_auth_id = tb_user_auth.id\n      \n      LEFT JOIN LATERAL\n        (\n        SELECT  email, expiry_date, start_date\n        FROM    tb_official_user\n        WHERE   tb_official_user.user_auth_id = tb_user_auth.id\n        ) tb_official_user ON true\n      ${filterQuery}\n      GROUP BY tb_user_auth.id, tb_phone.id, tb_user_coin_balance.balance, tb_image.url, tb_subscription_type.id, tb_user_subscription_type.id, tb_official_user.email, tb_official_user.expiry_date, tb_official_user.start_date\n      ORDER BY created_on DESC\n      LIMIT $4\n      OFFSET $5\n      `, [\r\n                type || \"TRUE\",\r\n                name ? `%${name}%` : \"TRUE\",\r\n                location_id || \"TRUE\",\r\n                limit || 10,\r\n                offset || 0,\r\n            ]);\r\n            const { rowCount: totalCount } = await db_1.default.query(`\n      SELECT tb_user_auth.id\n      FROM tb_user_auth\n      LEFT JOIN LATERAL\n      (\n        SELECT user_auth_id, location_id\n        FROM tb_user_location\n        WHERE tb_user_location.user_auth_id = tb_user_auth.id\n      ) tb_user_location ON true\n      LEFT JOIN LATERAL\n      (\n        SELECT id, name\n        FROM tb_location\n        WHERE tb_location.id = tb_user_location.location_id\n      ) tb_location ON true\n      JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_auth.id\n      JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      ${filterQuery}\n      GROUP BY tb_user_auth.id`, [type || \"TRUE\", name ? `%${name}%` : \"TRUE\", location_id || \"TRUE\"]);\r\n            return {\r\n                status: true,\r\n                message: \"User list\",\r\n                data: {\r\n                    total_count: totalCount,\r\n                    users: list,\r\n                },\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.UserDB = UserDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/user/query.ts?");

/***/ }),

/***/ "./src/db/admin/video/index.ts":
/*!*************************************!*\
  !*** ./src/db/admin/video/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AdminVideoDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/admin/video/utils.ts\");\r\nclass AdminVideoDAO {\r\n    video;\r\n    constructor() {\r\n        this.video = new utils_1.VideoDB();\r\n    }\r\n    create = async (body) => {\r\n        const result = await this.video.post(body);\r\n        return result;\r\n    };\r\n    edit = async (body) => {\r\n        const result = await this.video.edit(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.video.get(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.video.delete(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.video.list(body);\r\n        return result;\r\n    };\r\n    setPublicationType = async (body) => {\r\n        const result = await this.video.setPublicationType(body);\r\n        return result;\r\n    };\r\n    getPublicationType = async (body) => {\r\n        const result = await this.video.getPublicationType(body);\r\n        return result;\r\n    };\r\n}\r\nexports.AdminVideoDAO = AdminVideoDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/video/index.ts?");

/***/ }),

/***/ "./src/db/admin/video/utils.ts":
/*!*************************************!*\
  !*** ./src/db/admin/video/utils.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.VideoDB = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"fs-extra\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass VideoDB {\r\n    async post(body) {\r\n        try {\r\n            const { user_id, title, page_category_ids, video, thumbnail } = body;\r\n            const { rows: image_list } = await db_1.default.query(`INSERT INTO tb_image(url) values($1) RETURNING *;`, [thumbnail]);\r\n            const thumbnailImageDBData = image_list[0];\r\n            const { rows: video_list } = await db_1.default.query(`INSERT INTO tb_video(url) values($1) RETURNING *;`, [video]);\r\n            const videoDBData = video_list[0];\r\n            const { rows: user_video_list } = await db_1.default.query(`INSERT INTO tb_user_video(title, user_auth_id, video_id) values($1, $2, $3) RETURNING *;`, [title, user_id, videoDBData.id]);\r\n            const userVideoDBData = user_video_list[0];\r\n            await db_1.default.query(`INSERT INTO tb_video_thumbnail(user_video_id, image_id) values($1, $2);`, [userVideoDBData.id, thumbnailImageDBData.id]);\r\n            page_category_ids.map(async (item) => {\r\n                await db_1.default.query(`INSERT INTO tb_user_video_page_category(user_video_id, page_category_id) values($1, $2)`, [userVideoDBData.id, item]);\r\n            });\r\n            await db_1.default.query(`INSERT INTO tb_user_video_publication_type(user_video_id, publication_type_id) values($1, $2)`, [userVideoDBData.id, 1]);\r\n            return {\r\n                status: true,\r\n                message: \"Video created successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async edit(body) {\r\n        try {\r\n            const { id, user_id, title, page_category_ids, thumbnail } = body;\r\n            const { rows: videoList } = await db_1.default.query(\"SELECT * from tb_user_video WHERE id = $1\", [id]);\r\n            if (videoList.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User video does not exists!\",\r\n                };\r\n            }\r\n            if (user_id) {\r\n                const { rows: userList } = await db_1.default.query(\"SELECT * from tb_user_auth WHERE id = $1\", [user_id]);\r\n                if (userList.length === 0) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"User does not exists!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_video\n          SET\n            user_auth_id = $2\n          WHERE\n            tb_user_video.id = $1\n          `, [id, user_id]);\r\n            }\r\n            if (title) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_video\n          SET\n            title = $2\n          WHERE\n            tb_user_video.id = $1\n          `, [id, title]);\r\n            }\r\n            if (page_category_ids) {\r\n                const { rows: pageCategoryList } = await db_1.default.query(\"SELECT * from tb_page_category WHERE id = ANY(SELECT unnest(ARRAY[$1::int[]]))\", [page_category_ids]);\r\n                if (pageCategoryList.length != page_category_ids.length) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Page categories does not exists!\",\r\n                    };\r\n                }\r\n                await db_1.default.query(`\n          WITH x as (\n            DELETE FROM\n              tb_user_video_page_category\n            WHERE\n              tb_user_video_page_category.user_video_id = $1\n          )\n          INSERT INTO tb_user_video_page_category(user_video_id, page_category_id) SELECT $1, unnest(ARRAY[$2::int[]])\n          `, [id, page_category_ids]);\r\n            }\r\n            if (thumbnail) {\r\n                const { rows: oldImageList } = await db_1.default.query(`\n          WITH x AS (\n            DELETE FROM\n              tb_video_thumbnail\n            WHERE\n              tb_video_thumbnail.user_video_id = $1\n            RETURNING *\n          )\n          DELETE FROM\n            tb_image\n          WHERE\n            tb_image.id = ANY(SELECT x.image_id FROM x)\n          RETURNING *`, [id]);\r\n                oldImageList.map(async (elem) => {\r\n                    const filepath = path_1.default.resolve(elem.url);\r\n                    await fs_extra_1.default.unlink(filepath);\r\n                });\r\n                await db_1.default.query(`\n          WITH x as (\n            INSERT INTO tb_image (url) values($2) RETURNING id\n          )\n          INSERT INTO tb_video_thumbnail(user_video_id, image_id) SELECT $1, x.id FROM x\n          `, [id, thumbnail]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Video edited successfully\",\r\n                data: await this.get({\r\n                    id: id,\r\n                }),\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(query) {\r\n        const { id } = query;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_user_video.id,\n        tb_user_video.title,\n        tb_user_video.viewed_count,\n        tb_user_video.created_at,\n        jsonb_build_object(\n          'id', tb_user_auth.id,\n          'name', tb_user_auth.name,\n          'avatar_image', \n          jsonb_build_object('url', user_auth_avatar_image_image.url),\n          'role', tb_subscription_type.type\n        ) as user,\n        jsonb_build_object('url', tb_video.url) as video,\n        jsonb_build_object('url', tb_image.url) as thumbnail,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category,\n        CAST(\n          COALESCE(\n            (\n              SELECT\n                count(tb_user_video_like.id)\n              FROM\n                tb_user_video_like\n              WHERE\n                tb_user_video_like.user_video_id = tb_user_video.id\n            ),\n            '0'\n          ) as INTEGER\n        ) as likes_count,\n        to_json(tb_publication_type) as publication_type\n      FROM\n        tb_user_video\n        JOIN tb_video ON tb_user_video.video_id = tb_video.id\n        LEFT JOIN tb_user_video_publication_type ON tb_user_video_publication_type.user_video_id = tb_user_video.id\n        LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_video_publication_type.publication_type_id\n        JOIN tb_video_thumbnail ON tb_video_thumbnail.user_video_id = tb_user_video.id\n        JOIN tb_image ON tb_video_thumbnail.image_id = tb_image.id\n        LEFT JOIN tb_user_video_page_category ON tb_user_video_page_category.user_video_id = tb_user_video.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_user_video_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_user_video.user_auth_id\n        LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_user_video.user_auth_id\n        LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n        \n        LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_video.user_auth_id\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      WHERE\n        tb_user_video.id = $1\n      GROUP BY\n        tb_user_video.id,\n        tb_video.url,\n        tb_image.url,\n        tb_user_auth.id,\n        user_auth_avatar_image_image.url,\n        tb_subscription_type.type,\n        tb_publication_type\n      `, [id]);\r\n        return list.length > 0 ? list[0] : null;\r\n    }\r\n    async delete(query) {\r\n        try {\r\n            const { id } = query;\r\n            await db_1.default.query(`WITH \n          deleted as (DELETE FROM tb_video_thumbnail WHERE tb_video_thumbnail.user_video_id = $1 RETURNING image_id)\n          DELETE FROM tb_image WHERE tb_image.id = ANY(SELECT deleted.image_id from deleted)`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_user_video_page_category WHERE tb_user_video_page_category.user_video_id = $1`, [id]);\r\n            await db_1.default.query(`WITH\n        deleted as (DELETE FROM tb_user_video WHERE tb_user_video.id = $1 RETURNING video_id)\n        DELETE FROM tb_video WHERE tb_video.id = ANY(SELECT deleted.video_id from deleted)`, [id]);\r\n            await db_1.default.query(`DELETE FROM tb_user_video_publication_type WHERE tb_user_video_publication_type.user_video_id = $1`, [id]);\r\n            return {\r\n                status: true,\r\n                message: \"Video deleted successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async list(body) {\r\n        const { user_id, page_category_id, publication_type_id, query, sort, order, limit, offset, } = body;\r\n        const userIdFilter = user_id ? `tb_user_video.user_auth_id = $1` : `$1`;\r\n        const pageCategoryIdFilter = page_category_id\r\n            ? `($2 IN (SELECT tb_user_video_page_category.page_category_id\n                  FROM tb_user_video_page_category\n                  WHERE tb_user_video_page_category.user_video_id = tb_user_video.id))`\r\n            : `$2`;\r\n        const sqlquery = query ? \"%\" + query + \"%\" : null;\r\n        const queryFilter = query\r\n            ? `(tb_user_video.title ILIKE $3 OR\n          tb_user_auth.name ILIKE $3 OR\n          tb_subscription_type.type ILIKE $3 OR\n          tb_publication_type.type ILIKE $3)`\r\n            : `$3`;\r\n        const publicationTypeIdFilter = publication_type_id\r\n            ? `tb_publication_type.id = $4`\r\n            : `$4`;\r\n        let sortBy = `tb_user_video.created_at`;\r\n        switch (sort) {\r\n            case \"time\":\r\n                sortBy = `tb_user_video.created_at`;\r\n                break;\r\n            case \"like\":\r\n                sortBy = `likes_count`;\r\n                break;\r\n            case \"view\":\r\n                sortBy = `tb_user_video.viewed_count`;\r\n                break;\r\n        }\r\n        let orderBy = `DESC`;\r\n        switch (order) {\r\n            case \"asc\":\r\n                orderBy = `ASC`;\r\n                break;\r\n            case \"desc\":\r\n                orderBy = `DESC`;\r\n                break;\r\n        }\r\n        const finalQuery = `WHERE ${userIdFilter} AND ${pageCategoryIdFilter} AND ${queryFilter} AND ${publicationTypeIdFilter}`;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_user_video.id,\n        CAST(COUNT(tb_user_video.id) OVER() AS INTEGER) as items_full_count,\n        tb_user_video.title,\n        tb_user_video.viewed_count,\n        tb_user_video.created_at,\n        jsonb_build_object(\n          'id', tb_user_auth.id,\n          'name', tb_user_auth.name,\n          'avatar_image', \n          jsonb_build_object('url', user_auth_avatar_image_image.url),\n          'role', tb_subscription_type.type\n        ) as user,\n        jsonb_build_object('url', tb_video.url) as video,\n        jsonb_build_object('url', tb_image.url) as thumbnail,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category,\n        CAST(\n          COALESCE(\n            (\n              SELECT\n                count(tb_user_video_like.id)\n              FROM\n                tb_user_video_like\n              WHERE\n                tb_user_video_like.user_video_id = tb_user_video.id\n            ),\n            '0'\n          ) as INTEGER\n        ) as likes_count,\n        to_json(tb_publication_type) as publication_type\n      FROM\n        tb_user_video\n        JOIN tb_video ON tb_user_video.video_id = tb_video.id\n        LEFT JOIN tb_user_video_publication_type ON tb_user_video_publication_type.user_video_id = tb_user_video.id\n        LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_video_publication_type.publication_type_id\n        JOIN tb_video_thumbnail ON tb_video_thumbnail.user_video_id = tb_user_video.id\n        JOIN tb_image ON tb_video_thumbnail.image_id = tb_image.id\n        LEFT JOIN tb_user_video_page_category ON tb_user_video_page_category.user_video_id = tb_user_video.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_user_video_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_user_video.user_auth_id\n        LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_user_video.user_auth_id\n        LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n        LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_video.user_auth_id\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      ${finalQuery}\n      GROUP BY\n        tb_user_video.id,\n        tb_video.url,\n        tb_image.url,\n        tb_user_auth.id,\n        user_auth_avatar_image_image.url,\n        tb_subscription_type.type,\n        tb_publication_type\n      ORDER BY\n        ${sortBy} ${orderBy}\n      LIMIT $5\n      OFFSET $6\n        `, [\r\n            user_id || `TRUE`,\r\n            page_category_id || `TRUE`,\r\n            sqlquery || `TRUE`,\r\n            publication_type_id || `TRUE`,\r\n            limit,\r\n            offset || 0,\r\n        ]);\r\n        return list;\r\n    }\r\n    async setPublicationType(query) {\r\n        try {\r\n            const { id, publication_type_id } = query;\r\n            const { rows: tb_user_video } = await db_1.default.query(`SELECT * FROM tb_user_video WHERE tb_user_video.id = $1`, [id]);\r\n            const { rows: tb_publication_type } = await db_1.default.query(`SELECT * FROM tb_publication_type WHERE tb_publication_type.id = $1`, [publication_type_id]);\r\n            if (tb_user_video.length === 0 || tb_publication_type.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Video or publication type does not exist\",\r\n                };\r\n            }\r\n            const { rows: current_tb_publication_type } = await db_1.default.query(`\n        SELECT * FROM tb_user_video_publication_type\n        WHERE\n          tb_user_video_publication_type.user_video_id = $1\n        `, [id]);\r\n            if (current_tb_publication_type.length > 0) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_video_publication_type\n          SET\n            publication_type_id = $1\n          WHERE\n            tb_user_video_publication_type.user_video_id = $2\n          `, [publication_type_id, id]);\r\n            }\r\n            else {\r\n                await db_1.default.query(`\n          INSERT INTO tb_user_video_publication_type (user_video_id, publication_type_id) VALUES($1, $2)\n          `, [id, publication_type_id]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Video publication type was set successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async getPublicationType(query) {\r\n        const { id } = query;\r\n        const { rows: tb_publication_type } = await db_1.default.query(`SELECT tb_publication_type.*\n      FROM\n        tb_user_video_publication_type\n        LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_video_publication_type.publication_type_id\n      WHERE\n        tb_user_video_publication_type.user_video_id = $1`, [id]);\r\n        return tb_publication_type.length > 0 ? tb_publication_type[0] : null;\r\n    }\r\n}\r\nexports.VideoDB = VideoDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/admin/video/utils.ts?");

/***/ }),

/***/ "./src/db/auth/index.ts":
/*!******************************!*\
  !*** ./src/db/auth/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AuthDAO = void 0;\r\nconst login_1 = __webpack_require__(/*! ./login */ \"./src/db/auth/login/index.ts\");\r\nconst signup_1 = __webpack_require__(/*! ./signup */ \"./src/db/auth/signup/index.ts\");\r\nconst reset_password_1 = __webpack_require__(/*! ./reset-password */ \"./src/db/auth/reset-password/index.ts\");\r\nconst verify_1 = __webpack_require__(/*! ./verify */ \"./src/db/auth/verify/index.ts\");\r\nclass AuthDAO {\r\n    signup = async (body) => {\r\n        const { name, phone } = body;\r\n        const addUnverifiedUser = async () => {\r\n            const isUsernameExist = await (0, signup_1.isUserWithUsernameExists)(name);\r\n            if (isUsernameExist) {\r\n                return false;\r\n            }\r\n            const userId = await (0, signup_1.insertAuthUser)(body);\r\n            await Promise.all([(0, signup_1.insertPhone)({ user_id: userId, phone })]);\r\n            return true;\r\n        };\r\n        const phoneExists = await (0, signup_1.isPhoneExists)(phone);\r\n        if (!phoneExists) {\r\n            const success = await addUnverifiedUser();\r\n            if (!success) {\r\n                return {\r\n                    message: \"User with this username already exists!\",\r\n                    status: false,\r\n                };\r\n            }\r\n            return {\r\n                message: \"Success, verify your account to proceed!\",\r\n                status: true,\r\n            };\r\n        }\r\n        const userId = await (0, signup_1.getUserIdByPhone)(phone);\r\n        const isUnverified = await (0, signup_1.isUnverifiedUser)(userId);\r\n        if (isUnverified) {\r\n            await Promise.all([await (0, signup_1.deleteUser)(userId), await addUnverifiedUser()]);\r\n            return {\r\n                message: \"Success, verify your account to proceed\",\r\n                status: true,\r\n            };\r\n        }\r\n        return {\r\n            message: \"You are already signed up verify your account to proceed!\",\r\n            status: false,\r\n        };\r\n    };\r\n    login = async (body) => {\r\n        const { phone, password } = body;\r\n        const phoneExists = await (0, signup_1.isPhoneExists)(phone);\r\n        if (!phoneExists) {\r\n            return {\r\n                status: false,\r\n                message: \"Register first to login!\",\r\n            };\r\n        }\r\n        const userId = await (0, signup_1.getUserIdByPhone)(phone);\r\n        const isUnverified = await (0, signup_1.isUnverifiedUser)(userId);\r\n        if (isUnverified) {\r\n            return {\r\n                status: false,\r\n                message: \"Verify your account to login!\",\r\n            };\r\n        }\r\n        const validPassword = await (0, login_1.checkUserPassword)(userId, password);\r\n        if (!validPassword) {\r\n            return {\r\n                status: false,\r\n                message: \"Entered password is incorrect!\",\r\n            };\r\n        }\r\n        const subscriptionType = await (0, login_1.getUserRole)(userId);\r\n        const accessToken = (0, login_1.generateAccessToken)(userId, subscriptionType);\r\n        return {\r\n            status: true,\r\n            message: \"Successfully logged in!\",\r\n            data: {\r\n                token: accessToken,\r\n            },\r\n        };\r\n    };\r\n    accountVerify = async (body) => {\r\n        const { phone, recover } = body;\r\n        const phoneExists = await (0, signup_1.isPhoneExists)(phone);\r\n        if (!phoneExists) {\r\n            return false;\r\n        }\r\n        const userId = await (0, signup_1.getUserIdByPhone)(phone);\r\n        const recoverRequested = await (0, verify_1.passwordRecoverRequested)(userId);\r\n        if (recover && recoverRequested) {\r\n            return true;\r\n        }\r\n        if (recover) {\r\n            await (0, verify_1.recoverPassword)(userId);\r\n            return true;\r\n        }\r\n        const isUnverified = await (0, signup_1.isUnverifiedUser)(userId);\r\n        if (isUnverified) {\r\n            await (0, verify_1.subscribeAsUser)(userId);\r\n            await (0, verify_1.verifyUser)(userId);\r\n            return true;\r\n        }\r\n        return true;\r\n    };\r\n    accountVerifyCheck = async (body) => {\r\n        const { phone } = body;\r\n        const phoneExists = await (0, signup_1.isPhoneExists)(phone);\r\n        if (!phoneExists) {\r\n            return false;\r\n        }\r\n        const userId = await (0, signup_1.getUserIdByPhone)(phone);\r\n        const isUnverified = await (0, signup_1.isUnverifiedUser)(userId);\r\n        if (!isUnverified) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    recoverVerifyCheck = async (body) => {\r\n        const { phone } = body;\r\n        const phoneExists = await (0, signup_1.isPhoneExists)(phone);\r\n        if (!phoneExists) {\r\n            return {\r\n                status: false,\r\n                message: \"Phone number not registered!\",\r\n            };\r\n        }\r\n        const userId = await (0, signup_1.getUserIdByPhone)(phone);\r\n        const recoveryRequested = await (0, verify_1.passwordRecoverRequested)(userId);\r\n        if (!recoveryRequested) {\r\n            return {\r\n                status: false,\r\n                message: \"Password recovery not requested!\",\r\n            };\r\n        }\r\n        return {\r\n            status: true,\r\n            message: \"Password recovery verified!\",\r\n        };\r\n    };\r\n    userExists = async (body) => {\r\n        const { phone } = body;\r\n        const phoneExists = await (0, signup_1.isPhoneExists)(phone);\r\n        if (!phoneExists) {\r\n            return {\r\n                status: false,\r\n                message: \"Phone number not registered!\",\r\n            };\r\n        }\r\n        return {\r\n            status: true,\r\n            message: \"Phone number registered!\",\r\n        };\r\n    };\r\n    recoverPassword = async (body) => {\r\n        try {\r\n            const { phone, password } = body;\r\n            const phoneExists = await (0, signup_1.isPhoneExists)(phone);\r\n            if (!phoneExists) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User with this phone doesn't exists!\",\r\n                };\r\n            }\r\n            const userId = await (0, signup_1.getUserIdByPhone)(phone);\r\n            const recoverRequested = await (0, verify_1.passwordRecoverRequested)(userId);\r\n            if (!recoverRequested) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Recover not requested!\",\r\n                };\r\n            }\r\n            await (0, reset_password_1.changePassword)(userId, password);\r\n            await (0, verify_1.removeRecoverPassword)(userId);\r\n            return {\r\n                status: true,\r\n                message: \"Password recovery completed successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n}\r\nexports.AuthDAO = AuthDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/auth/index.ts?");

/***/ }),

/***/ "./src/db/auth/login/index.ts":
/*!************************************!*\
  !*** ./src/db/auth/login/index.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.checkUserPassword = exports.getUserRole = exports.generateAccessToken = void 0;\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst bcrypt_1 = __importDefault(__webpack_require__(/*! bcrypt */ \"bcrypt\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nfunction generateAccessToken(id, subscription_type) {\r\n    const payload = {\r\n        id,\r\n        subscription_type,\r\n    };\r\n    return jsonwebtoken_1.default.sign(payload, JWT_SECRET, { expiresIn: \"7d\" });\r\n}\r\nexports.generateAccessToken = generateAccessToken;\r\nasync function getUserRole(id) {\r\n    const { rows: list } = await db_1.default.query(`SELECT tb_subscription_type.type as type, tb_user_subscription_type.id as id\n    FROM tb_user_subscription_type\n    JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n    WHERE user_auth_id = $1`, [id]);\r\n    return list[0];\r\n}\r\nexports.getUserRole = getUserRole;\r\nasync function checkUserPassword(id, password) {\r\n    const { rows: list } = await db_1.default.query(\"SELECT password FROM tb_user_auth WHERE id = $1\", [id]);\r\n    const validPassword = await bcrypt_1.default.compare(password, list[0].password);\r\n    return validPassword;\r\n}\r\nexports.checkUserPassword = checkUserPassword;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/auth/login/index.ts?");

/***/ }),

/***/ "./src/db/auth/reset-password/index.ts":
/*!*********************************************!*\
  !*** ./src/db/auth/reset-password/index.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.changePassword = void 0;\r\nconst bcrypt_1 = __importDefault(__webpack_require__(/*! bcrypt */ \"bcrypt\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nconst SALT_ROUNDS = Number(process.env.SALT_ROUNDS) || 10;\r\nasync function changePassword(userId, password) {\r\n    const hashPassword = await bcrypt_1.default.hash(password, SALT_ROUNDS);\r\n    await db_1.default.query(\"UPDATE tb_user_auth SET password = $1 WHERE id = $2\", [\r\n        hashPassword,\r\n        userId,\r\n    ]);\r\n}\r\nexports.changePassword = changePassword;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/auth/reset-password/index.ts?");

/***/ }),

/***/ "./src/db/auth/signup/index.ts":
/*!*************************************!*\
  !*** ./src/db/auth/signup/index.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.isUserWithUsernameExists = exports.isUnverifiedUser = exports.deleteUser = exports.getUserIdByPhone = exports.isPhoneExists = exports.insertPhone = exports.insertAuthUser = void 0;\r\nconst bcrypt_1 = __importDefault(__webpack_require__(/*! bcrypt */ \"bcrypt\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nconst SALT_ROUNDS = Number(process.env.SALT_ROUNDS) || 10;\r\nasync function insertAuthUser(body) {\r\n    const { name, password } = body;\r\n    const hashPassword = await bcrypt_1.default.hash(password, SALT_ROUNDS);\r\n    const { rows: list } = await db_1.default.query(\"INSERT INTO tb_user_auth (name, password, verify) VALUES ($1, $2, $3) RETURNING id\", [name, hashPassword, false]);\r\n    await db_1.default.query(\"INSERT INTO tb_user_coin_balance (user_auth_id) VALUES ($1)\", [list[0].id]);\r\n    return list[0].id;\r\n}\r\nexports.insertAuthUser = insertAuthUser;\r\nasync function insertPhone({ user_id, phone, }) {\r\n    await db_1.default.query(\"INSERT INTO tb_phone (user_auth_id, phone) VALUES ($1, $2)\", [\r\n        user_id,\r\n        phone,\r\n    ]);\r\n}\r\nexports.insertPhone = insertPhone;\r\nasync function isPhoneExists(phone) {\r\n    const { rows: list } = await db_1.default.query(\"SELECT id FROM tb_phone WHERE phone = $1\", [phone]);\r\n    return list.length > 0;\r\n}\r\nexports.isPhoneExists = isPhoneExists;\r\nasync function getUserIdByPhone(phone) {\r\n    const { rows: list } = await db_1.default.query(\"SELECT user_auth_id FROM tb_phone where phone = $1\", [phone]);\r\n    return list[0].user_auth_id;\r\n}\r\nexports.getUserIdByPhone = getUserIdByPhone;\r\nasync function deleteUser(id) {\r\n    await db_1.default.query(\"DELETE FROM tb_phone WHERE user_auth_id = $1\", [id]);\r\n    await db_1.default.query(\"DELETE FROM tb_user_auth WHERE id = $1\", [id]);\r\n}\r\nexports.deleteUser = deleteUser;\r\nasync function isUnverifiedUser(userId) {\r\n    const { rows: list } = await db_1.default.query(\"SELECT * FROM tb_user_auth where id = $1 AND verify = $2\", [userId, false]);\r\n    return list.length > 0;\r\n}\r\nexports.isUnverifiedUser = isUnverifiedUser;\r\nasync function isUserWithUsernameExists(username) {\r\n    const { rows: list } = await db_1.default.query(\"SELECT * FROM tb_user_auth where name = $1\", [username]);\r\n    return list.length > 0;\r\n}\r\nexports.isUserWithUsernameExists = isUserWithUsernameExists;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/auth/signup/index.ts?");

/***/ }),

/***/ "./src/db/auth/verify/index.ts":
/*!*************************************!*\
  !*** ./src/db/auth/verify/index.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.subscribeAsUser = exports.removeRecoverPassword = exports.recoverPassword = exports.passwordRecoverRequested = exports.verifyUser = exports.getSubscriptionTypeId = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nasync function getSubscriptionTypeId(type) {\r\n    const { rows: list } = await db_1.default.query(\"SELECT id FROM tb_subscription_type WHERE type = $1\", [type]);\r\n    return list[0].id;\r\n}\r\nexports.getSubscriptionTypeId = getSubscriptionTypeId;\r\nasync function verifyUser(id) {\r\n    await db_1.default.query(\"UPDATE tb_user_auth SET verify = true WHERE id = $1\", [id]);\r\n}\r\nexports.verifyUser = verifyUser;\r\nasync function passwordRecoverRequested(id) {\r\n    const { rows: passwordRecoveryList } = await db_1.default.query(\"SELECT id FROM tb_password_recover WHERE user_auth_id = $1\", [id]);\r\n    return passwordRecoveryList.length > 0;\r\n}\r\nexports.passwordRecoverRequested = passwordRecoverRequested;\r\nasync function recoverPassword(id) {\r\n    await db_1.default.query(\"INSERT INTO tb_password_recover(user_auth_id) VALUES($1)\", [\r\n        id,\r\n    ]);\r\n}\r\nexports.recoverPassword = recoverPassword;\r\nasync function removeRecoverPassword(id) {\r\n    await db_1.default.query(\"DELETE FROM tb_password_recover WHERE user_auth_id = $1\", [\r\n        id,\r\n    ]);\r\n}\r\nexports.removeRecoverPassword = removeRecoverPassword;\r\nasync function subscribeAsUser(id) {\r\n    const subscriptionTypeId = await getSubscriptionTypeId(\"USER\");\r\n    return await db_1.default.query(\"INSERT INTO tb_user_subscription_type(user_auth_id, subscription_type_id) VALUES($1, $2)\", [id, subscriptionTypeId]);\r\n}\r\nexports.subscribeAsUser = subscribeAsUser;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/auth/verify/index.ts?");

/***/ }),

/***/ "./src/db/banner/index.ts":
/*!********************************!*\
  !*** ./src/db/banner/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BannerDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/banner/query.ts\");\r\nclass BannerDAO {\r\n    banner;\r\n    constructor() {\r\n        this.banner = new query_1.BannerDB();\r\n    }\r\n    get = async (body) => {\r\n        const adminBannerData = await this.banner.get(body);\r\n        return adminBannerData;\r\n    };\r\n    list = async (body) => {\r\n        const adminBannerDataList = await this.banner.list(body);\r\n        return adminBannerDataList;\r\n    };\r\n}\r\nexports.BannerDAO = BannerDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/banner/index.ts?");

/***/ }),

/***/ "./src/db/banner/query.ts":
/*!********************************!*\
  !*** ./src/db/banner/query.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BannerDB = void 0;\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nclass BannerDB {\r\n    async get(body) {\r\n        const { id } = body;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_banner.id,\n        tb_banner.title,\n        tb_banner.description,\n        tb_banner.url as url,\n        tb_banner.start_date,\n        tb_banner.end_date,\n        tb_banner.created_at,\n        jsonb_build_object('url', tb_image.url) as image,\n        json_agg(DISTINCT (tb_platform)) as platform,\n        json_agg(DISTINCT (tb_location)) as location,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category\n      FROM\n        tb_banner\n        LEFT JOIN tb_banner_platform ON tb_banner_platform.banner_id = tb_banner.id\n        LEFT JOIN tb_platform ON tb_platform.id = tb_banner_platform.platform_id\n        LEFT JOIN tb_banner_location ON tb_banner_location.banner_id = tb_banner.id\n        LEFT JOIN tb_location ON tb_location.id = tb_banner_location.location_id\n        LEFT JOIN tb_banner_image ON tb_banner_image.banner_id = tb_banner.id\n        LEFT JOIN tb_image ON tb_image.id = tb_banner_image.image_id\n        LEFT JOIN tb_banner_page_category ON tb_banner_page_category.banner_id = tb_banner.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_banner_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n      WHERE\n        tb_banner.id = $1\n      GROUP BY\n        tb_banner.id,\n        tb_image.id\n      `, [id]);\r\n        return list.length > 0 ? list[0] : null;\r\n    }\r\n    async list(body) {\r\n        const { platform, location, page_category, page } = body;\r\n        const pltfmIdFilter = `${platform ? `tb_banner_platform.platform_id = $1` : `$1`}`;\r\n        const locIdFilter = `${location\r\n            ? `$2 IN (SELECT tb_banner_location.location_id FROM tb_banner_location WHERE tb_banner_location.banner_id = tb_banner.id)`\r\n            : `$2`}`;\r\n        const pageCategoryIdFilter = `${page_category\r\n            ? `$3 IN (SELECT tb_banner_page_category.page_category_id FROM tb_banner_page_category WHERE tb_banner_page_category.banner_id = tb_banner.id)`\r\n            : `$3`}`;\r\n        const pageIdFilter = `${page\r\n            ? `$4 IN (SELECT tb_page.id FROM tb_page\n            LEFT JOIN tb_page_category ON tb_page_category.page_id = tb_page.id\n            LEFT JOIN tb_banner_page_category ON tb_banner_page_category.page_category_id = tb_page_category.id\n            WHERE tb_page_category.page_id = tb_page.id\n            AND tb_banner_page_category.page_category_id = tb_page_category.id \n            AND tb_banner_page_category.banner_id = tb_banner.id)`\r\n            : `$4`}`;\r\n        const finalQuery = `WHERE ${pltfmIdFilter} AND ${locIdFilter} AND ${pageCategoryIdFilter} AND ${pageIdFilter}`;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_banner.id,\n        tb_banner.title,\n        tb_banner.description,\n        tb_banner.url as url,\n        tb_banner.start_date,\n        tb_banner.end_date,\n        tb_banner.created_at,\n        jsonb_build_object('url', tb_image.url) as image,\n        json_agg(DISTINCT (tb_platform)) as platform,\n        json_agg(DISTINCT (tb_location)) as location,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category\n      FROM\n        tb_banner\n        LEFT JOIN tb_banner_platform ON tb_banner_platform.banner_id = tb_banner.id\n        LEFT JOIN tb_platform ON tb_platform.id = tb_banner_platform.platform_id\n        LEFT JOIN tb_banner_location ON tb_banner_location.banner_id = tb_banner.id\n        LEFT JOIN tb_location ON tb_location.id = tb_banner_location.location_id\n        LEFT JOIN tb_banner_image ON tb_banner_image.banner_id = tb_banner.id\n        LEFT JOIN tb_image ON tb_image.id = tb_banner_image.image_id\n        LEFT JOIN tb_banner_page_category ON tb_banner_page_category.banner_id = tb_banner.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_banner_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n      ${finalQuery}\n      GROUP BY\n        tb_banner.id,\n        tb_image.id\n      `, [\r\n            platform || `TRUE`,\r\n            location || `TRUE`,\r\n            page_category || `TRUE`,\r\n            page || `TRUE`,\r\n        ]);\r\n        return list;\r\n    }\r\n}\r\nexports.BannerDB = BannerDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/banner/query.ts?");

/***/ }),

/***/ "./src/db/category/index.ts":
/*!**********************************!*\
  !*** ./src/db/category/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CategoryDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/category/query.ts\");\r\nclass CategoryDAO {\r\n    category;\r\n    constructor() {\r\n        this.category = new query_1.CategoryDB();\r\n    }\r\n    list = async () => {\r\n        const list = await this.category.list();\r\n        return list;\r\n    };\r\n}\r\nexports.CategoryDAO = CategoryDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/category/index.ts?");

/***/ }),

/***/ "./src/db/category/query.ts":
/*!**********************************!*\
  !*** ./src/db/category/query.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CategoryDB = void 0;\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nclass CategoryDB {\r\n    async list() {\r\n        try {\r\n            const { rows: list } = await db_1.default.query(`SELECT tb_post_category.id as id, tb_category.name as name, CONCAT('${process.env.STATIC_HOST}', tb_image.url) as image,\n        json_agg(to_json(json_build_object('id', tb_post_sub_category.id, 'name', tb_sub_category.name))) FILTER (where tb_post_sub_category.id IS NOT NULL) sub_categories\n        FROM tb_post_category\n        JOIN tb_post_category_image ON tb_post_category_image.post_category_id = tb_post_category.id\n        JOIN tb_image ON tb_image.id = tb_post_category_image.image_id\n        LEFT JOIN tb_post_sub_category ON tb_post_sub_category.post_category_id = tb_post_category.id\n        JOIN tb_category ON tb_category.id = tb_post_category.category_id\n        LEFT JOIN tb_category as tb_sub_category ON tb_sub_category.id = tb_post_sub_category.category_id\n        GROUP BY tb_post_category.id, tb_category.id, tb_image.id\n        ORDER BY id`);\r\n            return {\r\n                status: true,\r\n                message: \"Category List\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.CategoryDB = CategoryDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/category/query.ts?");

/***/ }),

/***/ "./src/db/gallery/index.ts":
/*!*********************************!*\
  !*** ./src/db/gallery/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GalleryDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/gallery/query.ts\");\r\nclass GalleryDAO {\r\n    gallery;\r\n    constructor() {\r\n        this.gallery = new query_1.GalleryDB();\r\n    }\r\n    list = async (body) => {\r\n        const result = await this.gallery.list(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.gallery.get(body);\r\n        return result;\r\n    };\r\n    like = async (body) => {\r\n        const result = await this.gallery.like(body);\r\n        return result;\r\n    };\r\n    getBadgeCount = async (session, lastFetchedDate) => {\r\n        const result = await this.gallery.getBadgeCount(session, lastFetchedDate);\r\n        return result;\r\n    };\r\n    view = async (body) => {\r\n        const result = await this.gallery.view(body);\r\n        return result;\r\n    };\r\n}\r\nexports.GalleryDAO = GalleryDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/gallery/index.ts?");

/***/ }),

/***/ "./src/db/gallery/query.ts":
/*!*********************************!*\
  !*** ./src/db/gallery/query.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GalleryDB = void 0;\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst date_fns_1 = __webpack_require__(/*! date-fns */ \"date-fns\");\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\ndotenv_1.default.config();\r\nclass GalleryDB {\r\n    async list(body) {\r\n        const { user_id, page_category_id, current_user_id, publication_type_id, limit, offset, query, sort, order, } = body;\r\n        const userIdFilter = user_id ? `tb_gallery.user_auth_id = $1` : `$1`;\r\n        const pageCategoryIdFilter = page_category_id\r\n            ? `($2 IN (SELECT tb_gallery_page_category.page_category_id\n                  FROM tb_gallery_page_category\n                  WHERE tb_gallery_page_category.gallery_id = tb_gallery.id))`\r\n            : `$2`;\r\n        const sqlquery = query ? \"%\" + query + \"%\" : null;\r\n        const queryFilter = query\r\n            ? ` tb_gallery.title ILIKE $3 OR\n          tb_user_auth.name ILIKE $3 OR\n          tb_subscription_type.type ILIKE $3`\r\n            : `$3`;\r\n        const publicationTypeIdFilter = publication_type_id\r\n            ? `tb_publication_type.id = $4`\r\n            : `$4`;\r\n        let sortBy = `tb_gallery.created_at`;\r\n        switch (sort) {\r\n            case \"time\":\r\n                sortBy = `tb_gallery.created_at`;\r\n                break;\r\n            case \"like\":\r\n                sortBy = `like_count`;\r\n                break;\r\n            case \"view\":\r\n                sortBy = `view_count`;\r\n                break;\r\n        }\r\n        let orderBy = `DESC`;\r\n        switch (order) {\r\n            case \"asc\":\r\n                orderBy = `ASC`;\r\n                break;\r\n            case \"desc\":\r\n                orderBy = `DESC`;\r\n                break;\r\n        }\r\n        const finalQuery = `WHERE ${userIdFilter} AND ${pageCategoryIdFilter} AND ${queryFilter} AND ${publicationTypeIdFilter}`;\r\n        const values = [\r\n            user_id || `TRUE`,\r\n            page_category_id || `TRUE`,\r\n            sqlquery || `TRUE`,\r\n            publication_type_id || `TRUE`,\r\n            limit,\r\n            offset || 0,\r\n        ];\r\n        if (current_user_id) {\r\n            values.push(current_user_id);\r\n        }\r\n        const isLikedParam = current_user_id\r\n            ? `CAST(\n        COALESCE(\n          (\n            SELECT\n              count(tb_user_image_like.id)\n            FROM\n              tb_user_image_like\n            WHERE\n              tb_user_image_like.user_auth_id = $7\n          ),\n          '0'\n        ) as INTEGER\n      ) as is_liked,`\r\n            : ``;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_gallery.id,\n        CAST(COUNT(tb_gallery.id) OVER() AS INTEGER) as items_full_count,\n        tb_gallery.title,\n        jsonb_build_object(\n          'id',\n          tb_user_auth.id,\n          'name',\n          tb_user_auth.name,\n          'avatar_image',\n          jsonb_build_object('url', user_auth_avatar_image_image.url),\n          'role',\n          tb_subscription_type.type\n        ) as user,\n        jsonb_build_object('url', tb_image_avatar.url) as avatar_image,\n        CAST(SUM(COUNT(tb_user_image_like.id)) OVER (PARTITION BY tb_gallery.id) as INTEGER) as like_count,\n        CAST(SUM(tb_user_image.viewed_count) as INTEGER) as view_count,\n        CAST(COUNT(distinct tb_user_image.id) as INTEGER) as image_count,\n        json_agg(\n          DISTINCT jsonb_build_object(\n            'id',\n            tb_page_category.id,\n            'page',\n            tb_page,\n            'category',\n            tb_category,\n            'image',\n            jsonb_build_object('url', page_category_tb_image.url)\n          )\n        ) as page_category,\n        ${isLikedParam}\n        tb_gallery.created_at\n      FROM\n        tb_gallery\n        LEFT JOIN tb_gallery_user_image ON tb_gallery_user_image.gallery_id = tb_gallery.id\n        LEFT JOIN tb_user_image ON tb_user_image.id = tb_gallery_user_image.user_image_id\n        LEFT JOIN tb_user_image_like ON tb_user_image_like.user_image_id = tb_user_image.id\n\n        LEFT JOIN tb_user_image_publication_type ON tb_user_image_publication_type.user_image_id = tb_user_image.id\n        LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_image_publication_type.publication_type_id\n        \n\n        LEFT JOIN tb_image as tb_image_avatar ON tb_image_avatar.id = tb_gallery.image_id\n        LEFT JOIN tb_image ON tb_image.id = tb_user_image.image_id\n        LEFT JOIN tb_gallery_page_category ON tb_gallery_page_category.gallery_id = tb_gallery.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_gallery_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_gallery.user_auth_id\n        LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n        LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      ${finalQuery}\n      GROUP BY\n        tb_gallery.id,\n        tb_image_avatar.url,\n        tb_user_auth.id,\n        user_auth_avatar_image_image.url,\n        tb_subscription_type.type\n      ORDER BY\n        ${sortBy} ${orderBy}\n      LIMIT $5\n      OFFSET $6\n      `, values);\r\n        return list;\r\n    }\r\n    async getBadgeCount(session, lastFetchedDate) {\r\n        try {\r\n            if (lastFetchedDate) {\r\n                const date = (0, date_fns_1.format)((0, date_fns_1.fromUnixTime)(Math.floor(lastFetchedDate) / 1000), \"yyyy-MM-dd HH:mm:ss\");\r\n                const { rowCount: count } = await db_1.default.query(\"SELECT id FROM tb_gallery WHERE created_at BETWEEN $1 AND NOW()\", [date]);\r\n                return {\r\n                    status: true,\r\n                    message: \"Gallery badge count\",\r\n                    data: {\r\n                        count: count > 0 ? count - 1 : count,\r\n                    },\r\n                };\r\n            }\r\n            if (session && session.last_fetched_gallery_date) {\r\n                const date = (0, date_fns_1.format)((0, date_fns_1.fromUnixTime)(Math.floor(session.last_fetched_gallery_date) / 1000), \"yyyy-MM-dd HH:mm:ss\");\r\n                const { rowCount: count } = await db_1.default.query(\"SELECT id FROM tb_gallery WHERE created_at BETWEEN $1 AND NOW()\", [date]);\r\n                return {\r\n                    status: true,\r\n                    message: \"Gallery badge count\",\r\n                    data: {\r\n                        count: count > 0 ? count - 1 : count,\r\n                    },\r\n                };\r\n            }\r\n            const { rowCount: count } = await db_1.default.query(\"SELECT id FROM tb_gallery\");\r\n            return {\r\n                status: true,\r\n                message: \"Gallery badge count\",\r\n                data: {\r\n                    count,\r\n                },\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(body) {\r\n        const { id, current_user_id } = body;\r\n        const values = [id];\r\n        if (current_user_id) {\r\n            values.push(current_user_id);\r\n        }\r\n        const isLikedParam = current_user_id\r\n            ? `'is_liked', CAST(\n        COALESCE(\n          (\n            SELECT\n              count(tb_user_image_like.id)\n            FROM\n              tb_user_image_like\n            WHERE\n              tb_user_image_like.user_image_id = tb_user_image.id AND tb_user_image_like.user_auth_id = $2\n          ),\n          '0'\n        ) as INTEGER\n      ),`\r\n            : ``;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_gallery.id,\n        tb_gallery.title,\n        jsonb_build_object(\n          'id', tb_user_auth.id,\n          'name', tb_user_auth.name,\n          'avatar_image', \n          jsonb_build_object('url', user_auth_avatar_image_image.url),\n          'role', tb_subscription_type.type\n        ) as user,\n        jsonb_build_object('url', tb_image_avatar.url) as avatar_image,\n        json_agg(\n          jsonb_build_object(\n            'id',\n            tb_user_image.id,\n            'view_count',\n            tb_user_image.viewed_count,\n            'user_id',\n            tb_user_image.user_auth_id,\n            'url',\n            tb_image.url,\n            'created_at',\n            tb_user_image.created_at,\n            'publication_type',\n            (\n              SELECT\n                to_json(tb_publication_type.*)\n              FROM\n                tb_publication_type\n              WHERE\n                tb_publication_type.id = tb_user_image_publication_type.publication_type_id\n              LIMIT 1\n            ),\n            ${isLikedParam}\n            'like_count',\n            CAST(\n              COALESCE(\n                (\n                  SELECT\n                    count(tb_user_image_like.id)\n                  FROM\n                    tb_user_image_like\n                  WHERE\n                    tb_user_image_like.user_image_id = tb_user_image.id\n                ),\n                '0'\n              ) as INTEGER\n            )\n          )\n        ) as images,\n        json_agg(DISTINCT jsonb_build_object(\n          'id',\n          tb_page_category.id,\n          'page',\n          tb_page,\n          'category',\n          tb_category,\n          'image',\n          jsonb_build_object('url', page_category_tb_image.url)\n        )) as page_category,\n        tb_gallery.created_at\n      FROM\n        tb_gallery\n        LEFT JOIN tb_gallery_user_image ON tb_gallery_user_image.gallery_id = tb_gallery.id\n        LEFT JOIN tb_user_image ON tb_user_image.id = tb_gallery_user_image.user_image_id\n        LEFT JOIN tb_user_image_publication_type ON tb_user_image_publication_type.user_image_id = tb_user_image.id\n        LEFT JOIN tb_image as tb_image_avatar ON tb_image_avatar.id = tb_gallery.image_id\n        LEFT JOIN tb_image ON tb_image.id = tb_user_image.image_id\n        LEFT JOIN tb_gallery_page_category ON tb_gallery_page_category.gallery_id = tb_gallery.id\n        LEFT JOIN tb_page_category ON tb_page_category.id = tb_gallery_page_category.page_category_id\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_gallery.user_auth_id\n        LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n        LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_gallery.user_auth_id\n        LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      WHERE\n        tb_gallery.id = $1\n      GROUP BY\n        tb_gallery.id,\n        tb_image_avatar.url,\n        tb_user_auth.id,\n        user_auth_avatar_image_image.url,\n        tb_subscription_type.type\n      ORDER BY\n        tb_gallery.id\n      `, values);\r\n        return list[0];\r\n    }\r\n    async like(body) {\r\n        try {\r\n            const { id, current_user_id } = body;\r\n            const { rows: userImageLikeList } = await db_1.default.query(`\n        SELECT\n          *\n        FROM\n          tb_user_image_like\n        WHERE\n          tb_user_image_like.user_image_id = $1\n          AND tb_user_image_like.user_auth_id = $2\n        `, [id, current_user_id]);\r\n            if (userImageLikeList.length > 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User already liked the photo\",\r\n                };\r\n            }\r\n            await db_1.default.query(`INSERT INTO tb_user_image_like (user_auth_id, user_image_id) VALUES($1, $2)`, [current_user_id, id]);\r\n            const { rows: tb_publication_type_like_amount } = await db_1.default.query(`\n        SELECT \n          tb_publication_type_like_amount.*\n        FROM\n          tb_user_image_publication_type\n        LEFT JOIN tb_publication_type_like_amount ON tb_publication_type_like_amount.publication_type_id = tb_user_image_publication_type.publication_type_id\n        WHERE\n            tb_user_image_publication_type.user_image_id = $1\n        `, [id]);\r\n            tb_publication_type_like_amount.map(async (elem) => await db_1.default.query(`\n            WITH x AS (\n              UPDATE\n                tb_user_coin_balance SET balance = balance + $1\n              WHERE\n                tb_user_coin_balance.user_auth_id = $2\n              RETURNING tb_user_coin_balance.id\n            )\n            UPDATE\n              tb_user_coin_balance_statistics\n            SET\n              like_coin = like_coin + CAST(COALESCE($1, '0') as FLOAT),\n              last_modified = CURRENT_TIMESTAMP\n            FROM\n              x\n            WHERE\n              tb_user_coin_balance_statistics.coin_balance_id = x.id\n            `, [elem.amount, current_user_id]));\r\n            return {\r\n                status: true,\r\n                message: \"Photo was liked successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async view(body) {\r\n        try {\r\n            const { id } = body;\r\n            await db_1.default.query(`\n        UPDATE\n          tb_user_image SET viewed_count = viewed_count + 1\n        WHERE\n          tb_user_image.id = $1\n        `, [id]);\r\n            return {\r\n                status: true,\r\n                message: \"Photo was viewed successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.GalleryDB = GalleryDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/gallery/query.ts?");

/***/ }),

/***/ "./src/db/home.ts":
/*!************************!*\
  !*** ./src/db/home.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HomeDAO = void 0;\r\nconst config_1 = __importDefault(__webpack_require__(/*! @/config */ \"./src/config/index.ts\"));\r\nclass HomeDAO {\r\n    get = (key) => {\r\n        if (!key) {\r\n            return Promise.resolve(config_1.default.APP);\r\n        }\r\n        const upperKey = key.toUpperCase();\r\n        return Promise.resolve({ [upperKey]: config_1.default.APP[upperKey] });\r\n    };\r\n}\r\nexports.HomeDAO = HomeDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/home.ts?");

/***/ }),

/***/ "./src/db/location/index.ts":
/*!**********************************!*\
  !*** ./src/db/location/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LocationDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/location/query.ts\");\r\nclass LocationDAO {\r\n    location;\r\n    constructor() {\r\n        this.location = new query_1.LocationDB();\r\n    }\r\n    list = async () => {\r\n        const list = await this.location.list();\r\n        return list;\r\n    };\r\n}\r\nexports.LocationDAO = LocationDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/location/index.ts?");

/***/ }),

/***/ "./src/db/location/query.ts":
/*!**********************************!*\
  !*** ./src/db/location/query.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LocationDB = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass LocationDB {\r\n    async list() {\r\n        const { rows: list } = await db_1.default.query(\"SELECT id, display_name as name FROM tb_location\");\r\n        return list;\r\n    }\r\n}\r\nexports.LocationDB = LocationDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/location/query.ts?");

/***/ }),

/***/ "./src/db/page-category/index.ts":
/*!***************************************!*\
  !*** ./src/db/page-category/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserPageCategoryDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/page-category/utils.ts\");\r\nclass UserPageCategoryDAO {\r\n    pageCategory;\r\n    constructor() {\r\n        this.pageCategory = new utils_1.PageCategoryDB();\r\n    }\r\n    get = async (body) => {\r\n        const result = await this.pageCategory.get(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.pageCategory.list(body);\r\n        return result;\r\n    };\r\n}\r\nexports.UserPageCategoryDAO = UserPageCategoryDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/page-category/index.ts?");

/***/ }),

/***/ "./src/db/page-category/utils.ts":
/*!***************************************!*\
  !*** ./src/db/page-category/utils.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PageCategoryDB = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PageCategoryDB {\r\n    async get(query) {\r\n        const { id } = query;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_page_category.id as id,\n        to_json(tb_page) as page,\n        to_json(tb_category) as category,\n        jsonb_build_object('url', tb_image.url) as image,\n        jsonb_build_object(\n          'video_count', CAST(COALESCE(tb_page_category_statistic.video_count, '0') AS INTEGER),\n          'gallery_count', CAST(COALESCE(tb_page_category_statistic.gallery_count, '0') AS INTEGER)\n        ) as statistics\n      FROM\n        tb_page_category\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image ON tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_page_category_statistic ON tb_page_category_statistic.page_category_id = tb_page_category.id\n      WHERE\n        tb_page_category.id = $1\n      `, [id]);\r\n        return list[0];\r\n    }\r\n    async list(query) {\r\n        const { page_id } = query;\r\n        const pageIdFilter = page_id ? `tb_page_category.page_id = $1` : `$1`;\r\n        const finalQuery = `WHERE ${pageIdFilter}`;\r\n        const { rows: list } = await db_1.default.query(`\n      SELECT\n        tb_page_category.id as id,\n        to_json(tb_page) as page,\n        to_json(tb_category) as category,\n        jsonb_build_object('url', tb_image.url) as image,\n        jsonb_build_object(\n          'video_count', CAST(COALESCE(tb_page_category_statistic.video_count, '0') AS INTEGER),\n          'gallery_count', CAST(COALESCE(tb_page_category_statistic.gallery_count, '0') AS INTEGER)\n        ) as statistics\n      FROM\n        tb_page_category\n        LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n        LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n        LEFT JOIN tb_image ON tb_image.id = tb_page_category.image_id\n        LEFT JOIN tb_page_category_statistic ON tb_page_category_statistic.page_category_id = tb_page_category.id\n      ${finalQuery}\n      `, [page_id || `TRUE`]);\r\n        return list;\r\n    }\r\n}\r\nexports.PageCategoryDB = PageCategoryDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/page-category/utils.ts?");

/***/ }),

/***/ "./src/db/page/index.ts":
/*!******************************!*\
  !*** ./src/db/page/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PageDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/page/query.ts\");\r\nclass PageDAO {\r\n    page;\r\n    constructor() {\r\n        this.page = new query_1.PageDB();\r\n    }\r\n    list = async () => {\r\n        const list = await this.page.list();\r\n        return list;\r\n    };\r\n}\r\nexports.PageDAO = PageDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/page/index.ts?");

/***/ }),

/***/ "./src/db/page/query.ts":
/*!******************************!*\
  !*** ./src/db/page/query.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PageDB = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PageDB {\r\n    async list() {\r\n        const { rows: list } = await db_1.default.query(\"SELECT id, name FROM tb_page\");\r\n        return list;\r\n    }\r\n}\r\nexports.PageDB = PageDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/page/query.ts?");

/***/ }),

/***/ "./src/db/payment/index.ts":
/*!*********************************!*\
  !*** ./src/db/payment/index.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PaymentDAO = void 0;\r\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PaymentDAO {\r\n    list = async () => {\r\n        const { rows: list } = await db_1.default.query(`SELECT tb_payment.id as id, tb_image.url as image, tb_payment.amount as amount, tb_payment.price as price\n        FROM tb_payment\n        JOIN tb_payment_image ON tb_payment_image.payment_id = tb_payment.id\n        JOIN tb_image ON tb_image.id = tb_payment_image.image_id`);\r\n        return {\r\n            status: true,\r\n            message: \"Payment list\",\r\n            data: list,\r\n        };\r\n    };\r\n    status = async (userId, orderId) => {\r\n        try {\r\n            const { rows: userPaymentList } = await db_1.default.query(\"SELECT id, payment_id FROM tb_user_payment WHERE user_auth_id = $1 AND order_id = $2\", [userId, orderId]);\r\n            const userPayment = userPaymentList[0];\r\n            if (!userPayment) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Order with given id doesn't exists!\",\r\n                };\r\n            }\r\n            const res = await axios_1.default.get(`https://mpi.gov.tm/payment/rest/getOrderStatus.do?orderId=${orderId}&language=ru&password=KUfd53Gdfejg2Sb&userName=209122507205`);\r\n            if (res.data.orderStatus !== 2) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Payment doesn't made!\",\r\n                };\r\n            }\r\n            await db_1.default.query(\"UPDATE tb_user_payment SET status = TRUE WHERE id = $1\", [\r\n                userPayment.id,\r\n            ]);\r\n            const { rows: paymentList } = await db_1.default.query(\"SELECT amount FROM tb_payment WHERE id = $1\", [userPayment.payment_id]);\r\n            const amount = paymentList[0].amount;\r\n            await db_1.default.query(\"UPDATE tb_user_coin_balance SET balance = balance + $1 WHERE user_auth_id = $2\", [amount, userId]);\r\n            return {\r\n                status: true,\r\n                message: \"Payment successfully completed!\",\r\n                data: res.data,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n    post = async (paymentId, userId) => {\r\n        try {\r\n            const { rows: paymentList } = await db_1.default.query(\"SELECT * FROM tb_payment WHERE id = $1\", [paymentId]);\r\n            const payment = paymentList[0];\r\n            if (!payment) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Payment doesn't exist!\",\r\n                };\r\n            }\r\n            const { rows: orderNumberList } = await db_1.default.query(\"SELECT order_number FROM tb_payment_order_number ORDER BY created_at DESC LIMIT 1\");\r\n            const orderNumber = orderNumberList[0].order_number;\r\n            console.log(Number(orderNumber) + 1, payment.price * 100);\r\n            const res = await axios_1.default.get(`https://mpi.gov.tm/payment/rest/register.do?orderNumber=${Number(orderNumber) + 1}&amount=${payment.price * 100}&currency=934&language=ru&password=KUfd53Gdfejg2Sb&returnUrl=/payment/finish&userName=209122507205&pageView=DESKTOP&description=Arzan TM maglumat platformasynda hyzmat satyn almak üçin&sessionTimeoutSecs=300`);\r\n            await db_1.default.query(\"INSERT INTO tb_payment_order_number(order_number) VALUES($1)\", [Number(orderNumber) + 1]);\r\n            await db_1.default.query(\"INSERT INTO tb_user_payment(order_id, user_auth_id, payment_id) VALUES($1, $2, $3)\", [res.data.orderId, userId, paymentId]);\r\n            return {\r\n                status: true,\r\n                message: \"Payment form\",\r\n                data: res.data,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n}\r\nexports.PaymentDAO = PaymentDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/payment/index.ts?");

/***/ }),

/***/ "./src/db/platform/index.ts":
/*!**********************************!*\
  !*** ./src/db/platform/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PlatformDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/platform/query.ts\");\r\nclass PlatformDAO {\r\n    platform;\r\n    constructor() {\r\n        this.platform = new query_1.PlatformDB();\r\n    }\r\n    list = async () => {\r\n        const list = await this.platform.list();\r\n        return list;\r\n    };\r\n}\r\nexports.PlatformDAO = PlatformDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/platform/index.ts?");

/***/ }),

/***/ "./src/db/platform/query.ts":
/*!**********************************!*\
  !*** ./src/db/platform/query.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PlatformDB = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PlatformDB {\r\n    async list() {\r\n        const { rows: list } = await db_1.default.query(\"SELECT id, name FROM tb_platform\");\r\n        return list;\r\n    }\r\n}\r\nexports.PlatformDB = PlatformDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/platform/query.ts?");

/***/ }),

/***/ "./src/db/post/index.ts":
/*!******************************!*\
  !*** ./src/db/post/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PostDAO = void 0;\r\nconst query_1 = __webpack_require__(/*! ./query */ \"./src/db/post/query.ts\");\r\nclass PostDAO {\r\n    postDB;\r\n    constructor() {\r\n        this.postDB = new query_1.PostDB();\r\n    }\r\n    post = async (body, images, userId) => {\r\n        const result = await this.postDB.post(body, images, userId);\r\n        return result;\r\n    };\r\n    list = async (query) => {\r\n        const result = await this.postDB.list(query);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.postDB.get(body);\r\n        return result;\r\n    };\r\n    like = async (body) => {\r\n        const result = await this.postDB.like(body);\r\n        return result;\r\n    };\r\n    getBadgeCount = async (session, lastFetchedDate, publicationTypeId) => {\r\n        const result = await this.postDB.getBadgeCount(session, lastFetchedDate, publicationTypeId);\r\n        return result;\r\n    };\r\n    view = async (body) => {\r\n        const result = await this.postDB.view(body);\r\n        return result;\r\n    };\r\n    delete = async (body) => {\r\n        const result = await this.postDB.delete(body);\r\n        return result;\r\n    };\r\n    update = async (body) => {\r\n        const result = await this.postDB.update(body);\r\n        return result;\r\n    };\r\n}\r\nexports.PostDAO = PostDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/post/index.ts?");

/***/ }),

/***/ "./src/db/post/query.ts":
/*!******************************!*\
  !*** ./src/db/post/query.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PostDB = void 0;\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"fs-extra\"));\r\nconst date_fns_1 = __webpack_require__(/*! date-fns */ \"date-fns\");\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass PostDB {\r\n    async post(body, images, userId) {\r\n        try {\r\n            const { title, description, price, phone, discount, tags, category_id, sub_category_id, start_date, end_date, } = body;\r\n            const { rows: postList } = await db_1.default.query(`INSERT INTO\n        tb_post(user_auth_id, title, description, price, phone, discount, post_category_id, post_sub_category_id, start_date, end_date)\n        VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n        RETURNING id`, [\r\n                userId,\r\n                title,\r\n                description,\r\n                price,\r\n                phone,\r\n                discount,\r\n                category_id,\r\n                sub_category_id,\r\n                start_date,\r\n                end_date,\r\n            ]);\r\n            const postId = postList[0].id;\r\n            if (tags.length > 0) {\r\n                const { rows: tagList } = await db_1.default.query(`INSERT INTO tb_tag(name) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id`, [JSON.parse(tags)]);\r\n                const tagIds = tagList.reduce((acc, curValue) => {\r\n                    return [...acc, curValue.id];\r\n                }, []);\r\n                await db_1.default.query(`INSERT INTO tb_post_tag(post_id, tag_id) SELECT $1, unnest(ARRAY[$2::int[]])`, [postId, tagIds]);\r\n            }\r\n            const { rows: imageList } = await db_1.default.query(\"INSERT INTO tb_image(url) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id\", [images]);\r\n            const imageIds = imageList.reduce((acc, curValue) => {\r\n                return [...acc, curValue.id];\r\n            }, []);\r\n            await db_1.default.query(\"INSERT INTO tb_post_image(post_id, image_id) SELECT $1, unnest($2::int[])\", [postId, imageIds]);\r\n            await db_1.default.query(`INSERT INTO tb_post_publication_type(post_id, publication_type_id) values($1, $2)`, [postId, 1]);\r\n            return {\r\n                status: true,\r\n                message: \"Post created successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async list(body) {\r\n        try {\r\n            const { category_id, sub_category_id, publication_type_id, user_id, current_user_id, limit, offset, query, sort, order, status, } = body;\r\n            const categoryFilter = category_id\r\n                ? \"tb_post.post_category_id = $1\"\r\n                : \"$1\";\r\n            const subCategoryFilter = sub_category_id\r\n                ? \"tb_post.post_sub_category_id = $2\"\r\n                : \"$2\";\r\n            const userIdFilter = user_id ? \"tb_post.user_auth_id = $3\" : \"$3\";\r\n            const sqlquery = query ? \"%\" + query + \"%\" : null;\r\n            const queryFilter = query\r\n                ? ` tb_post.title ILIKE $4 OR\n            tb_post.description ILIKE $4 OR\n            tb_user_auth.name ILIKE $4`\r\n                : `$4`;\r\n            const publicationTypeIdFilter = publication_type_id\r\n                ? `tb_publication_type.id = $5`\r\n                : `$5`;\r\n            let statusFilter = `tb_post.approved = TRUE`;\r\n            switch (status) {\r\n                case \"waiting\":\r\n                    statusFilter = `tb_post.waiting = TRUE`;\r\n                    break;\r\n                case \"approved\":\r\n                    statusFilter = `tb_post.approved = TRUE`;\r\n                    break;\r\n                case \"declined\":\r\n                    statusFilter = `tb_post.waiting = FALSE AND tb_post.approved = FALSE`;\r\n                    break;\r\n            }\r\n            let sortBy = `tb_post.created_at`;\r\n            switch (sort) {\r\n                case \"time\":\r\n                    sortBy = `tb_post.created_at`;\r\n                    break;\r\n                case \"like\":\r\n                    sortBy = `like_count`;\r\n                    break;\r\n                case \"view\":\r\n                    sortBy = `tb_post.viewed_count`;\r\n                    break;\r\n            }\r\n            let orderBy = `DESC`;\r\n            switch (order) {\r\n                case \"asc\":\r\n                    orderBy = `ASC`;\r\n                    break;\r\n                case \"desc\":\r\n                    orderBy = `DESC`;\r\n                    break;\r\n            }\r\n            const values = [\r\n                category_id || \"TRUE\",\r\n                sub_category_id || \"TRUE\",\r\n                user_id || \"TRUE\",\r\n                sqlquery || `TRUE`,\r\n                publication_type_id || `TRUE`,\r\n                limit,\r\n                offset || 0,\r\n            ];\r\n            const filterQuery = `WHERE ${categoryFilter} AND ${subCategoryFilter} AND ${userIdFilter} AND ${queryFilter} AND ${publicationTypeIdFilter} AND ${statusFilter}`;\r\n            if (current_user_id) {\r\n                values.push(current_user_id);\r\n            }\r\n            const isLikedParam = current_user_id\r\n                ? `CAST(COALESCE((SELECT count(tb_post_like.id) FROM tb_post_like WHERE tb_post_like.post_id = tb_post.id AND tb_post_like.user_auth_id = $8), '0') as INTEGER) as is_liked,`\r\n                : ``;\r\n            const { rows: list } = await db_1.default.query(`\n        SELECT\n          tb_post.id as id,\n          CAST(COUNT(tb_post.id) OVER() AS INTEGER) as items_full_count,\n          tb_post.title as title,\n          tb_post.description as description,\n          tb_image.url as image,\n          tb_post.viewed_count as viewed_count,\n          tb_post.price as price,\n          tb_post.discount as discount,\n          tb_post.created_at as created_at,\n          jsonb_build_object(\n            'id', tb_user_auth.id,\n            'name', tb_user_auth.name,\n            'avatar_image',\n            jsonb_build_object('url', user_auth_avatar_image_image.url),\n            'role', tb_subscription_type.type\n          ) as user,\n          tb_post_like_statistic.like_count as like_count,\n          ${isLikedParam}\n          to_json(tb_publication_type) as publication_type\n        FROM\n          tb_post\n          LEFT JOIN tb_post_publication_type ON tb_post_publication_type.post_id = tb_post.id\n          LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_post_publication_type.publication_type_id\n        \n          LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_post.user_auth_id\n          LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_post.user_auth_id\n          LEFT JOIN tb_image as user_auth_avatar_image_image ON user_auth_avatar_image_image.id = tb_user_auth_avatar_image.image_id\n          \n          LEFT JOIN tb_post_like_statistic ON tb_post_like_statistic.post_id = tb_post.id\n          LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_post.user_auth_id\n          LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n      \n          LEFT JOIN LATERAL (\n            SELECT\n              post_id,\n              image_id\n            FROM\n              tb_post_image\n            WHERE\n              tb_post_image.post_id = tb_post.id\n            limit\n              1\n          ) tb_post_image ON true\n          JOIN tb_image ON tb_image.id = tb_post_image.image_id\n        ${filterQuery}\n        GROUP BY\n          tb_post.id,\n          tb_user_auth.id,\n          tb_image.url,\n          user_auth_avatar_image_image.url,\n          tb_subscription_type.type,\n          tb_post_like_statistic.like_count,\n          tb_publication_type\n        ORDER BY\n          ${sortBy} ${orderBy}\n        LIMIT $6\n        OFFSET $7\n        `, values);\r\n            return {\r\n                status: true,\r\n                message: \"Post list\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async getBadgeCount(session, lastFetchedDate, publicationTypeId) {\r\n        try {\r\n            const publicationTypeFilter = publicationTypeId === 3\r\n                ? \"tb_post_publication_type.publication_type_id = 3\"\r\n                : \"tb_post_publication_type.publication_type_id != 3\";\r\n            const lastFetched = publicationTypeId === 3\r\n                ? session.last_fetched_selected_post_date\r\n                : session.last_fetched_post_date;\r\n            const filterQuery = `${publicationTypeFilter}`;\r\n            if (lastFetchedDate) {\r\n                const date = (0, date_fns_1.format)((0, date_fns_1.fromUnixTime)(Math.floor(lastFetchedDate / 1000)), \"yyyy-MM-dd HH:mm:ss\");\r\n                const { rowCount: count } = await db_1.default.query(`SELECT tb_post.id as id\n          FROM tb_post\n          JOIN tb_post_publication_type ON tb_post_publication_type.post_id = tb_post.id\n          WHERE\n          created_at BETWEEN $1 AND NOW()\n          AND\n          approved = TRUE\n          AND\n          ${filterQuery}\n          `, [date]);\r\n                return {\r\n                    status: true,\r\n                    message: \"Post badge count\",\r\n                    data: {\r\n                        count: count > 0 ? count - 1 : count,\r\n                    },\r\n                };\r\n            }\r\n            if (session && lastFetched) {\r\n                const date = (0, date_fns_1.format)((0, date_fns_1.fromUnixTime)(Math.floor(lastFetched / 1000)), \"yyyy-MM-dd HH:mm:ss\");\r\n                const { rowCount: count } = await db_1.default.query(`SELECT tb_post.id as id\n          FROM tb_post\n          JOIN tb_post_publication_type ON tb_post_publication_type.post_id = tb_post.id\n          WHERE\n          created_at BETWEEN $1 AND NOW()\n          AND\n          approved = TRUE\n          AND\n          ${filterQuery}`, [date]);\r\n                return {\r\n                    status: true,\r\n                    message: \"Post badge count\",\r\n                    data: {\r\n                        count: count > 0 ? count - 1 : count,\r\n                    },\r\n                };\r\n            }\r\n            const { rowCount: count } = await db_1.default.query(`SELECT tb_post.id as id\n        FROM tb_post\n        JOIN tb_post_publication_type ON tb_post_publication_type.post_id = tb_post.id\n        WHERE\n        approved = TRUE\n        AND\n        ${filterQuery}`);\r\n            return {\r\n                status: true,\r\n                message: \"Post badge count\",\r\n                data: {\r\n                    count,\r\n                },\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async get(body) {\r\n        try {\r\n            const { id, current_user_id } = body;\r\n            const values = [];\r\n            if (current_user_id) {\r\n                values.push(current_user_id);\r\n            }\r\n            const isLikedParam = current_user_id\r\n                ? `CAST(COALESCE((SELECT count(tb_post_like.id) FROM tb_post_like WHERE tb_post_like.post_id = tb_post.id AND tb_post_like.user_auth_id = $2), '0') as INTEGER) as is_liked,`\r\n                : ``;\r\n            const { rows: list } = await db_1.default.query(`\n        SELECT\n          tb_post.id as id,\n          tb_post.title as title,\n          tb_post.description as description,\n          json_agg(DISTINCT tb_image.*) images,\n          json_agg(DISTINCT tb_tag.*) tags,\n          json_build_object(\n            'id', tb_user_auth.id,\n            'name', tb_user_auth.name,\n            'role', tb_subscription_type.type,\n            'avatar_image', jsonb_build_object('url', tb_user_image.url)\n          ) as user,\n          tb_post.phone as phone,\n          tb_post.viewed_count as viewed_count,\n          tb_post.price as price,\n          tb_post.discount as discount,\n          tb_post.created_at as created_at,\n          tb_post.start_date as start_date,\n          tb_post.end_date as end_date,\n          tb_post_like_statistic.like_count as like_count,\n          tb_post.next_id as next_id,\n          tb_post.prev_id as prev_id,\n          ${isLikedParam}\n          to_json(tb_publication_type) as publication_type\n        FROM (\n          select\n            id,\n            user_auth_id,\n            title,\n            description,\n            phone,\n            viewed_count,\n            price,\n            discount,\n            created_at,\n            start_date,\n            end_date,\n            lag(id) over (\n              order by\n                id\n            ) as prev_id,\n            lead(id) over (\n              order by\n                id\n            ) as next_id\n          from\n            tb_post\n          WHERE tb_post.approved = TRUE\n          ) as tb_post\n\n          LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_post.user_auth_id\n          LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_auth.id\n          LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n\n          LEFT JOIN tb_post_like_statistic ON tb_post_like_statistic.post_id = tb_post.id\n          LEFT JOIN tb_post_publication_type ON tb_post_publication_type.post_id = tb_post.id\n          LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_post_publication_type.publication_type_id\n\n          LEFT JOIN LATERAL (\n            SELECT\n              tb_tag.id as id,\n              tb_tag.name as name\n            FROM\n              tb_post_tag\n            JOIN tb_tag ON tb_post_tag.tag_id = tb_tag.id\n            WHERE\n              tb_post_tag.post_id = tb_post.id\n          ) tb_tag ON true\n\n          LEFT JOIN LATERAL (\n            SELECT\n              tb_image.id as id,\n              tb_image.url as url\n            FROM\n              tb_post_image\n            JOIN tb_image ON tb_post_image.image_id = tb_image.id\n            WHERE\n              tb_post_image.post_id = tb_post.id\n          ) tb_image ON true\n          \n          LEFT JOIN LATERAL (\n            SELECT\n              tb_image.url as url\n            FROM tb_user_auth_avatar_image\n            JOIN tb_image ON tb_user_auth_avatar_image.image_id = tb_image.id\n            WHERE\n              tb_user_auth_avatar_image.user_auth_id = tb_post.user_auth_id\n          ) tb_user_image ON true\n\n        WHERE\n          tb_post.id = $1\n        GROUP BY\n          tb_post.id,\n          tb_post.title,\n          tb_post.description,\n          tb_post.phone,\n          tb_post.viewed_count,\n          tb_post.price,\n          tb_post.discount,\n          tb_post.next_id,\n          tb_post.prev_id,\n          tb_post.created_at,\n          tb_post.start_date,\n          tb_post.end_date,\n          tb_user_auth.id,\n          tb_user_image.url,\n          tb_post_like_statistic.like_count,\n          tb_subscription_type.type,\n          tb_publication_type.*\n        ORDER BY\n          created_at DESC\n        `, [id, ...values]);\r\n            if (list.length === 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Post doesn't exists!\",\r\n                };\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Post\",\r\n                data: list[0],\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async like(body) {\r\n        try {\r\n            const { id, current_user_id } = body;\r\n            const { rows: likeList } = await db_1.default.query(`SELECT * FROM tb_post_like WHERE tb_post_like.post_id = $1 AND tb_post_like.user_auth_id = $2`, [id, current_user_id]);\r\n            if (likeList.length > 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User already liked the post\",\r\n                };\r\n            }\r\n            await db_1.default.query(`INSERT INTO tb_post_like (user_auth_id, post_id) VALUES($1, $2)`, [current_user_id, id]);\r\n            const { rows: tb_publication_type_like_amount } = await db_1.default.query(`\n        SELECT \n          tb_publication_type_like_amount.*\n        FROM\n          tb_post_publication_type\n        LEFT JOIN tb_publication_type_like_amount ON tb_publication_type_like_amount.publication_type_id = tb_post_publication_type.publication_type_id\n        WHERE\n            tb_post_publication_type.post_id = $1\n        `, [id]);\r\n            tb_publication_type_like_amount.map(async (elem) => await db_1.default.query(`\n            WITH x AS (\n              UPDATE\n                tb_user_coin_balance SET balance = balance + $1\n              WHERE\n                tb_user_coin_balance.user_auth_id = $2\n              RETURNING tb_user_coin_balance.id\n            )\n            UPDATE\n              tb_user_coin_balance_statistics\n            SET\n              like_coin = like_coin + CAST(COALESCE($1, '0') as FLOAT),\n              last_modified = CURRENT_TIMESTAMP\n            FROM\n              x\n            WHERE\n              tb_user_coin_balance_statistics.coin_balance_id = x.id\n            `, [elem.amount, current_user_id]));\r\n            return {\r\n                status: true,\r\n                message: \"Post was liked successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async view(body) {\r\n        try {\r\n            const { id } = body;\r\n            await db_1.default.query(`\n        UPDATE\n          tb_post SET viewed_count = viewed_count + 1\n        WHERE\n          tb_post.id = $1\n        `, [id]);\r\n            return {\r\n                status: true,\r\n                message: \"Post was viewed successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async delete(body) {\r\n        try {\r\n            const { id } = body;\r\n            const { rows: imageList } = await db_1.default.query(`\n        WITH\n          deleted_post_tag as (DELETE FROM tb_post_tag WHERE tb_post_tag.post_id = $1 RETURNING *),\n          deleted_tag as (DELETE FROM tb_tag WHERE tb_tag.id = ANY(SELECT deleted_post_tag.tag_id FROM deleted_post_tag) RETURNING *),\n          deleted_post_publication_type as (DELETE FROM tb_post_publication_type WHERE tb_post_publication_type.post_id = $1 RETURNING *),\n          deleted_post_image as (DELETE FROM tb_post_image WHERE tb_post_image.post_id = $1 RETURNING *),\n          deleted_post_like as (DELETE FROM tb_post_like WHERE tb_post_like.post_id = $1 RETURNING *),\n          deleted_post as (DELETE FROM tb_post WHERE tb_post.id = $1 RETURNING *)\n          DELETE FROM tb_image WHERE tb_image.id = ANY(SELECT deleted_post_image.image_id FROM deleted_post_image) RETURNING *\n        `, [id]);\r\n            imageList.map(async (elem) => {\r\n                const filepath = path_1.default.resolve(elem.url);\r\n                await fs_extra_1.default.unlink(filepath);\r\n            });\r\n            return {\r\n                status: true,\r\n                message: \"Post deleted successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async update(body) {\r\n        try {\r\n            const { post_id, current_user_id, title, description, phone, price, discount, tags, category_id, sub_category_id, start_date, end_date, images, } = body;\r\n            const { rows: checkPostList } = await db_1.default.query(`SELECT\n          tb_post.id\n        FROM\n          tb_post\n        WHERE\n          tb_post.id = $1 AND tb_post.user_auth_id = $2`, [post_id, current_user_id]);\r\n            if (checkPostList.length == 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Post does not exist or access is denied!\",\r\n                };\r\n            }\r\n            if (title) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            title = $2 \n          WHERE tb_post.id = $1`, [post_id, title]);\r\n            }\r\n            if (description) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            description = $2 \n          WHERE tb_post.id = $1`, [post_id, description]);\r\n            }\r\n            if (phone) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            phone = $2 \n          WHERE tb_post.id = $1`, [post_id, phone]);\r\n            }\r\n            if (price) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            price = $2 \n          WHERE tb_post.id = $1`, [post_id, price]);\r\n            }\r\n            if (discount) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            discount = $2 \n          WHERE tb_post.id = $1`, [post_id, discount]);\r\n            }\r\n            if (category_id) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            post_category_id = $2 \n          WHERE tb_post.id = $1`, [post_id, category_id]);\r\n            }\r\n            if (sub_category_id) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            post_sub_category_id = $2 \n          WHERE tb_post.id = $1`, [post_id, sub_category_id]);\r\n            }\r\n            if (start_date) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            start_date = $2 \n          WHERE tb_post.id = $1`, [post_id, start_date]);\r\n            }\r\n            if (end_date) {\r\n                await db_1.default.query(`UPDATE\n            tb_post\n          SET\n            end_date = $2 \n          WHERE tb_post.id = $1`, [post_id, end_date]);\r\n            }\r\n            if (tags && tags.length > 0) {\r\n                await db_1.default.query(`WITH x AS (\n            DELETE FROM\n              tb_post_tag\n            WHERE\n              tb_post_tag.post_id = $1\n            RETURNING *)\n          DELETE FROM\n            tb_tag\n          WHERE\n            tb_tag.id = ANY(SELECT x.tag_id FROM x)`, [post_id]);\r\n                const { rows: tagList } = await db_1.default.query(`INSERT INTO tb_tag(name) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id`, [JSON.parse(tags)]);\r\n                const tagIds = tagList.reduce((acc, curValue) => {\r\n                    return [...acc, curValue.id];\r\n                }, []);\r\n                await db_1.default.query(`INSERT INTO tb_post_tag(post_id, tag_id) SELECT $1, unnest(ARRAY[$2::int[]])`, [post_id, tagIds]);\r\n            }\r\n            if (images) {\r\n                const { rows: oldImageList } = await db_1.default.query(`WITH x AS (\n            DELETE FROM\n              tb_post_image\n            WHERE\n              tb_post_image.post_id = $1\n            RETURNING *)\n          DELETE FROM\n            tb_image\n          WHERE\n            tb_image.id = ANY(SELECT x.image_id FROM x)\n          RETURNING *`, [post_id]);\r\n                oldImageList.map(async (elem) => {\r\n                    const filepath = path_1.default.resolve(elem.url);\r\n                    await fs_extra_1.default.unlink(filepath);\r\n                });\r\n                await db_1.default.query(`WITH imgs AS (\n            INSERT INTO\n              tb_image(url) SELECT unnest(ARRAY[$1::varchar[]])\n            RETURNING id)\n          INSERT INTO\n            tb_post_image(post_id, image_id) SELECT $2, imgs.id FROM imgs\n          `, [images, post_id]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Post edited successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.PostDB = PostDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/post/query.ts?");

/***/ }),

/***/ "./src/db/service-request/index.ts":
/*!*****************************************!*\
  !*** ./src/db/service-request/index.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ServiceRequestDAO = void 0;\r\nconst service_1 = __webpack_require__(/*! ../admin/service */ \"./src/db/admin/service/index.ts\");\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass ServiceRequestDAO {\r\n    _adminServiceDAO = new service_1.AdminServiceDAO();\r\n    post = async (body) => {\r\n        try {\r\n            const { count, service_id, user_auth_id, location_ids, active_time, month, } = body;\r\n            for (let i = 0; i < location_ids.length; i++) {\r\n                const { rows } = await db_1.default.query(\"SELECT EXISTS(SELECT 1 FROM tb_location WHERE id = $1)\", [location_ids[i]]);\r\n                if (!rows[0].exists) {\r\n                    return {\r\n                        status: false,\r\n                        message: \"Location with given id doesn't exists!\",\r\n                    };\r\n                }\r\n            }\r\n            const response = await this._adminServiceDAO.get(service_id);\r\n            if (!response.status || !response.data || response.data?.length == 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Service with given id doesn't exists!\",\r\n                };\r\n            }\r\n            const service = response.data[0];\r\n            let totalCost = service.cost || 0;\r\n            if (service.month && !month) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Month required!\",\r\n                };\r\n            }\r\n            if (service.count && !count) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Count required!\",\r\n                };\r\n            }\r\n            if (service.month) {\r\n                totalCost += (month || 0) * (service.month_cost || 0);\r\n            }\r\n            for (let i = 0; i < service.location_costs.length; i++) {\r\n                const lCost = service.location_costs[i];\r\n                if (location_ids.includes(lCost.location.id)) {\r\n                    totalCost +=\r\n                        (lCost.cost || 0) + (month || 0) * (lCost.month_cost || 0);\r\n                }\r\n            }\r\n            if (service.count) {\r\n                totalCost *= count || 0;\r\n            }\r\n            const { rows: balanceList } = await db_1.default.query(`SELECT\n          tb_user_coin_balance.*\n        FROM\n          tb_user_coin_balance\n        WHERE\n          tb_user_coin_balance.user_auth_id = $1\n        `, [user_auth_id]);\r\n            if (balanceList.length == 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"Invalid user!\",\r\n                };\r\n            }\r\n            const balance = balanceList[0];\r\n            if (balance.balance < totalCost) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User does not have enough coins!. Coins required: \" +\r\n                        totalCost.toString(),\r\n                };\r\n            }\r\n            const { rows: serviceRequestList } = await db_1.default.query(\"INSERT INTO tb_user_service_request(service_id, user_auth_id, active_time) VALUES($1, $2, $3) RETURNING id\", [service_id, user_auth_id, active_time]);\r\n            const serviceRequestId = serviceRequestList[0].id;\r\n            await db_1.default.query(\"INSERT INTO tb_user_service_request_location(user_service_request_id, location_id) SELECT $1, UNNEST($2::int[])\", [serviceRequestId, location_ids]);\r\n            if (count) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_service_request\n          SET\n            count = $2\n          WHERE\n            tb_user_service_request.id = $1\n          `, [serviceRequestId, count]);\r\n            }\r\n            if (month) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_service_request\n          SET\n            month = $2\n          WHERE\n            tb_user_service_request.id = $1\n          `, [serviceRequestId, month]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"Service request created successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    };\r\n}\r\nexports.ServiceRequestDAO = ServiceRequestDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/service-request/index.ts?");

/***/ }),

/***/ "./src/db/user-profile/index.ts":
/*!**************************************!*\
  !*** ./src/db/user-profile/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserProfileDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/user-profile/utils.ts\");\r\nclass UserProfileDAO {\r\n    user;\r\n    constructor() {\r\n        this.user = new utils_1.UserProfileDB();\r\n    }\r\n    list = async (body) => {\r\n        const result = await this.user.list(body);\r\n        return result;\r\n    };\r\n    get = async (body) => {\r\n        const result = await this.user.get(body);\r\n        return result;\r\n    };\r\n    update = async (body) => {\r\n        const result = await this.user.update(body);\r\n        return result;\r\n    };\r\n    setAvatar = async (body) => {\r\n        const result = await this.user.setAvatar(body);\r\n        return result;\r\n    };\r\n    follow = async (body) => {\r\n        const result = await this.user.follow(body);\r\n        return result;\r\n    };\r\n    unFollow = async (body) => {\r\n        const result = await this.user.unFollow(body);\r\n        return result;\r\n    };\r\n    setDayStreak = async (body) => {\r\n        const result = await this.user.setDayStreak(body);\r\n        return result;\r\n    };\r\n    listDayStreakCoinReward = async (body) => {\r\n        const result = await this.user.listDayStreakCoinReward(body);\r\n        return result;\r\n    };\r\n    addUserProfileBackgroundImage = async (body) => {\r\n        const result = await this.user.addUserProfileBackgroundImage(body);\r\n        return result;\r\n    };\r\n    deleteUserProfileBackgroundImage = async (body) => {\r\n        const result = await this.user.deleteUserProfileBackgroundImage(body);\r\n        return result;\r\n    };\r\n}\r\nexports.UserProfileDAO = UserProfileDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/user-profile/index.ts?");

/***/ }),

/***/ "./src/db/user-profile/utils.ts":
/*!**************************************!*\
  !*** ./src/db/user-profile/utils.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserProfileDB = void 0;\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass UserProfileDB {\r\n    async list(body) {\r\n        const { query, subscription_type, subscription_type_id, location_id, limit, offset, sort, order, } = body;\r\n        const subscriptionTypeFilter = subscription_type\r\n            ? `tb_subscription_type.type = $3`\r\n            : `$3`;\r\n        const subscriptionTypeIdFilter = subscription_type_id\r\n            ? `tb_subscription_type.id = $4`\r\n            : `$4`;\r\n        const locationIdFilter = location_id ? `tb_location.id = $5` : `$5`;\r\n        const sqlquery = query ? \"%\" + query + \"%\" : null;\r\n        const queryFilter = query ? `tb_user_auth.name ILIKE $6` : `$6`;\r\n        let sortBy = `coin_balance`;\r\n        switch (sort) {\r\n            case \"coin\":\r\n                sortBy = `coin_balance`;\r\n                break;\r\n            case \"like\":\r\n                sortBy = `like_count`;\r\n                break;\r\n            case \"view\":\r\n                sortBy = `view_count`;\r\n                break;\r\n            case \"follower\":\r\n                sortBy = `follower_count`;\r\n                break;\r\n            case \"following\":\r\n                sortBy = `following_count`;\r\n                break;\r\n            case \"post\":\r\n                sortBy = `post_count`;\r\n                break;\r\n            case \"video\":\r\n                sortBy = `video_count`;\r\n                break;\r\n            case \"image\":\r\n                sortBy = `image_count`;\r\n                break;\r\n            case \"gallery\":\r\n                sortBy = `gallery_count`;\r\n                break;\r\n            case \"user_id\":\r\n                sortBy = `user_data.id`;\r\n                break;\r\n            case \"user_name\":\r\n                sortBy = `user_data.name`;\r\n                break;\r\n            case \"user_created_at\":\r\n                sortBy = `user_data.created_on`;\r\n                break;\r\n        }\r\n        let orderBy = `DESC`;\r\n        switch (order) {\r\n            case \"asc\":\r\n                orderBy = `ASC`;\r\n                break;\r\n            case \"desc\":\r\n                orderBy = `DESC`;\r\n                break;\r\n        }\r\n        const { rows: listLimit } = await db_1.default.query(`SELECT\n        *\n      FROM\n        tb_top_list_limit\n      WHERE\n        tb_top_list_limit.name = $1`, [sort || \"coin\"]);\r\n        const listLimitCount = listLimit.length > 0 ? Number(listLimit[0].limit_count) : null;\r\n        const userQuery = `WHERE ${subscriptionTypeFilter} AND ${subscriptionTypeIdFilter} AND ${locationIdFilter} AND ${queryFilter}`;\r\n        const rLimit = listLimitCount !== null\r\n            ? Math.min(limit || Infinity, listLimitCount)\r\n            : limit;\r\n        const _rlim = rLimit || 0;\r\n        const _ofs = offset || 0;\r\n        const rOffset = listLimitCount && _ofs + _rlim > listLimitCount\r\n            ? Math.max(Math.min(listLimitCount - _rlim, _ofs), 0)\r\n            : _ofs;\r\n        const values = [\r\n            rLimit,\r\n            rOffset,\r\n            subscription_type || `TRUE`,\r\n            subscription_type_id || `TRUE`,\r\n            location_id || `TRUE`,\r\n            sqlquery || `TRUE`,\r\n        ];\r\n        const { rows: list } = await db_1.default.query(`\n      WITH user_data AS (\n        SELECT\n          DISTINCT tb_user_auth.id,\n          tb_user_auth.name\n        FROM\n          tb_user_auth\n          LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_auth.id\n          LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n          LEFT JOIN tb_user_location ON tb_user_location.user_auth_id = tb_user_auth.id\n          LEFT JOIN tb_location ON tb_location.id = tb_user_location.location_id\n        ${userQuery}\n      ),\n      user_avatar AS (\n        SELECT\n          tb_user_auth.id AS user_auth_id,\n          jsonb_build_object('url', user_auth_avatar_image.url) AS avatar_image\n        FROM\n          tb_user_auth\n          LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_user_auth.id\n          LEFT JOIN tb_image AS user_auth_avatar_image ON user_auth_avatar_image.id = tb_user_auth_avatar_image.image_id\n      ),\n      follow AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_follower_statistic.follower_count AS follower_count,\n          tb_user_follower_statistic.following_count AS following_count\n        FROM\n          user_data\n          LEFT JOIN tb_user_follower_statistic ON tb_user_follower_statistic.user_auth_id = user_data.id\n      ),\n      coin_balance AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_coin_balance.balance AS balance\n        FROM\n          user_data\n          LEFT JOIN tb_user_coin_balance ON tb_user_coin_balance.user_auth_id = user_data.id\n      ),\n      gallery AS (\n        SELECT\n          user_data.id as user_auth_id,\n          CAST(COALESCE(COUNT(DISTINCT tb_gallery.id), '0') as INTEGER) AS gallery_count\n        FROM\n          user_data\n          LEFT JOIN tb_gallery ON tb_gallery.user_auth_id = user_data.id\n        GROUP BY\n          user_data.id\n      ),\n      image AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_image.id AS id,\n          tb_user_image.viewed_count AS view_count,\n          tb_user_image_like_statistic.like_count as like_count\n        FROM\n          user_data\n          LEFT JOIN tb_user_image ON tb_user_image.user_auth_id = user_data.id\n          LEFT JOIN tb_user_image_like_statistic ON tb_user_image_like_statistic.user_image_id = tb_user_image.id\n      ),\n      video AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_video.id AS id,\n          tb_user_video.viewed_count AS view_count,\n          tb_user_video_like_statistic.like_count as like_count\n        FROM\n          user_data\n          LEFT JOIN tb_user_video ON tb_user_video.user_auth_id = user_data.id\n          LEFT JOIN tb_user_video_like_statistic ON tb_user_video_like_statistic.user_video_id = tb_user_video.id\n      ),\n      post AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_post.id AS id,\n          tb_post.viewed_count AS view_count,\n          tb_post_like_statistic.like_count AS like_count\n        FROM\n          user_data\n          LEFT JOIN tb_post ON tb_post.user_auth_id = user_data.id\n          LEFT JOIN tb_post_like_statistic ON tb_post_like_statistic.post_id = tb_post.id\n      ),\n      stats AS (\n        SELECT\n          user_data.id AS user_auth_id,\n          CAST(COALESCE(COUNT(DISTINCT image.id), '0') as INTEGER) AS image_count,\n          CAST(COALESCE(COUNT(DISTINCT video.id), '0') as INTEGER) AS video_count,\n          CAST(COALESCE(COUNT(DISTINCT post.id), '0') as INTEGER) AS post_count,\n          CAST(COALESCE(SUM(image.view_count), '0') as INTEGER) AS image_view_count,\n          CAST(COALESCE(SUM(video.view_count), '0') as INTEGER) AS video_view_count,\n          CAST(COALESCE(SUM(post.view_count), '0') as INTEGER) AS post_view_count,\n          CAST(COALESCE(SUM(image.like_count), '0') as INTEGER) AS image_like_count,\n          CAST(COALESCE(SUM(video.like_count), '0') as INTEGER) AS video_like_count,\n          CAST(COALESCE(SUM(post.like_count), '0') as INTEGER) AS post_like_count\n        FROM\n          user_data\n          LEFT JOIN image ON image.user_auth_id = user_data.id\n          LEFT JOIN video ON video.user_auth_id = user_data.id\n          LEFT JOIN post ON post.user_auth_id = user_data.id\n        GROUP BY\n          user_data.id\n      )\n      SELECT\n        DISTINCT user_data.id,\n        user_data.name,\n        ${sortBy == `coin_balance`\r\n            ? `CAST(COALESCE(coin_balance.balance, '0') as FLOAT) AS coin_balance,`\r\n            : ``}\n        ${sortBy == `gallery_count`\r\n            ? `gallery.gallery_count AS gallery_count,`\r\n            : ``}\n        ${sortBy == `image_count` ? `stats.image_count AS image_count,` : ``}\n        ${sortBy == `video_count` ? `stats.video_count AS video_count,` : ``}\n        ${sortBy == `post_count` ? `stats.post_count AS post_count,` : ``}\n        ${sortBy == `view_count`\r\n            ? `(stats.image_view_count + stats.video_view_count + stats.post_view_count) AS view_count,`\r\n            : ``}\n        ${sortBy == `like_count`\r\n            ? `(stats.image_like_count + stats.video_like_count + stats.post_like_count) AS like_count,`\r\n            : ``}\n        ${sortBy == `follower_count`\r\n            ? `CAST(COALESCE(follow.follower_count, '0') AS INTEGER) AS follower_count,`\r\n            : ``}\n        ${sortBy == `following_count`\r\n            ? `CAST(COALESCE(follow.following_count, '0') AS INTEGER) AS following_count,`\r\n            : ``}\n        user_avatar.avatar_image AS avatar_image\n      FROM\n        user_data\n        LEFT JOIN user_avatar ON user_avatar.user_auth_id = user_data.id\n        LEFT JOIN coin_balance ON coin_balance.user_auth_id = user_data.id\n        LEFT JOIN stats ON stats.user_auth_id = user_data.id\n        LEFT JOIN gallery ON gallery.user_auth_id = user_data.id\n        LEFT JOIN follow ON follow.user_auth_id = user_data.id\n      ORDER BY\n        ${sortBy} ${orderBy}\n      LIMIT $1\n      OFFSET $2\n      `, values);\r\n        return list;\r\n    }\r\n    async get(body) {\r\n        const { id } = body;\r\n        const values = [id];\r\n        const { rows: list } = await db_1.default.query(` \n      WITH user_data AS (\n        SELECT\n          DISTINCT tb_user_auth.id,\n          tb_user_auth.name\n        FROM\n          tb_user_auth\n        WHERE\n          tb_user_auth.id = $1\n      ),\n      user_extra_data AS (\n        SELECT\n          user_data.id AS user_auth_id,\n          tb_user_auth.created_on,\n          tb_user_auth.last_login,\n          tb_phone.phone AS phone,\n          to_json(tb_subscription_type) AS subscription_type,\n          jsonb_build_object('url', user_auth_avatar_image.url) AS avatar_image,\n          jsonb_build_object(\n            'email',\n            tb_official_user.email,\n            'expiry_date',\n            tb_official_user.expiry_date,\n            'start_date',\n            tb_official_user.start_date\n          ) as official,\n          tb_user_auth_profile_data.about AS about,\n          jsonb_build_object(\n            'day_streak',\n            tb_user_day_streak.day_streak,\n            'last_time',\n            tb_user_day_streak.last_time\n          ) AS day_streak\n        FROM\n          user_data\n          LEFT JOIN tb_user_auth ON tb_user_auth.id = user_data.id\n          LEFT JOIN tb_phone ON tb_phone.user_auth_id = user_data.id\n          LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = user_data.id\n          LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n          LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = user_data.id\n          LEFT JOIN tb_image AS user_auth_avatar_image ON user_auth_avatar_image.id = tb_user_auth_avatar_image.image_id\n          LEFT JOIN tb_official_user ON tb_official_user.user_auth_id = user_data.id\n          LEFT JOIN tb_user_auth_profile_data ON tb_user_auth_profile_data.user_auth_id = user_data.id\n          LEFT JOIN tb_user_day_streak ON tb_user_day_streak.user_auth_id = user_data.id\n      ),\n      user_location AS (\n        SELECT\n          user_data.id AS user_auth_id,\n          json_agg(tb_location) AS location\n        FROM\n          user_data\n          LEFT JOIN tb_user_location ON tb_user_location.user_auth_id = user_data.id\n          LEFT JOIN tb_location ON tb_location.id = tb_user_location.location_id\n        GROUP BY\n          user_data.id\n      ),\n      follow AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_follower_statistic.follower_count AS follower_count,\n          tb_user_follower_statistic.following_count AS following_count\n        FROM\n          user_data\n          LEFT JOIN tb_user_follower_statistic ON tb_user_follower_statistic.user_auth_id = user_data.id\n      ),\n      coin_balance AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_coin_balance.balance AS balance,\n          tb_user_coin_balance_statistics AS stats\n        FROM\n          user_data\n          LEFT JOIN tb_user_coin_balance ON tb_user_coin_balance.user_auth_id = user_data.id\n          LEFT JOIN tb_user_coin_balance_statistics ON tb_user_coin_balance_statistics.coin_balance_id = tb_user_coin_balance.id\n      ),\n      gallery AS (\n        SELECT\n          user_data.id as user_auth_id,\n          CAST(COALESCE(COUNT(DISTINCT tb_gallery.id), '0') as INTEGER) AS gallery_count\n        FROM\n          user_data\n          LEFT JOIN tb_gallery ON tb_gallery.user_auth_id = user_data.id\n        GROUP BY\n          user_data.id\n      ),\n      image AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_image.id AS id,\n          tb_user_image.viewed_count AS view_count,\n          tb_user_image_like_statistic.like_count as like_count\n        FROM\n          user_data\n          LEFT JOIN tb_user_image ON tb_user_image.user_auth_id = user_data.id\n          LEFT JOIN tb_user_image_like_statistic ON tb_user_image_like_statistic.user_image_id = tb_user_image.id\n      ),\n      bg_image AS (\n        SELECT\n          user_data.id as user_auth_id,\n          array_agg(tb_image.url) AS images\n        FROM\n          user_data\n          LEFT JOIN tb_user_auth_profile_background_image ON tb_user_auth_profile_background_image.user_auth_id = user_data.id\n          LEFT JOIN tb_image ON tb_image.id = tb_user_auth_profile_background_image.image_id\n        GROUP BY\n          user_data.id\n      ),\n      video AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_user_video.id AS id,\n          tb_user_video.viewed_count AS view_count,\n          tb_user_video_like_statistic.like_count as like_count\n        FROM\n          user_data\n          LEFT JOIN tb_user_video ON tb_user_video.user_auth_id = user_data.id\n          LEFT JOIN tb_user_video_like_statistic ON tb_user_video_like_statistic.user_video_id = tb_user_video.id\n      ),\n      post AS (\n        SELECT\n          user_data.id as user_auth_id,\n          tb_post.id AS id,\n          tb_post.waiting AS waiting,\n          tb_post.approved AS approved,\n          tb_post.viewed_count AS view_count,\n          tb_post_like_statistic.like_count AS like_count\n        FROM\n          user_data\n          LEFT JOIN tb_post ON tb_post.user_auth_id = user_data.id\n          LEFT JOIN tb_post_like_statistic ON tb_post_like_statistic.post_id = tb_post.id\n      ),\n      my_like_statistics AS (\n        SELECT\n          user_data.id AS user_auth_id,\n          CAST(COALESCE(COUNT(DISTINCT tb_post_like.id), '0') as INTEGER) AS post_like,\n          CAST(COALESCE(COUNT(DISTINCT tb_user_video_like.id), '0') as INTEGER) AS video_like,\n          CAST(COALESCE(COUNT(DISTINCT tb_user_image_like.id), '0') as INTEGER) AS image_like\n        FROM\n          user_data\n          LEFT JOIN tb_post_like ON tb_post_like.user_auth_id = user_data.id\n          LEFT JOIN tb_user_video_like ON tb_user_video_like.user_auth_id = user_data.id\n          LEFT JOIN tb_user_image_like ON tb_user_image_like.user_auth_id = user_data.id\n        GROUP BY\n          user_data.id\n      ),\n      stats AS (\n        SELECT\n          user_data.id AS user_auth_id,\n          CAST(COALESCE(COUNT(DISTINCT image.id), '0') as INTEGER) AS image_count,\n          CAST(COALESCE(COUNT(DISTINCT video.id), '0') as INTEGER) AS video_count,\n          CAST(COALESCE(COUNT(DISTINCT post.id), '0') as INTEGER) AS post_count,\n          CAST(COALESCE(SUM(image.view_count), '0') as INTEGER) AS image_view_count,\n          CAST(COALESCE(SUM(video.view_count), '0') as INTEGER) AS video_view_count,\n          CAST(COALESCE(SUM(post.view_count), '0') as INTEGER) AS post_view_count,\n          CAST(COALESCE(SUM(image.like_count), '0') as INTEGER) AS image_like_count,\n          CAST(COALESCE(SUM(video.like_count), '0') as INTEGER) AS video_like_count,\n          CAST(COALESCE(SUM(post.like_count), '0') as INTEGER) AS post_like_count,\n          CAST(COALESCE(COUNT(DISTINCT post.id) FILTER (WHERE post.waiting = TRUE), '0') as INTEGER) AS post_waiting_count, \n          CAST(COALESCE(COUNT(DISTINCT post.id) FILTER (WHERE post.approved = TRUE), '0') as INTEGER) AS post_approved_count,\n          CAST(COALESCE(COUNT(DISTINCT post.id) FILTER (WHERE post.waiting = FALSE AND post.approved = FALSE), '0') as INTEGER) AS post_declined_count\n        FROM\n          user_data\n          LEFT JOIN image ON image.user_auth_id = user_data.id\n          LEFT JOIN video ON video.user_auth_id = user_data.id\n          LEFT JOIN post ON post.user_auth_id = user_data.id\n        GROUP BY\n          user_data.id\n      )\n      SELECT\n        user_data.id,\n        user_data.name,\n        user_extra_data.created_on,\n        user_extra_data.last_login,\n        user_extra_data.phone,\n        user_extra_data.subscription_type,\n        user_extra_data.avatar_image,\n        user_extra_data.official,\n        user_extra_data.day_streak,\n        user_extra_data.about,\n        bg_image.images AS background_image,\n        CAST(COALESCE(coin_balance.balance, '0') as FLOAT) AS coin_balance,\n        to_json(coin_balance.stats) AS coin_stats,\n        gallery.gallery_count AS gallery_count,\n        stats.image_count AS image_count,\n        stats.video_count AS video_count,\n        stats.post_count AS post_count,\n        stats.post_waiting_count AS post_waiting_count,\n        stats.post_approved_count AS post_approved_count,\n        stats.post_declined_count AS post_declined_count,\n        (\n          stats.image_view_count + stats.video_view_count + stats.post_view_count\n        ) AS view_count,\n        (\n          my_like_statistics.post_like + my_like_statistics.video_like + my_like_statistics.image_like\n        ) AS like_count,\n        stats.image_like_count AS image_like_count,\n        stats.video_like_count AS video_like_count,\n        stats.post_like_count AS post_like_count,\n        CAST(COALESCE(follow.follower_count, '0') AS INTEGER) AS follower_count,\n        CAST(COALESCE(follow.following_count, '0') AS INTEGER) AS following_count\n      FROM\n        user_data\n        LEFT JOIN user_extra_data ON user_extra_data.user_auth_id = user_data.id\n        LEFT JOIN coin_balance ON coin_balance.user_auth_id = user_data.id\n        LEFT JOIN stats ON stats.user_auth_id = user_data.id\n        LEFT JOIN gallery ON gallery.user_auth_id = user_data.id\n        LEFT JOIN follow ON follow.user_auth_id = user_data.id\n        LEFT JOIN bg_image ON bg_image.user_auth_id = user_data.id\n        LEFT JOIN my_like_statistics ON my_like_statistics.user_auth_id = user_data.id\n      `, values);\r\n        return list.length > 0 ? list[0] : null;\r\n    }\r\n    async update(body) {\r\n        try {\r\n            const { current_user_id, name, about } = body;\r\n            if (name !== undefined) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_auth\n          SET\n            name = $2\n          WHERE\n            tb_user_auth.id = $1`, [current_user_id, name]);\r\n            }\r\n            if (about !== undefined) {\r\n                await db_1.default.query(`\n          UPDATE\n            tb_user_auth_profile_data\n          SET\n            about = $2\n          WHERE\n            tb_user_auth_profile_data.user_auth_id = $1`, [current_user_id, about]);\r\n            }\r\n            return {\r\n                status: true,\r\n                message: \"User profile updated successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async setAvatar(body) {\r\n        try {\r\n            const { id, image } = body;\r\n            const { rows: imageList } = await db_1.default.query(`SELECT * FROM tb_user_auth_avatar_image WHERE tb_user_auth_avatar_image.user_auth_id = $1`, [id]);\r\n            if (imageList.length > 0) {\r\n                await db_1.default.query(`\n          WITH\n            av_img AS (DELETE FROM tb_user_auth_avatar_image WHERE tb_user_auth_avatar_image.user_auth_id = $1 RETURNING *)\n          DELETE FROM tb_image WHERE tb_image.id = $2`, [id, imageList[0].image_id]);\r\n            }\r\n            const { rows: newImageList } = await db_1.default.query(`INSERT INTO tb_image(url) VALUES ($1) RETURNING *`, [image]);\r\n            await db_1.default.query(`INSERT INTO tb_user_auth_avatar_image(user_auth_id, image_id) VALUES($2, $1)`, [newImageList[0].id, id]);\r\n            return {\r\n                status: true,\r\n                message: \"Avatar image set successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async follow(body) {\r\n        try {\r\n            const { id, current_user_id } = body;\r\n            const { rows: followList } = await db_1.default.query(`\n        SELECT\n          tb_user_follower.id\n        FROM\n          tb_user_follower\n        WHERE\n          tb_user_follower.user_auth_id = $1 AND tb_user_follower.follower_user_auth_id = $2`, [id, current_user_id]);\r\n            if (followList.length > 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User already subscribed!\",\r\n                };\r\n            }\r\n            await db_1.default.query(`INSERT INTO tb_user_follower(user_auth_id, follower_user_auth_id) VALUES ($1, $2)`, [id, current_user_id]);\r\n            return {\r\n                status: true,\r\n                message: \"User subscribed successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async unFollow(body) {\r\n        try {\r\n            const { id, current_user_id } = body;\r\n            const { rows: followList } = await db_1.default.query(`\n        SELECT\n          tb_user_follower.id\n        FROM\n          tb_user_follower\n        WHERE\n          tb_user_follower.user_auth_id = $1 AND tb_user_follower.follower_user_auth_id = $2`, [id, current_user_id]);\r\n            if (followList.length == 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User already unsubscribed!\",\r\n                };\r\n            }\r\n            await db_1.default.query(`DELETE FROM\n          tb_user_follower\n        WHERE\n          tb_user_follower.user_auth_id = $1 AND tb_user_follower.follower_user_auth_id = $2`, [id, current_user_id]);\r\n            return {\r\n                status: true,\r\n                message: \"User unsubscribed successfully!\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async setDayStreak(body) {\r\n        try {\r\n            const { current_user_id } = body;\r\n            const { rows: dayStreakList } = await db_1.default.query(`\n        UPDATE\n          tb_user_day_streak\n        SET\n          day_streak = day_streak + 1,\n          last_time = CURRENT_TIMESTAMP\n        WHERE\n          tb_user_day_streak.user_auth_id = $1 AND\n          date_trunc('day', CURRENT_TIMESTAMP) > date_trunc('day', tb_user_day_streak.last_time)\n        RETURNING\n          tb_user_day_streak.day_streak`, [current_user_id]);\r\n            return {\r\n                status: true,\r\n                message: \"User set day streak successfully!\",\r\n                data: dayStreakList.length > 0 ? dayStreakList[0] : null,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async listDayStreakCoinReward(body) {\r\n        try {\r\n            const {} = body;\r\n            const { rows: dayStreakCoinRewardList } = await db_1.default.query(`\n        SELECT\n          tb_day_streak_coin_amount.*\n        FROM\n          tb_day_streak_coin_amount\n        ORDER BY\n          tb_day_streak_coin_amount.day_id`);\r\n            return {\r\n                status: true,\r\n                message: \"User list day streak coin reward successfully!\",\r\n                data: dayStreakCoinRewardList,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async addUserProfileBackgroundImage(body) {\r\n        try {\r\n            const { current_user_id, images } = body;\r\n            const { rows: imageList } = await db_1.default.query(`INSERT INTO tb_image(url) SELECT unnest(ARRAY[$1::varchar[]]) RETURNING id`, [images]);\r\n            const imageIds = imageList.reduce((acc, curValue) => {\r\n                return [...acc, curValue.id];\r\n            }, []);\r\n            await db_1.default.query(`INSERT INTO tb_user_auth_profile_background_image(user_auth_id, image_id) SELECT $1, unnest($2::int[])`, [current_user_id, imageIds]);\r\n            const { rows: background_images } = await db_1.default.query(`SELECT\n          tb_image.*\n        FROM\n          tb_user_auth_profile_background_image\n          LEFT JOIN tb_image ON tb_image.id = tb_user_auth_profile_background_image.image_id\n        WHERE\n          tb_user_auth_profile_background_image.user_auth_id = $1`, [current_user_id]);\r\n            return {\r\n                status: true,\r\n                message: \"Profile background images added successfully!\",\r\n                data: background_images,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async deleteUserProfileBackgroundImage(body) {\r\n        try {\r\n            const { current_user_id, image_ids } = body;\r\n            await db_1.default.query(`DELETE FROM\n          tb_image\n        WHERE\n          tb_image.id = ANY(SELECT unnest(ARRAY[$1::int[]]))`, [image_ids]);\r\n            const { rows: background_images } = await db_1.default.query(`SELECT\n          tb_image.*\n        FROM\n          tb_user_auth_profile_background_image\n          LEFT JOIN tb_image ON tb_image.id = tb_user_auth_profile_background_image.image_id\n        WHERE\n          tb_user_auth_profile_background_image.user_auth_id = $1`, [current_user_id]);\r\n            return {\r\n                status: true,\r\n                message: \"Profile background images deleted successfully!\",\r\n                data: background_images,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.UserProfileDB = UserProfileDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/user-profile/utils.ts?");

/***/ }),

/***/ "./src/db/video/index.ts":
/*!*******************************!*\
  !*** ./src/db/video/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserVideoDAO = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/db/video/utils.ts\");\r\nclass UserVideoDAO {\r\n    video;\r\n    constructor() {\r\n        this.video = new utils_1.VideoDB();\r\n    }\r\n    get = async (body) => {\r\n        const result = await this.video.get(body);\r\n        return result;\r\n    };\r\n    list = async (body) => {\r\n        const result = await this.video.list(body);\r\n        return result;\r\n    };\r\n    like = async (body) => {\r\n        const result = await this.video.like(body);\r\n        return result;\r\n    };\r\n    getBadgeCount = async (session, lastFetchedDate) => {\r\n        const result = await this.video.getBadgeCount(session, lastFetchedDate);\r\n        return result;\r\n    };\r\n    view = async (body) => {\r\n        const result = await this.video.view(body);\r\n        return result;\r\n    };\r\n}\r\nexports.UserVideoDAO = UserVideoDAO;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/video/index.ts?");

/***/ }),

/***/ "./src/db/video/utils.ts":
/*!*******************************!*\
  !*** ./src/db/video/utils.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.VideoDB = void 0;\r\nconst date_fns_1 = __webpack_require__(/*! date-fns */ \"date-fns\");\r\nconst db_1 = __importDefault(__webpack_require__(/*! @/config/db */ \"./src/config/db.ts\"));\r\nclass VideoDB {\r\n    async get(query) {\r\n        try {\r\n            const { id, current_user_id } = query;\r\n            const values = [id];\r\n            if (current_user_id) {\r\n                values.push(current_user_id);\r\n            }\r\n            const isLikedParam = current_user_id\r\n                ? `CAST(COALESCE((SELECT count(tb_user_video_like.id) FROM tb_user_video_like WHERE tb_user_video_like.user_video_id = tb_user_video.id AND tb_user_video_like.user_auth_id = $2), '0') as INTEGER) as is_liked,`\r\n                : ``;\r\n            const { rows: list } = await db_1.default.query(`\n        WITH pre_next AS (\n          SELECT\n            id,\n            lag(id) over (\n              order by\n                id\n            ) as prev_id,\n            lead(id) over (\n              order by\n                id\n            ) as next_id\n          FROM\n            tb_user_video\n        )\n        SELECT\n          tb_user_video.id,\n          tb_user_video.title,\n          tb_user_video.viewed_count,\n          tb_user_video.created_at,\n          jsonb_build_object(\n            'prev_id', pre_next.prev_id,\n            'next_id', pre_next.next_id\n          ) as cursor,\n          jsonb_build_object(\n            'id', tb_user_auth.id,\n            'name', tb_user_auth.name,\n            'avatar_image', \n            jsonb_build_object('url', user_auth_avatar_image_image.url),\n            'role', tb_subscription_type.type\n          ) as user,\n          jsonb_build_object('url', tb_video.url) as video,\n          jsonb_build_object('url', tb_image.url) as thumbnail,\n          json_agg(\n            DISTINCT jsonb_build_object(\n              'id',\n              tb_page_category.id,\n              'page',\n              tb_page,\n              'category',\n              tb_category,\n              'image',\n              jsonb_build_object('url', page_category_tb_image.url)\n            )\n          ) as page_category,\n          CAST(COALESCE(tb_user_video_like_statistic.like_count, '0') AS INTEGER) as like_count,\n          ${isLikedParam}\n          to_json(tb_publication_type) as publication_type\n        FROM\n          tb_user_video\n          JOIN tb_video ON tb_user_video.video_id = tb_video.id\n          LEFT JOIN tb_user_video_publication_type ON tb_user_video_publication_type.user_video_id = tb_user_video.id\n          LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_video_publication_type.publication_type_id\n          JOIN tb_video_thumbnail ON tb_video_thumbnail.user_video_id = tb_user_video.id\n          JOIN tb_image ON tb_video_thumbnail.image_id = tb_image.id\n          LEFT JOIN tb_user_video_page_category ON tb_user_video_page_category.user_video_id = tb_user_video.id\n          LEFT JOIN tb_page_category ON tb_page_category.id = tb_user_video_page_category.page_category_id\n          LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n          LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n          LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n          LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_user_video.user_auth_id\n          LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_user_video.user_auth_id\n          LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n          \n          LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_video.user_auth_id\n          LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n  \n          LEFT JOIN tb_user_video_like_statistic ON tb_user_video_like_statistic.user_video_id = tb_user_video.id\n          LEFT JOIN pre_next ON pre_next.id = tb_user_video.id\n        WHERE\n          tb_user_video.id = $1\n        GROUP BY\n          tb_user_video.id,\n          pre_next.prev_id,\n          pre_next.next_id,\n          tb_video.url,\n          tb_image.url,\n          tb_user_auth.id,\n          user_auth_avatar_image_image.url,\n          tb_subscription_type.type,\n          tb_user_video_like_statistic.like_count,\n          tb_publication_type\n        `, values);\r\n            return {\r\n                status: true,\r\n                message: \"Video\",\r\n                data: list.length > 0 ? list[0] : null,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async list(body) {\r\n        try {\r\n            const { user_id, page_category_id, current_user_id, publication_type_id, limit, offset, query, sort, order, } = body;\r\n            const userIdFilter = user_id ? `tb_user_video.user_auth_id = $1` : `$1`;\r\n            const pageCategoryIdFilter = page_category_id\r\n                ? `($2 IN (SELECT tb_user_video_page_category.page_category_id\n                    FROM tb_user_video_page_category\n                    WHERE tb_user_video_page_category.user_video_id = tb_user_video.id))`\r\n                : `$2`;\r\n            const sqlquery = query ? \"%\" + query + \"%\" : null;\r\n            const queryFilter = query\r\n                ? `(tb_user_video.title ILIKE $3 OR\n            tb_user_auth.name ILIKE $3 OR\n            tb_subscription_type.type ILIKE $3 OR\n            tb_publication_type.type ILIKE $3)`\r\n                : `$3`;\r\n            const publicationTypeIdFilter = publication_type_id\r\n                ? `tb_publication_type.id = $4`\r\n                : `$4`;\r\n            let sortBy = `tb_user_video.created_at`;\r\n            switch (sort) {\r\n                case \"time\":\r\n                    sortBy = `tb_user_video.created_at`;\r\n                    break;\r\n                case \"like\":\r\n                    sortBy = `likes_count`;\r\n                    break;\r\n                case \"view\":\r\n                    sortBy = `tb_user_video.viewed_count`;\r\n                    break;\r\n            }\r\n            let orderBy = `DESC`;\r\n            switch (order) {\r\n                case \"asc\":\r\n                    orderBy = `ASC`;\r\n                    break;\r\n                case \"desc\":\r\n                    orderBy = `DESC`;\r\n                    break;\r\n            }\r\n            const finalQuery = `WHERE ${userIdFilter} AND ${pageCategoryIdFilter} AND ${queryFilter} AND ${publicationTypeIdFilter}`;\r\n            const values = [\r\n                user_id || `TRUE`,\r\n                page_category_id || `TRUE`,\r\n                sqlquery || `TRUE`,\r\n                publication_type_id || `TRUE`,\r\n                limit || 10,\r\n                offset || 0,\r\n            ];\r\n            if (current_user_id) {\r\n                values.push(current_user_id);\r\n            }\r\n            const isLikedParam = current_user_id\r\n                ? `CAST(COALESCE((SELECT count(tb_user_video_like.id) FROM tb_user_video_like WHERE tb_user_video_like.user_video_id = tb_user_video.id AND tb_user_video_like.user_auth_id = $7), '0') as INTEGER) as is_liked,`\r\n                : ``;\r\n            const { rows: list } = await db_1.default.query(`\n        SELECT\n          tb_user_video.id,\n          CAST(COUNT(tb_user_video.id) OVER() AS INTEGER) as items_full_count,\n          tb_user_video.title,\n          tb_user_video.viewed_count,\n          tb_user_video.created_at,\n          jsonb_build_object(\n            'id', tb_user_auth.id,\n            'name', tb_user_auth.name,\n            'avatar_image', \n            jsonb_build_object('url', user_auth_avatar_image_image.url),\n            'role', tb_subscription_type.type\n          ) as user,\n          jsonb_build_object('url', tb_video.url) as video,\n          jsonb_build_object('url', tb_image.url) as thumbnail,\n          json_agg(\n            DISTINCT jsonb_build_object(\n              'id',\n              tb_page_category.id,\n              'page',\n              tb_page,\n              'category',\n              tb_category,\n              'image',\n              jsonb_build_object('url', page_category_tb_image.url)\n            )\n          ) as page_category,\n          CAST(COALESCE(tb_user_video_like_statistic.like_count, '0') AS INTEGER) as like_count,\n          ${isLikedParam}\n          to_json(tb_publication_type) as publication_type\n        FROM\n          tb_user_video\n          JOIN tb_video ON tb_user_video.video_id = tb_video.id\n          LEFT JOIN tb_user_video_publication_type ON tb_user_video_publication_type.user_video_id = tb_user_video.id\n          LEFT JOIN tb_publication_type ON tb_publication_type.id = tb_user_video_publication_type.publication_type_id\n          JOIN tb_video_thumbnail ON tb_video_thumbnail.user_video_id = tb_user_video.id\n          JOIN tb_image ON tb_video_thumbnail.image_id = tb_image.id\n          LEFT JOIN tb_user_video_page_category ON tb_user_video_page_category.user_video_id = tb_user_video.id\n          LEFT JOIN tb_page_category ON tb_page_category.id = tb_user_video_page_category.page_category_id\n          LEFT JOIN tb_page ON tb_page.id = tb_page_category.page_id\n          LEFT JOIN tb_category ON tb_category.id = tb_page_category.category_id\n          LEFT JOIN tb_image as page_category_tb_image ON page_category_tb_image.id = tb_page_category.image_id\n          LEFT JOIN tb_user_auth ON tb_user_auth.id = tb_user_video.user_auth_id\n          LEFT JOIN tb_user_auth_avatar_image ON tb_user_auth_avatar_image.user_auth_id = tb_user_video.user_auth_id\n          LEFT JOIN tb_image as user_auth_avatar_image_image ON tb_image.id = tb_user_auth_avatar_image.image_id\n          \n          LEFT JOIN tb_user_subscription_type ON tb_user_subscription_type.user_auth_id = tb_user_video.user_auth_id\n          LEFT JOIN tb_subscription_type ON tb_subscription_type.id = tb_user_subscription_type.subscription_type_id\n          LEFT JOIN tb_user_video_like_statistic ON tb_user_video_like_statistic.user_video_id = tb_user_video.id\n        ${finalQuery}\n        GROUP BY\n          tb_user_video.id,\n          tb_video.url,\n          tb_image.url,\n          tb_user_auth.id,\n          user_auth_avatar_image_image.url,\n          tb_subscription_type.type,\n          tb_user_video_like_statistic.like_count,\n          tb_publication_type\n        ORDER BY\n          ${sortBy} ${orderBy}\n        LIMIT $5\n        OFFSET $6\n        `, values);\r\n            return {\r\n                status: true,\r\n                message: \"Video list\",\r\n                data: list,\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async getBadgeCount(session, lastFetchedDate) {\r\n        try {\r\n            if (lastFetchedDate) {\r\n                const date = (0, date_fns_1.format)((0, date_fns_1.fromUnixTime)(Math.floor(lastFetchedDate) / 1000), \"yyyy-MM-dd HH:mm:ss\");\r\n                const { rowCount: count } = await db_1.default.query(\"SELECT id FROM tb_user_video WHERE created_at BETWEEN $1 AND NOW()\", [date]);\r\n                return {\r\n                    status: true,\r\n                    message: \"Video count\",\r\n                    data: {\r\n                        count: count > 0 ? count - 1 : count,\r\n                    },\r\n                };\r\n            }\r\n            if (session && session.last_fetched_video_date) {\r\n                const date = (0, date_fns_1.format)((0, date_fns_1.fromUnixTime)(Math.floor(session.last_fetched_video_date) / 1000), \"yyyy-MM-dd HH:mm:ss\");\r\n                const { rowCount: count } = await db_1.default.query(\"SELECT id FROM tb_user_video WHERE created_at BETWEEN $1 AND NOW()\", [date]);\r\n                return {\r\n                    status: true,\r\n                    message: \"Video count\",\r\n                    data: {\r\n                        count: count > 0 ? count - 1 : count,\r\n                    },\r\n                };\r\n            }\r\n            const { rowCount: count } = await db_1.default.query(\"SELECT id FROM tb_user_video\");\r\n            return {\r\n                status: true,\r\n                message: \"Video badge count\",\r\n                data: {\r\n                    count,\r\n                },\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async like(body) {\r\n        try {\r\n            const { id, current_user_id } = body;\r\n            const { rows: userVideoLikeList } = await db_1.default.query(`SELECT * FROM tb_user_video_like WHERE tb_user_video_like.user_video_id = $1 AND tb_user_video_like.user_auth_id = $2`, [id, current_user_id]);\r\n            if (userVideoLikeList.length > 0) {\r\n                return {\r\n                    status: false,\r\n                    message: \"User already liked the video\",\r\n                };\r\n            }\r\n            await db_1.default.query(`INSERT INTO tb_user_video_like (user_auth_id, user_video_id) VALUES($1, $2)`, [current_user_id, id]);\r\n            const { rows: tb_publication_type_like_amount } = await db_1.default.query(`\n        SELECT \n          tb_publication_type_like_amount.*\n        FROM\n          tb_user_video_publication_type\n        LEFT JOIN tb_publication_type_like_amount ON tb_publication_type_like_amount.publication_type_id = tb_user_video_publication_type.publication_type_id\n        WHERE\n            tb_user_video_publication_type.user_video_id = $1\n        `, [id]);\r\n            tb_publication_type_like_amount.map(async (elem) => await db_1.default.query(`\n            WITH x AS (\n              UPDATE\n                tb_user_coin_balance SET balance = balance + $1\n              WHERE\n                tb_user_coin_balance.user_auth_id = $2\n              RETURNING tb_user_coin_balance.id\n            )\n            UPDATE\n              tb_user_coin_balance_statistics\n            SET\n              like_coin = like_coin + CAST(COALESCE($1, '0') as FLOAT),\n              last_modified = CURRENT_TIMESTAMP\n            FROM\n              x\n            WHERE\n              tb_user_coin_balance_statistics.coin_balance_id = x.id  \n            `, [elem.amount, current_user_id]));\r\n            return {\r\n                status: true,\r\n                message: \"Video was liked successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n    async view(body) {\r\n        try {\r\n            const { id } = body;\r\n            await db_1.default.query(`\n        UPDATE\n          tb_user_video SET viewed_count = viewed_count + 1\n        WHERE\n          tb_user_video.id = $1\n        `, [id]);\r\n            return {\r\n                status: true,\r\n                message: \"Video was viewed successfully\",\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                status: false,\r\n                message: err.message,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.VideoDB = VideoDB;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/db/video/utils.ts?");

/***/ }),

/***/ "./src/helpers/apiResponse.ts":
/*!************************************!*\
  !*** ./src/helpers/apiResponse.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.apiResponse = void 0;\r\nconst apiResponse = ({ status = true, message = \"\", data, }) => {\r\n    return {\r\n        status,\r\n        message,\r\n        data,\r\n    };\r\n};\r\nexports.apiResponse = apiResponse;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/apiResponse.ts?");

/***/ }),

/***/ "./src/helpers/dataSanitizers.ts":
/*!***************************************!*\
  !*** ./src/helpers/dataSanitizers.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.sanitizer = void 0;\r\nconst express_validator_1 = __webpack_require__(/*! express-validator */ \"express-validator\");\r\nconst apiResponse_1 = __webpack_require__(/*! ./apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nconst catchValidatorError = (req, res, next) => {\r\n    const errors = (0, express_validator_1.validationResult)(req);\r\n    if (!errors.isEmpty()) {\r\n        const errorMsg = errors.array().map((value) => value.msg);\r\n        res.status(400).json((0, apiResponse_1.apiResponse)({\r\n            status: false,\r\n            message: errorMsg[0],\r\n        }));\r\n    }\r\n    next();\r\n};\r\nconst sanitizer = (validator) => [...validator, catchValidatorError];\r\nexports.sanitizer = sanitizer;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/dataSanitizers.ts?");

/***/ }),

/***/ "./src/helpers/error/ApiError.ts":
/*!***************************************!*\
  !*** ./src/helpers/error/ApiError.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst lib_1 = __importStar(__webpack_require__(/*! http-status/lib */ \"http-status/lib\"));\r\nclass APIError extends Error {\r\n    status;\r\n    message;\r\n    error;\r\n    constructor(message, error) {\r\n        super();\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.status = lib_1.INTERNAL_SERVER_ERROR;\r\n        this.message = message || lib_1.default[lib_1.INTERNAL_SERVER_ERROR];\r\n        if (error && error instanceof Error) {\r\n            this.error = {\r\n                type: error?.name,\r\n                message: error?.message,\r\n                stack: error?.stack,\r\n            };\r\n        }\r\n        Error.captureStackTrace(this);\r\n    }\r\n}\r\nexports[\"default\"] = APIError;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/error/ApiError.ts?");

/***/ }),

/***/ "./src/helpers/error/ForbiddenError.ts":
/*!*********************************************!*\
  !*** ./src/helpers/error/ForbiddenError.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nclass ForbiddenError {\r\n    status;\r\n    message;\r\n    constructor(message) {\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.status = lib_1.FORBIDDEN;\r\n        this.message = message;\r\n    }\r\n}\r\nexports[\"default\"] = ForbiddenError;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/error/ForbiddenError.ts?");

/***/ }),

/***/ "./src/helpers/error/NotFoundException.ts":
/*!************************************************!*\
  !*** ./src/helpers/error/NotFoundException.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst lib_1 = __importStar(__webpack_require__(/*! http-status/lib */ \"http-status/lib\"));\r\nclass NotFoundException {\r\n    status;\r\n    message;\r\n    constructor() {\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.status = lib_1.NOT_FOUND;\r\n        this.message = lib_1.default[lib_1.NOT_FOUND];\r\n    }\r\n}\r\nexports[\"default\"] = NotFoundException;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/error/NotFoundException.ts?");

/***/ }),

/***/ "./src/helpers/error/TimeOutError.ts":
/*!*******************************************!*\
  !*** ./src/helpers/error/TimeOutError.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst lib_1 = __importStar(__webpack_require__(/*! http-status/lib */ \"http-status/lib\"));\r\nconst config_1 = __importDefault(__webpack_require__(/*! @/config */ \"./src/config/index.ts\"));\r\nclass TimeOutError {\r\n    status;\r\n    message;\r\n    timeout;\r\n    path;\r\n    constructor(path) {\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.status = lib_1.REQUEST_TIMEOUT;\r\n        this.message = lib_1.default[lib_1.REQUEST_TIMEOUT];\r\n        this.timeout = config_1.default.SERVER.TIMEOUT;\r\n        this.path = path;\r\n    }\r\n}\r\nexports[\"default\"] = TimeOutError;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/error/TimeOutError.ts?");

/***/ }),

/***/ "./src/helpers/error/UnauthorizedError.ts":
/*!************************************************!*\
  !*** ./src/helpers/error/UnauthorizedError.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst lib_1 = __importStar(__webpack_require__(/*! http-status/lib */ \"http-status/lib\"));\r\nclass UnauthorizedError {\r\n    status;\r\n    message;\r\n    constructor(message) {\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.status = lib_1.UNAUTHORIZED;\r\n        this.message = message || lib_1.default[lib_1.UNAUTHORIZED];\r\n    }\r\n}\r\nexports[\"default\"] = UnauthorizedError;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/error/UnauthorizedError.ts?");

/***/ }),

/***/ "./src/helpers/error/ValidationError.ts":
/*!**********************************************!*\
  !*** ./src/helpers/error/ValidationError.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst lib_1 = __importStar(__webpack_require__(/*! http-status/lib */ \"http-status/lib\"));\r\nclass ValidationError extends Error {\r\n    status;\r\n    message;\r\n    constructor() {\r\n        super();\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.status = false;\r\n        this.message = lib_1.default[lib_1.BAD_REQUEST];\r\n        Error.captureStackTrace(this);\r\n    }\r\n}\r\nexports[\"default\"] = ValidationError;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/error/ValidationError.ts?");

/***/ }),

/***/ "./src/helpers/error/index.ts":
/*!************************************!*\
  !*** ./src/helpers/error/index.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TimeOutError = exports.NotFoundException = exports.UnauthorizedError = exports.ForbiddenError = exports.ValidationError = exports.APIError = void 0;\r\nconst ApiError_1 = __importDefault(__webpack_require__(/*! ./ApiError */ \"./src/helpers/error/ApiError.ts\"));\r\nexports.APIError = ApiError_1.default;\r\nconst ValidationError_1 = __importDefault(__webpack_require__(/*! ./ValidationError */ \"./src/helpers/error/ValidationError.ts\"));\r\nexports.ValidationError = ValidationError_1.default;\r\nconst ForbiddenError_1 = __importDefault(__webpack_require__(/*! ./ForbiddenError */ \"./src/helpers/error/ForbiddenError.ts\"));\r\nexports.ForbiddenError = ForbiddenError_1.default;\r\nconst UnauthorizedError_1 = __importDefault(__webpack_require__(/*! ./UnauthorizedError */ \"./src/helpers/error/UnauthorizedError.ts\"));\r\nexports.UnauthorizedError = UnauthorizedError_1.default;\r\nconst NotFoundException_1 = __importDefault(__webpack_require__(/*! ./NotFoundException */ \"./src/helpers/error/NotFoundException.ts\"));\r\nexports.NotFoundException = NotFoundException_1.default;\r\nconst TimeOutError_1 = __importDefault(__webpack_require__(/*! ./TimeOutError */ \"./src/helpers/error/TimeOutError.ts\"));\r\nexports.TimeOutError = TimeOutError_1.default;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/error/index.ts?");

/***/ }),

/***/ "./src/helpers/index.ts":
/*!******************************!*\
  !*** ./src/helpers/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.sanitizer = exports.exitLog = exports.expressPinoLogger = void 0;\r\nvar loggers_1 = __webpack_require__(/*! ./loggers */ \"./src/helpers/loggers.ts\");\r\nObject.defineProperty(exports, \"expressPinoLogger\", ({ enumerable: true, get: function () { return loggers_1.expressPinoLogger; } }));\r\nObject.defineProperty(exports, \"exitLog\", ({ enumerable: true, get: function () { return loggers_1.exitLog; } }));\r\nvar dataSanitizers_1 = __webpack_require__(/*! ./dataSanitizers */ \"./src/helpers/dataSanitizers.ts\");\r\nObject.defineProperty(exports, \"sanitizer\", ({ enumerable: true, get: function () { return dataSanitizers_1.sanitizer; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/index.ts?");

/***/ }),

/***/ "./src/helpers/loggers.ts":
/*!********************************!*\
  !*** ./src/helpers/loggers.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.exitLog = exports.expressPinoLogger = void 0;\r\nconst lib_1 = __importDefault(__webpack_require__(/*! http-status/lib */ \"http-status/lib\"));\r\nconst express_pino_logger_1 = __importDefault(__webpack_require__(/*! express-pino-logger */ \"express-pino-logger\"));\r\nconst auth_1 = __webpack_require__(/*! @/utils/auth */ \"./src/utils/auth.ts\");\r\nconst { OK, BAD_REQUEST, SERVER_ERROR } = lib_1.default;\r\nconst expressPinoLogger = () => (0, express_pino_logger_1.default)({\r\n    transport: {\r\n        target: \"pino-pretty\",\r\n        options: {\r\n            colorize: true,\r\n            translateTime: true,\r\n        },\r\n    },\r\n    customLogLevel(res, err) {\r\n        const status = res.statusCode;\r\n        if (status >= 400 && status < 500) {\r\n            return \"warn\";\r\n        }\r\n        if (status >= 500 || err) {\r\n            return \"error\";\r\n        }\r\n        return \"silent\";\r\n    },\r\n    customErrorMessage: (err) => `${err.name} : ${err.message}`,\r\n    customSuccessMessage(res) {\r\n        const status = res.statusCode;\r\n        if (status >= 400 && status < 500) {\r\n            return `${status || BAD_REQUEST} : ${lib_1.default[status || 400]}`;\r\n        }\r\n        if (status >= 500) {\r\n            return `${status || SERVER_ERROR} : ${lib_1.default[status || 500]}`;\r\n        }\r\n        return `${OK} : ${lib_1.default[200].toUpperCase()}`;\r\n    },\r\n    serializers: {\r\n        req: (req) => {\r\n            const { method, url, headers: { host }, } = req;\r\n            return {\r\n                origin: host,\r\n                method,\r\n                url,\r\n                query: req.query,\r\n                params: req.params,\r\n                body: (0, auth_1.hidePassword)({ ...req.raw.body }),\r\n            };\r\n        },\r\n        res: (res) => {\r\n            return {\r\n                status: res.statusCode,\r\n            };\r\n        },\r\n        err: (err) => `${err.type} : ${err.message}`,\r\n    },\r\n});\r\nexports.expressPinoLogger = expressPinoLogger;\r\nconst exitLog = (err, evt) => {\r\n    if (err) {\r\n        process.stdout.write(`\\n\\n[!ERROR][${evt}] => ${err}\\n\\n`);\r\n    }\r\n    else {\r\n        process.stdout.write(`\\n\\n![${evt}] EVENT CAUSE EXIT\\n\\n`);\r\n    }\r\n    process.exit(err ? 1 : 0);\r\n};\r\nexports.exitLog = exitLog;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/helpers/loggers.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n(__webpack_require__(/*! module-alias */ \"module-alias\").addAlias)(\"@\", __dirname);\r\nconst app_1 = __webpack_require__(/*! ./app */ \"./src/app.ts\");\r\nconst server_1 = __webpack_require__(/*! ./server */ \"./src/server.ts\");\r\nif (true) {\r\n    const app = (0, app_1.createApp)();\r\n    (0, server_1.startServer)(app);\r\n}\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/index.ts?");

/***/ }),

/***/ "./src/middlewares/auth/admin/index.ts":
/*!*********************************************!*\
  !*** ./src/middlewares/auth/admin/index.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminAuthMiddleware = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nconst adminAuthMiddleware = (req, res, next) => {\r\n    try {\r\n        const token = req.headers.authorization\r\n            ? req.headers.authorization.split(\" \")[1]\r\n            : null;\r\n        if (!token) {\r\n            return res\r\n                .status(lib_1.FORBIDDEN)\r\n                .json((0, apiResponse_1.apiResponse)({ status: false, message: \"Access token is required!\" }));\r\n        }\r\n        const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n        if (!decodedData) {\r\n            return res\r\n                .status(lib_1.FORBIDDEN)\r\n                .json((0, apiResponse_1.apiResponse)({ status: false, message: \"Access token is broken!\" }));\r\n        }\r\n        return next();\r\n    }\r\n    catch (e) {\r\n        return res\r\n            .status(lib_1.FORBIDDEN)\r\n            .json((0, apiResponse_1.apiResponse)({ status: false, message: \"Invalid token error!\" }));\r\n    }\r\n};\r\nexports.adminAuthMiddleware = adminAuthMiddleware;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/middlewares/auth/admin/index.ts?");

/***/ }),

/***/ "./src/middlewares/auth/user/index.ts":
/*!********************************************!*\
  !*** ./src/middlewares/auth/user/index.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.userAuthMiddleware = void 0;\r\nconst lib_1 = __webpack_require__(/*! http-status/lib */ \"http-status/lib\");\r\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\ndotenv_1.default.config();\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"\";\r\nconst userAuthMiddleware = (req, res, next) => {\r\n    try {\r\n        const token = req.headers.authorization\r\n            ? req.headers.authorization.split(\" \")[1]\r\n            : null;\r\n        if (!token) {\r\n            return res\r\n                .status(lib_1.UNAUTHORIZED)\r\n                .send((0, apiResponse_1.apiResponse)({ status: false, message: \"Access token is required\" }));\r\n        }\r\n        const decodedData = jsonwebtoken_1.default.verify(token, JWT_SECRET);\r\n        if (!decodedData) {\r\n            return res\r\n                .status(lib_1.FORBIDDEN)\r\n                .send((0, apiResponse_1.apiResponse)({ message: \"Access token is broken!\" }));\r\n        }\r\n        return next();\r\n    }\r\n    catch (e) {\r\n        return res\r\n            .status(lib_1.FORBIDDEN)\r\n            .send((0, apiResponse_1.apiResponse)({ status: false, message: \"Invalid token error\" }));\r\n    }\r\n};\r\nexports.userAuthMiddleware = userAuthMiddleware;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/middlewares/auth/user/index.ts?");

/***/ }),

/***/ "./src/middlewares/errorHandler.ts":
/*!*****************************************!*\
  !*** ./src/middlewares/errorHandler.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.genericErrorHandler = exports.notFoundError = void 0;\r\nconst lib_1 = __importStar(__webpack_require__(/*! http-status/lib */ \"http-status/lib\"));\r\nconst error_1 = __webpack_require__(/*! @/helpers/error */ \"./src/helpers/error/index.ts\");\r\nconst apiResponse_1 = __webpack_require__(/*! @/helpers/apiResponse */ \"./src/helpers/apiResponse.ts\");\r\nconst notFoundError = (req, res, _next) => {\r\n    res.status(lib_1.NOT_FOUND).json({\r\n        error: {\r\n            code: lib_1.NOT_FOUND,\r\n            message: lib_1.default[lib_1.NOT_FOUND],\r\n            path: req.originalUrl,\r\n        },\r\n    });\r\n};\r\nexports.notFoundError = notFoundError;\r\nconst genericErrorHandler = (err, req, res, _next) => {\r\n    let resCode = err.status || lib_1.INTERNAL_SERVER_ERROR;\r\n    let resBody = err.message;\r\n    if (err.code === \"ETIMEDOUT\") {\r\n        resCode = lib_1.REQUEST_TIMEOUT;\r\n        resBody = new error_1.TimeOutError(req.originalUrl);\r\n    }\r\n    res.status(resCode).json((0, apiResponse_1.apiResponse)({\r\n        status: false,\r\n        message: resBody,\r\n    }));\r\n};\r\nexports.genericErrorHandler = genericErrorHandler;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/middlewares/errorHandler.ts?");

/***/ }),

/***/ "./src/routes/admin.ts":
/*!*****************************!*\
  !*** ./src/routes/admin.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.adminRouter = void 0;\r\nconst express_1 = __webpack_require__(/*! express */ \"express\");\r\nconst storage_1 = __webpack_require__(/*! @/components/admin/service/storage */ \"./src/components/admin/service/storage.ts\");\r\nconst validators_1 = __webpack_require__(/*! @/components/admin/service/validators */ \"./src/components/admin/service/validators.ts\");\r\nconst controller_1 = __webpack_require__(/*! @/components/admin/service/controller */ \"./src/components/admin/service/controller.ts\");\r\nconst admin_1 = __webpack_require__(/*! @/middlewares/auth/admin */ \"./src/middlewares/auth/admin/index.ts\");\r\nconst helpers_1 = __webpack_require__(/*! @/helpers */ \"./src/helpers/index.ts\");\r\nconst storage_2 = __webpack_require__(/*! @/components/admin/user/storage */ \"./src/components/admin/user/storage.ts\");\r\nconst controller_2 = __webpack_require__(/*! @/components/admin/user/controller */ \"./src/components/admin/user/controller.ts\");\r\nconst user_profile_1 = __webpack_require__(/*! @/components/admin/user-profile */ \"./src/components/admin/user-profile/index.ts\");\r\nconst post_1 = __webpack_require__(/*! @/components/post */ \"./src/components/post/index.ts\");\r\nconst post_2 = __webpack_require__(/*! @/components/admin/post */ \"./src/components/admin/post/index.ts\");\r\nconst controller_3 = __webpack_require__(/*! @/components/admin/payment/controller */ \"./src/components/admin/payment/controller.ts\");\r\nconst storage_3 = __webpack_require__(/*! @/components/admin/payment/storage */ \"./src/components/admin/payment/storage.ts\");\r\nconst validators_2 = __webpack_require__(/*! @/components/admin/auth/validators */ \"./src/components/admin/auth/validators.ts\");\r\nconst auth_1 = __webpack_require__(/*! @/components/admin/auth */ \"./src/components/admin/auth/index.ts\");\r\nconst banner_1 = __webpack_require__(/*! @/components/admin/banner */ \"./src/components/admin/banner/index.ts\");\r\nconst category_1 = __webpack_require__(/*! @/components/admin/category */ \"./src/components/admin/category/index.ts\");\r\nconst validators_3 = __webpack_require__(/*! @/components/admin/category/validators */ \"./src/components/admin/category/validators.ts\");\r\nconst validators_4 = __webpack_require__(/*! @/components/admin/sub-category/validators */ \"./src/components/admin/sub-category/validators.ts\");\r\nconst controller_4 = __webpack_require__(/*! @/components/admin/sub-category/controller */ \"./src/components/admin/sub-category/controller.ts\");\r\nconst video_1 = __webpack_require__(/*! @/components/admin/video */ \"./src/components/admin/video/index.ts\");\r\nconst page_category_1 = __webpack_require__(/*! @/components/admin/page-category */ \"./src/components/admin/page-category/index.ts\");\r\nconst gallery_1 = __webpack_require__(/*! @/components/admin/gallery */ \"./src/components/admin/gallery/index.ts\");\r\nconst publication_type_1 = __webpack_require__(/*! @/components/admin/publication-type */ \"./src/components/admin/publication-type/index.ts\");\r\nconst adminRouter = (0, express_1.Router)();\r\nexports.adminRouter = adminRouter;\r\nadminRouter.post(\"/service\", admin_1.adminAuthMiddleware, storage_1.adminServiceUpload.single(\"image\"), (0, helpers_1.sanitizer)(validators_1.AdminServiceValidator.postValidator), controller_1.AdminServiceController.post);\r\nadminRouter.put(\"/service/:id([0-9]+)\", admin_1.adminAuthMiddleware, storage_1.adminServiceUpload.single(\"image\"), (0, helpers_1.sanitizer)(validators_1.AdminServiceValidator.postValidator), controller_1.AdminServiceController.put);\r\nadminRouter.delete(\"/service/:id([0-9]+)\", admin_1.adminAuthMiddleware, controller_1.AdminServiceController.delete);\r\nadminRouter.get(\"/service\", admin_1.adminAuthMiddleware, controller_1.AdminServiceController.list);\r\nadminRouter.get(\"/service/:id([0-9]+)\", admin_1.adminAuthMiddleware, controller_1.AdminServiceController.get);\r\nadminRouter.post(\"/user\", admin_1.adminAuthMiddleware, storage_2.adminUserUpload.single(\"image\"), controller_2.AdminUserController.post);\r\nadminRouter.get(\"/user\", admin_1.adminAuthMiddleware, controller_2.AdminUserController.list);\r\nadminRouter.post(\"/user/follow/reward\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(user_profile_1.AdminUserProfileValidator.setFollowReward), user_profile_1.AdminUserProfileController.setFollowReward);\r\nadminRouter.get(\"/user/follow/reward\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(user_profile_1.AdminUserProfileValidator.listFollowReward), user_profile_1.AdminUserProfileController.listFollowReward);\r\nadminRouter.put(\"/user/day-streak/reward\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(user_profile_1.AdminUserProfileValidator.setDayStreakCoinReward), user_profile_1.AdminUserProfileController.setDayStreakCoinReward);\r\nadminRouter.post(\"/user/top-list/limit\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(user_profile_1.AdminUserProfileValidator.setTopListLimit), user_profile_1.AdminUserProfileController.setTopListLimit);\r\nadminRouter.get(\"/user/top-list/limit\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(user_profile_1.AdminUserProfileValidator.listTopListLimit), user_profile_1.AdminUserProfileController.listTopListLimit);\r\nadminRouter.delete(\"/user/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(user_profile_1.AdminUserProfileValidator.delteUser), user_profile_1.AdminUserProfileController.delteUser);\r\nadminRouter.post(\"/post\", admin_1.adminAuthMiddleware, post_1.postUpload.array(\"image\", Number(process.env.POST_UPLOAD_LIMIT)), post_2.AdminPostController.post);\r\nadminRouter.put(\"/post\", admin_1.adminAuthMiddleware, post_1.postUpload.array(\"image\", Number(process.env.POST_UPLOAD_LIMIT)), (0, helpers_1.sanitizer)(post_2.AdminPostValidator.update), post_2.AdminPostController.update);\r\nadminRouter.get(\"/post\", admin_1.adminAuthMiddleware, post_2.AdminPostController.list);\r\nadminRouter.get(\"/post/:id([0-9]+)\", admin_1.adminAuthMiddleware, post_2.AdminPostController.get);\r\nadminRouter.delete(\"/post/:id([0-9]+)\", admin_1.adminAuthMiddleware, post_2.AdminPostController.delete);\r\nadminRouter.post(\"/post/:id/approve\", admin_1.adminAuthMiddleware, post_2.AdminPostController.approve);\r\nadminRouter.post(\"/post/publication-type\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(post_2.AdminPostValidator.setPublicationTypeValidator), post_2.AdminPostController.setPublicationType);\r\nadminRouter.get(\"/post/publication-type/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(post_2.AdminPostValidator.getPublicationTypeValidator), post_2.AdminPostController.getPublicationType);\r\nadminRouter.get(\"/user/payment\", admin_1.adminAuthMiddleware, controller_3.AdminPaymentController.userList);\r\nadminRouter.post(\"/payment\", admin_1.adminAuthMiddleware, storage_3.adminPaymentUpload.single(\"image\"), controller_3.AdminPaymentController.post);\r\nadminRouter.get(\"/payment\", admin_1.adminAuthMiddleware, controller_3.AdminPaymentController.list);\r\nadminRouter.delete(\"/payment/:id\", admin_1.adminAuthMiddleware, controller_3.AdminPaymentController.delete);\r\nadminRouter.post(\"/account/login\", (0, helpers_1.sanitizer)(validators_2.adminLoginValidator), auth_1.AdminAuthController.login);\r\nadminRouter.post(\"/banner\", admin_1.adminAuthMiddleware, banner_1.adminBannerUpload.single(\"image\"), (0, helpers_1.sanitizer)(banner_1.AdminBannerValidator.createValidator), banner_1.AdminBannerController.create);\r\nadminRouter.put(\"/banner\", admin_1.adminAuthMiddleware, banner_1.adminBannerUpload.single(\"image\"), (0, helpers_1.sanitizer)(banner_1.AdminBannerValidator.edit), banner_1.AdminBannerController.edit);\r\nadminRouter.get(\"/banner/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(banner_1.AdminBannerValidator.getValidator), banner_1.AdminBannerController.get);\r\nadminRouter.get(\"/banner\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(banner_1.AdminBannerValidator.listValidator), banner_1.AdminBannerController.list);\r\nadminRouter.delete(\"/banner/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(banner_1.AdminBannerValidator.deleteValidator), banner_1.AdminBannerController.delete);\r\nadminRouter.post(\"/category\", admin_1.adminAuthMiddleware, category_1.adminCategoryUpload.single(\"image\"), (0, helpers_1.sanitizer)(validators_3.AdminCategoryValidator.createValidator), category_1.AdminCategoryController.post);\r\nadminRouter.get(\"/category\", admin_1.adminAuthMiddleware, category_1.AdminCategoryController.list);\r\nadminRouter.get(\"/category/:id\", admin_1.adminAuthMiddleware, category_1.AdminCategoryController.get);\r\nadminRouter.delete(\"/category/:id\", admin_1.adminAuthMiddleware, category_1.AdminCategoryController.delete);\r\nadminRouter.post(\"/sub-category\", (0, helpers_1.sanitizer)(validators_4.AdminSubCategoryValidator.postValidator), controller_4.AdminSubCategoryController.post);\r\nadminRouter.get(\"/sub-category\", controller_4.AdminSubCategoryController.list);\r\nadminRouter.get(\"/sub-category/:id\", controller_4.AdminSubCategoryController.get);\r\nadminRouter.delete(\"/sub-category/:id\", controller_4.AdminSubCategoryController.delete);\r\nadminRouter.post(\"/video\", admin_1.adminAuthMiddleware, video_1.adminVideoUpload.fields([\r\n    { name: \"video\", maxCount: 1 },\r\n    { name: \"thumbnail\", maxCount: 1 },\r\n]), (0, helpers_1.sanitizer)(video_1.AdminVideoValidator.createValidator), video_1.AdminVideoController.create);\r\nadminRouter.put(\"/video\", admin_1.adminAuthMiddleware, video_1.adminVideoUpload.fields([{ name: \"thumbnail\", maxCount: 1 }]), (0, helpers_1.sanitizer)(video_1.AdminVideoValidator.edit), video_1.AdminVideoController.edit);\r\nadminRouter.get(\"/video\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(video_1.AdminVideoValidator.listValidator), video_1.AdminVideoController.list);\r\nadminRouter.get(\"/video/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(video_1.AdminVideoValidator.getValidator), video_1.AdminVideoController.get);\r\nadminRouter.delete(\"/video/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(video_1.AdminVideoValidator.deleteValidator), video_1.AdminVideoController.delete);\r\nadminRouter.post(\"/video/publication-type\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(video_1.AdminVideoValidator.setPublicationTypeValidator), video_1.AdminVideoController.setPublicationType);\r\nadminRouter.get(\"/video/publication-type/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(video_1.AdminVideoValidator.getPublicationTypeValidator), video_1.AdminVideoController.getPublicationType);\r\nadminRouter.post(\"/page-category\", admin_1.adminAuthMiddleware, page_category_1.adminPageCategoryImageUpload.single(\"image\"), (0, helpers_1.sanitizer)(page_category_1.AdminPageCategoryValidator.createValidator), page_category_1.AdminPageCategoryController.create);\r\nadminRouter.put(\"/page-category\", admin_1.adminAuthMiddleware, page_category_1.adminPageCategoryImageUpload.single(\"image\"), (0, helpers_1.sanitizer)(page_category_1.AdminPageCategoryValidator.edit), page_category_1.AdminPageCategoryController.edit);\r\nadminRouter.get(\"/page-category\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(page_category_1.AdminPageCategoryValidator.listValidator), page_category_1.AdminPageCategoryController.list);\r\nadminRouter.get(\"/page-category/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(page_category_1.AdminPageCategoryValidator.getValidator), page_category_1.AdminPageCategoryController.get);\r\nadminRouter.delete(\"/page-category/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(page_category_1.AdminPageCategoryValidator.deleteValidator), page_category_1.AdminPageCategoryController.delete);\r\nadminRouter.post(\"/gallery\", admin_1.adminAuthMiddleware, gallery_1.adminGalleryUpload.fields([\r\n    { name: \"avatar_image\", maxCount: 1 },\r\n    { name: \"images\", maxCount: Number(process.env.GALLERY_UPLOAD_LIMIT) },\r\n]), (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.createValidator), gallery_1.AdminGalleryController.create);\r\nadminRouter.put(\"/gallery\", admin_1.adminAuthMiddleware, gallery_1.adminGalleryUpload.fields([{ name: \"avatar_image\", maxCount: 1 }]), (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.edit), gallery_1.AdminGalleryController.edit);\r\nadminRouter.post(\"/gallery/add-images\", admin_1.adminAuthMiddleware, gallery_1.adminGalleryUpload.fields([\r\n    { name: \"images\", maxCount: Number(process.env.GALLERY_UPLOAD_LIMIT) },\r\n]), (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.addImages), gallery_1.AdminGalleryController.addImages);\r\nadminRouter.post(\"/gallery/delete-images\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.deleteImages), gallery_1.AdminGalleryController.deleteImages);\r\nadminRouter.get(\"/gallery\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.listValidator), gallery_1.AdminGalleryController.list);\r\nadminRouter.get(\"/gallery/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.getValidator), gallery_1.AdminGalleryController.get);\r\nadminRouter.delete(\"/gallery/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.deleteValidator), gallery_1.AdminGalleryController.delete);\r\nadminRouter.post(\"/gallery/publication-type\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.setPublicationTypeValidator), gallery_1.AdminGalleryController.setPublicationType);\r\nadminRouter.get(\"/gallery/publication-type/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(gallery_1.AdminGalleryValidator.getPublicationTypeValidator), gallery_1.AdminGalleryController.getPublicationType);\r\nadminRouter.post(\"/publication-type\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(publication_type_1.AdminPublicationTypeValidator.createValidator), publication_type_1.AdminPublicationTypeController.create);\r\nadminRouter.get(\"/publication-type\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(publication_type_1.AdminPublicationTypeValidator.listValidator), publication_type_1.AdminPublicationTypeController.list);\r\nadminRouter.get(\"/publication-type/:id([0-9]+)\", admin_1.adminAuthMiddleware, (0, helpers_1.sanitizer)(publication_type_1.AdminPublicationTypeValidator.getValidator), publication_type_1.AdminPublicationTypeController.get);\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/routes/admin.ts?");

/***/ }),

/***/ "./src/routes/index.ts":
/*!*****************************!*\
  !*** ./src/routes/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.router = exports.adminRouter = void 0;\r\nvar admin_1 = __webpack_require__(/*! ./admin */ \"./src/routes/admin.ts\");\r\nObject.defineProperty(exports, \"adminRouter\", ({ enumerable: true, get: function () { return admin_1.adminRouter; } }));\r\nvar public_1 = __webpack_require__(/*! ./public */ \"./src/routes/public.ts\");\r\nObject.defineProperty(exports, \"router\", ({ enumerable: true, get: function () { return public_1.router; } }));\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/routes/index.ts?");

/***/ }),

/***/ "./src/routes/public.ts":
/*!******************************!*\
  !*** ./src/routes/public.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.router = void 0;\r\nconst express_1 = __webpack_require__(/*! express */ \"express\");\r\nconst home_1 = __webpack_require__(/*! @/components/home */ \"./src/components/home/index.ts\");\r\nconst helpers_1 = __webpack_require__(/*! @/helpers */ \"./src/helpers/index.ts\");\r\nconst user_1 = __webpack_require__(/*! @/middlewares/auth/user */ \"./src/middlewares/auth/user/index.ts\");\r\nconst auth_1 = __webpack_require__(/*! @/components/auth */ \"./src/components/auth/index.ts\");\r\nconst banner_1 = __webpack_require__(/*! @/components/banner */ \"./src/components/banner/index.ts\");\r\nconst location_1 = __webpack_require__(/*! @/components/location */ \"./src/components/location/index.ts\");\r\nconst controller_1 = __webpack_require__(/*! @/components/page/controller */ \"./src/components/page/controller.ts\");\r\nconst controller_2 = __webpack_require__(/*! @/components/platform/controller */ \"./src/components/platform/controller.ts\");\r\nconst controller_3 = __webpack_require__(/*! @/components/category/controller */ \"./src/components/category/controller.ts\");\r\nconst post_1 = __webpack_require__(/*! @/components/post */ \"./src/components/post/index.ts\");\r\nconst video_1 = __webpack_require__(/*! @/components/video */ \"./src/components/video/index.ts\");\r\nconst validator_1 = __webpack_require__(/*! @/components/page-category/validator */ \"./src/components/page-category/validator.ts\");\r\nconst page_category_1 = __webpack_require__(/*! @/components/page-category */ \"./src/components/page-category/index.ts\");\r\nconst gallery_1 = __webpack_require__(/*! @/components/gallery */ \"./src/components/gallery/index.ts\");\r\nconst user_profile_1 = __webpack_require__(/*! @/components/user-profile */ \"./src/components/user-profile/index.ts\");\r\nconst controller_4 = __webpack_require__(/*! @/components/payment/controller */ \"./src/components/payment/controller.ts\");\r\nconst controller_5 = __webpack_require__(/*! @/components/admin/payment/controller */ \"./src/components/admin/payment/controller.ts\");\r\nconst controller_6 = __webpack_require__(/*! @/components/service-request/controller */ \"./src/components/service-request/controller.ts\");\r\nconst validators_1 = __webpack_require__(/*! @/components/service-request/validators */ \"./src/components/service-request/validators.ts\");\r\nconst controller_7 = __webpack_require__(/*! @/components/admin/service/controller */ \"./src/components/admin/service/controller.ts\");\r\nconst router = (0, express_1.Router)();\r\nexports.router = router;\r\nrouter.get(\"/\", (0, helpers_1.sanitizer)(home_1.appKeyValidator), home_1.HomeController.getAppInfo);\r\nrouter.get(\"/service\", controller_7.AdminServiceController.list);\r\nrouter.get(\"/service/:id([0-9]+)\", controller_7.AdminServiceController.get);\r\nrouter.post(\"/service-request\", user_1.userAuthMiddleware, (0, helpers_1.sanitizer)(validators_1.ApiServiceRequestValidator.postValidator), controller_6.ApiServiceRequestController.post);\r\nrouter.get(\"/payment\", user_1.userAuthMiddleware, controller_5.AdminPaymentController.list);\r\nrouter.get(\"/payment/form/:id([0-9]+)\", user_1.userAuthMiddleware, controller_4.ApiPaymentController.post);\r\nrouter.get(\"/payment/:uuid/status\", user_1.userAuthMiddleware, controller_4.ApiPaymentController.status);\r\nrouter.post(\"/account/signup\", (0, helpers_1.sanitizer)(auth_1.AuthValidator.signupValidator), auth_1.AuthController.signup);\r\nrouter.post(\"/account/login\", (0, helpers_1.sanitizer)(auth_1.AuthValidator.loginValidator), auth_1.AuthController.login);\r\nrouter.post(\"/account/verify\", (0, helpers_1.sanitizer)(auth_1.AuthValidator.accountVerifyValidator), auth_1.AuthController.accountVerify);\r\nrouter.post(\"/account/verify/check\", (0, helpers_1.sanitizer)(auth_1.AuthValidator.accountVerifyCheckValidator), auth_1.AuthController.accountVerifyCheck);\r\nrouter.post(\"/account/exists\", (0, helpers_1.sanitizer)(auth_1.AuthValidator.accountVerifyCheckValidator), auth_1.AuthController.userExists);\r\nrouter.post(\"/account/reset-password\", (0, helpers_1.sanitizer)(auth_1.AuthValidator.passwordRecoveryValidator), auth_1.AuthController.resetPassword);\r\nrouter.post(\"/account/recover/verify/check\", (0, helpers_1.sanitizer)(auth_1.AuthValidator.accountVerifyCheckValidator), auth_1.AuthController.recoverVerifyCheck);\r\nrouter.get(\"/platform/list\", controller_2.ApiPlatformController.list);\r\nrouter.get(\"/page/list\", controller_1.ApiPageController.list);\r\nrouter.get(\"/location/list\", location_1.LocationController.list);\r\nrouter.get(\"/category/list\", controller_3.ApiCategoryController.list);\r\nrouter.post(\"/post/create\", user_1.userAuthMiddleware, post_1.postUpload.array(\"image\", Number(process.env.POST_UPLOAD_LIMIT)), post_1.ApiPostController.post);\r\nrouter.put(\"/post\", user_1.userAuthMiddleware, post_1.postUpload.array(\"image\", Number(process.env.POST_UPLOAD_LIMIT)), (0, helpers_1.sanitizer)(post_1.PostValidator.update), post_1.ApiPostController.update);\r\nrouter.get(\"/post\", post_1.ApiPostController.list);\r\nrouter.get(\"/post/badge\", post_1.ApiPostController.getBadgeCount);\r\nrouter.get(\"/post/:id([0-9]+)\", post_1.ApiPostController.get);\r\nrouter.delete(\"/post/:id([0-9]+)\", post_1.ApiPostController.delete);\r\nrouter.post(\"/post/like\", user_1.userAuthMiddleware, (0, helpers_1.sanitizer)(post_1.PostValidator.likeValidator), post_1.ApiPostController.like);\r\nrouter.post(\"/post/view\", (0, helpers_1.sanitizer)(post_1.PostValidator.viewValidator), post_1.ApiPostController.view);\r\nrouter.get(\"/banner\", banner_1.BannerListValidator.listValidator, banner_1.BannerController.list);\r\nrouter.get(\"/banner/:id([0-9]+)\", banner_1.BannerListValidator.getValidator, banner_1.BannerController.get);\r\nrouter.get(\"/video\", video_1.UserVideoValidator.listValidator, video_1.UserVideoController.list);\r\nrouter.get(\"/video/badge\", video_1.UserVideoController.getBadgeCount);\r\nrouter.get(\"/video/:id([0-9]+)\", video_1.UserVideoValidator.getValidator, video_1.UserVideoController.get);\r\nrouter.post(\"/video/like\", user_1.userAuthMiddleware, video_1.UserVideoValidator.likeValidator, video_1.UserVideoController.like);\r\nrouter.post(\"/video/view\", video_1.UserVideoValidator.viewValidator, video_1.UserVideoController.view);\r\nrouter.get(\"/page-category\", validator_1.UserPageCategoryValidator.listValidator, page_category_1.UserPageCategoryController.list);\r\nrouter.get(\"/page-category/:id([0-9]+)\", validator_1.UserPageCategoryValidator.getValidator, page_category_1.UserPageCategoryController.get);\r\nrouter.get(\"/gallery\", gallery_1.UserGalleryValidator.listValidator, gallery_1.UserGalleryController.list);\r\nrouter.get(\"/gallery/badge\", gallery_1.UserGalleryController.getBadgeCount);\r\nrouter.get(\"/gallery/:id([0-9]+)\", gallery_1.UserGalleryValidator.getValidator, gallery_1.UserGalleryController.get);\r\nrouter.post(\"/gallery/like\", user_1.userAuthMiddleware, gallery_1.UserGalleryValidator.likeValidator, gallery_1.UserGalleryController.like);\r\nrouter.post(\"/gallery/view\", gallery_1.UserGalleryValidator.viewValidator, gallery_1.UserGalleryController.view);\r\nrouter.post(\"/user/profile/avatar\", user_1.userAuthMiddleware, user_profile_1.userProfileAvatarUpload.single(\"image\"), user_profile_1.UserProfileController.setAvatar);\r\nrouter.get(\"/user/profile\", user_profile_1.UserProfileValidator.listValidator, user_profile_1.UserProfileController.list);\r\nrouter.get(\"/user/profile/:id([0-9]+)\", user_profile_1.UserProfileValidator.getValidator, user_profile_1.UserProfileController.get);\r\nrouter.put(\"/user/profile\", user_1.userAuthMiddleware, user_profile_1.UserProfileValidator.update, user_profile_1.UserProfileController.update);\r\nrouter.post(\"/user/profile/follow\", user_1.userAuthMiddleware, user_profile_1.UserProfileValidator.followValidator, user_profile_1.UserProfileController.follow);\r\nrouter.post(\"/user/profile/unfollow\", user_1.userAuthMiddleware, user_profile_1.UserProfileValidator.unFollowValidator, user_profile_1.UserProfileController.unFollow);\r\nrouter.put(\"/user/profile/day-streak\", user_1.userAuthMiddleware, user_profile_1.UserProfileValidator.setDayStreak, user_profile_1.UserProfileController.setDayStreak);\r\nrouter.get(\"/user/profile/day-streak\", user_profile_1.UserProfileValidator.listDayStreakCoinReward, user_profile_1.UserProfileController.listDayStreakCoinReward);\r\nrouter.post(\"/user/profile/bg-image\", user_1.userAuthMiddleware, user_profile_1.userProfileBGImagesUpload.array(\"image\", 10), user_profile_1.UserProfileValidator.addUserProfileBackgroundImage, user_profile_1.UserProfileController.addUserProfileBackgroundImage);\r\nrouter.delete(\"/user/profile/bg-image\", user_1.userAuthMiddleware, user_profile_1.UserProfileValidator.deleteUserProfileBackgroundImage, user_profile_1.UserProfileController.deleteUserProfileBackgroundImage);\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/routes/public.ts?");

/***/ }),

/***/ "./src/server.ts":
/*!***********************!*\
  !*** ./src/server.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.startServer = void 0;\r\nconst http_1 = __webpack_require__(/*! http */ \"http\");\r\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"./src/helpers/index.ts\");\r\nconst config_1 = __importDefault(__webpack_require__(/*! ./config */ \"./src/config/index.ts\"));\r\nconst startServer = (app) => {\r\n    const httpServer = (0, http_1.createServer)(app);\r\n    process\r\n        .on(\"SIGINT\", () => (0, helpers_1.exitLog)(null, \"SIGINT\"))\r\n        .on(\"SIGQUIT\", () => (0, helpers_1.exitLog)(null, \"SIGQUIT\"))\r\n        .on(\"SIGTERM\", () => (0, helpers_1.exitLog)(null, \"SIGTERM\"))\r\n        .on(\"uncaughtException\", (err) => (0, helpers_1.exitLog)(err, \"uncaughtException\"))\r\n        .on(\"beforeExit\", () => (0, helpers_1.exitLog)(null, \"beforeExit\"))\r\n        .on(\"exit\", () => (0, helpers_1.exitLog)(null, \"exit\"));\r\n    return httpServer.listen({ port: config_1.default.APP.PORT }, () => {\r\n        process.stdout.write(`⚙️ Application Environment: ${config_1.default.APP.ENV}\\n`);\r\n        process.stdout.write(`⏱ Started on: ${Date.now()}\\n`);\r\n        process.stdout.write(`🚀 Server ready at http://localhost:${config_1.default.APP.PORT}\\n`);\r\n    });\r\n};\r\nexports.startServer = startServer;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/server.ts?");

/***/ }),

/***/ "./src/utils/auth.ts":
/*!***************************!*\
  !*** ./src/utils/auth.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.hidePassword = void 0;\r\nconst hidePassword = (bodyData) => {\r\n    if (bodyData.hasOwnProperty(\"password\")) {\r\n        bodyData.password = \"********\";\r\n    }\r\n    return bodyData;\r\n};\r\nexports.hidePassword = hidePassword;\r\n\n\n//# sourceURL=webpack://nodejs-typescript-starter/./src/utils/auth.ts?");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "bcrypt":
/*!*************************!*\
  !*** external "bcrypt" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("bcrypt");

/***/ }),

/***/ "connect-redis":
/*!********************************!*\
  !*** external "connect-redis" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("connect-redis");

/***/ }),

/***/ "connect-timeout":
/*!**********************************!*\
  !*** external "connect-timeout" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("connect-timeout");

/***/ }),

/***/ "date-fns":
/*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("date-fns");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("express");

/***/ }),

/***/ "express-pino-logger":
/*!**************************************!*\
  !*** external "express-pino-logger" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("express-pino-logger");

/***/ }),

/***/ "express-session":
/*!**********************************!*\
  !*** external "express-session" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("express-session");

/***/ }),

/***/ "express-validator":
/*!************************************!*\
  !*** external "express-validator" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("express-validator");

/***/ }),

/***/ "fs-extra":
/*!***************************!*\
  !*** external "fs-extra" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("fs-extra");

/***/ }),

/***/ "http-status/lib":
/*!**********************************!*\
  !*** external "http-status/lib" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("http-status/lib");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "module-alias":
/*!*******************************!*\
  !*** external "module-alias" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("module-alias");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("morgan");

/***/ }),

/***/ "multer":
/*!*************************!*\
  !*** external "multer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("multer");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "redis":
/*!************************!*\
  !*** external "redis" ***!
  \************************/
/***/ ((module) => {

module.exports = require("redis");

/***/ }),

/***/ "swagger-jsdoc":
/*!********************************!*\
  !*** external "swagger-jsdoc" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("swagger-jsdoc");

/***/ }),

/***/ "swagger-ui-express":
/*!*************************************!*\
  !*** external "swagger-ui-express" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("swagger-ui-express");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "./bundle/admin-swagger.json":
/*!***********************************!*\
  !*** ./bundle/admin-swagger.json ***!
  \***********************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"openapi\":\"3.0.1\",\"info\":{\"title\":\"REST API for Swagger Documentation\",\"version\":\"1.0.0\"},\"paths\":{\"/admin/banner\":{\"put\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Banner\"],\"description\":\"Banner edit\",\"requestBody\":{\"required\":true,\"content\":{\"multipart/form-data\":{\"schema\":{\"properties\":{\"id\":{\"type\":\"number\",\"example\":1},\"title\":{\"type\":\"string\",\"example\":\"Banner title\"},\"description\":{\"type\":\"string\",\"example\":\"Banner description\"},\"url\":{\"type\":\"string\",\"example\":\"Banner url\"},\"image\":{\"type\":\"string\",\"format\":\"binary\",\"example\":\"hyzmat.png\"},\"start_date\":{\"type\":\"Date\",\"example\":\"2023-08-12T14:22:11.289Z\"},\"end_date\":{\"type\":\"Date\",\"example\":\"2023-10-12T14:22:11.289Z\"},\"platform_id\":{\"type\":\"number\",\"example\":1},\"page_category_ids\":{\"type\":\"number[]\",\"example\":[1,3]},\"location_ids\":{\"type\":\"number[]\",\"example\":[1,3]}},\"required\":[\"id\"],\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg, image/webp, image/svg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Banner edited successfully\"},\"data\":{\"type\":\"any\",\"description\":\"Banner data\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}},\"/admin/gallery\":{\"put\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Gallery\"],\"description\":\"Gallery edit\",\"requestBody\":{\"required\":true,\"content\":{\"multipart/form-data\":{\"schema\":{\"properties\":{\"gallery_id\":{\"type\":\"number\",\"example\":1},\"user_id\":{\"type\":\"number\",\"example\":1},\"title\":{\"type\":\"string\",\"example\":\"Gallery title\"},\"avatar_image\":{\"type\":\"string\",\"format\":\"binary\",\"example\":\"avatar.png\"},\"page_category_id\":{\"type\":\"number\",\"example\":1}},\"required\":[\"gallery_id\"],\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg, image/webp, image/svg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Gallery edited successfully\"},\"data\":{\"type\":\"any\",\"description\":\"Gallery data\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}},\"/admin/gallery/add-images\":{\"post\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Gallery\"],\"description\":\"Gallery add images\",\"requestBody\":{\"required\":true,\"content\":{\"multipart/form-data\":{\"schema\":{\"properties\":{\"gallery_id\":{\"type\":\"number\",\"example\":1},\"images\":{\"type\":\"string[]\",\"format\":\"binary\",\"example\":[\"img1.png\",\"img2.png\"]}},\"required\":[\"gallery_id\",\"images\"],\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg, image/webp, image/svg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Gallery images added successfully!\"},\"data\":{\"type\":\"any\",\"description\":\"Gallery data\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}},\"/admin/gallery/delete-images\":{\"post\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Gallery\"],\"description\":\"Gallery delete images\",\"requestBody\":{\"required\":true,\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"gallery_id\":{\"type\":\"number\",\"example\":1},\"image_ids\":{\"type\":\"number[]\",\"example\":[1,3]}},\"required\":[\"gallery_id\",\"image_ids\"],\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg, image/webp, image/svg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Gallery images deleted successfully!\"},\"data\":{\"type\":\"any\",\"description\":\"Gallery data\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}},\"/admin/page-category\":{\"put\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Page-category\"],\"description\":\"Page category edit\",\"requestBody\":{\"required\":true,\"content\":{\"multipart/form-data\":{\"schema\":{\"properties\":{\"page_category_id\":{\"type\":\"number\",\"example\":1},\"page_id\":{\"type\":\"number\",\"example\":1},\"category_name\":{\"type\":\"string\",\"example\":\"food\"},\"image\":{\"type\":\"string\",\"format\":\"binary\",\"example\":\"avatar.png\"}},\"required\":[\"page_category_id\"],\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg, image/webp, image/svg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Page category was edited successfully\"},\"data\":{\"type\":\"any\",\"description\":\"Page category data\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}},\"/admin/service\":{\"post\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Service\"],\"description\":\"Hyzmatlar\",\"requestBody\":{\"required\":true,\"content\":{\"multipart/form-data\":{\"schema\":{\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"Wideo goymak\"},\"cost\":{\"type\":\"number\",\"example\":100},\"count\":{\"type\":\"boolean\",\"example\":true},\"image\":{\"type\":\"string\",\"format\":\"binary\",\"example\":\"hyzmat.png\"},\"month\":{\"type\":\"boolean\"},\"month_cost\":{\"type\":\"number\"},\"location_costs\":{\"type\":\"object[]\",\"properties\":{\"id\":{\"type\":\"number\"},\"cost\":{\"type\":\"number\"},\"month_cost\":{\"type\":\"number\"}},\"required\":[\"id\"]}},\"required\":[\"name\",\"cost\",\"image\",\"count\"],\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Service created successfully!\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}},\"get\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Service\"],\"description\":\"Hyzmatlar maglumatyny almak\",\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Service list!\"},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"number\"},\"name\":{\"type\":\"string\"},\"cost\":{\"type\":\"number\"},\"image\":{\"type\":\"string\"},\"count\":{\"type\":\"boolean\"}}}}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}},\"/admin/service/{serviceId}\":{\"put\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Service\"],\"description\":\"Hyzmatlar uytgetmek\",\"parameters\":[{\"in\":\"path\",\"name\":\"serviceId\",\"schema\":{\"type\":\"integer\"},\"required\":true,\"description\":\"Numeric ID of the service to update\"}],\"requestBody\":{\"content\":{\"multipart/form-data\":{\"schema\":{\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"Wideo goymak\"},\"cost\":{\"type\":\"number\",\"example\":100},\"count\":{\"type\":\"boolean\",\"example\":true},\"image\":{\"type\":\"string\",\"format\":\"binary\",\"example\":\"hyzmat.png\"},\"month\":{\"type\":\"boolean\"},\"month_cost\":{\"type\":\"number\"},\"location_costs\":{\"type\":\"object[]\",\"properties\":{\"id\":{\"type\":\"number\"},\"cost\":{\"type\":\"number\"},\"month_cost\":{\"type\":\"number\"}},\"required\":[\"id\"]}},\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Service updated successfully!\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}},\"get\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Service\"],\"description\":\"Hyzmat maglumatyny almak\",\"parameters\":[{\"in\":\"path\",\"name\":\"serviceId\",\"schema\":{\"type\":\"integer\"},\"required\":true,\"description\":\"Numeric ID of the service to get\"}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Service!\"},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"number\"},\"name\":{\"type\":\"string\"},\"cost\":{\"type\":\"number\"},\"image\":{\"type\":\"string\"},\"count\":{\"type\":\"boolean\"},\"month\":{\"type\":\"boolean\"},\"month_cost\":{\"type\":\"number\"},\"location_costs\":{\"type\":\"object[]\",\"properties\":{\"id\":{\"type\":\"number\"},\"cost\":{\"type\":\"number\"},\"month_cost\":{\"type\":\"number\"}}}}}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}},\"delete\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Service\"],\"description\":\"Hyzmat pozmak\",\"parameters\":[{\"in\":\"path\",\"name\":\"serviceId\",\"schema\":{\"type\":\"integer\"},\"required\":true,\"description\":\"Numeric ID of the service to delete\"}],\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Service deleted successfully!\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}},\"/admin/video\":{\"put\":{\"security\":[{\"bearerAuth\":[]}],\"tags\":[\"Video\"],\"description\":\"Video edit\",\"requestBody\":{\"required\":true,\"content\":{\"multipart/form-data\":{\"schema\":{\"properties\":{\"id\":{\"type\":\"number\",\"example\":1},\"user_id\":{\"type\":\"number\",\"example\":1},\"title\":{\"type\":\"string\",\"example\":\"my video\"},\"page_category_ids\":{\"type\":\"number[]\",\"example\":[1,2]},\"thumbnail\":{\"type\":\"string\",\"format\":\"binary\",\"example\":\"thumbnail.png\"}},\"required\":[\"id\"],\"encoding\":{\"image\":{\"contentType\":\"image/png, image/jpeg, image/webp, image/svg\"}}}}}},\"responses\":{\"200\":{\"description\":\"Success\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":true},\"message\":{\"type\":\"string\",\"example\":\"Video edited successfully\"},\"data\":{\"type\":\"any\",\"description\":\"Video data\"}}}}}},\"400\":{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"boolean\",\"example\":false},\"message\":{\"type\":\"string\",\"example\":\"Error message!\"}}}}}},\"404\":{\"description\":\"Not found\"},\"500\":{\"description\":\"Internal server error\"}}}}},\"components\":{\"securitySchemes\":{\"bearerAuth\":{\"type\":\"http\",\"scheme\":\"bearer\",\"bearerFormat\":\"JWT\"}}},\"tags\":[]}');\n\n//# sourceURL=webpack://nodejs-typescript-starter/./bundle/admin-swagger.json?");

/***/ }),

/***/ "./bundle/swagger.json":
/*!*****************************!*\
  !*** ./bundle/swagger.json ***!
  \*****************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"openapi\":\"3.0.1\",\"info\":{\"title\":\"REST API for Swagger Documentation\",\"version\":\"1.0.0\"},\"paths\":{},\"components\":{},\"tags\":[]}');\n\n//# sourceURL=webpack://nodejs-typescript-starter/./bundle/swagger.json?");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"name\":\"nodejs-typescript-starter\",\"version\":\"1.0.0\",\"description\":\"Typescript Node Express Rest API server starter\",\"private\":true,\"authors\":\"Seyit47\",\"license\":\"MIT\",\"scripts\":{\"prepare\":\"husky install\",\"lint\":\"eslint \\\\\"src/**/*.{ts,js}\\\\\"\",\"lint:fix\":\"eslint --fix \\\\\"src/**/*.{ts,js}\\\\\" --quiet\",\"transpile\":\"tsc\",\"clean\":\"rimraf dist\",\"build\":\"SET NODE_ENV=production run-s prettify clean transpile\",\"bundle\":\" webpack --mode development\",\"watch\":\"tsc --watch\",\"start\":\"SET NODE_ENV=development run-s prettify lint & nodemon\",\"dev\":\"SET NODE_ENV=production node ./dist/src/index.js\",\"service:start\":\"pm2 start ecosystem.config.js\",\"service:reload\":\"pm2 reload ecosystem.config.js\",\"service:startup\":\"pm2 startup\",\"service:stop\":\"pm2 stop ecosystem.config.js\",\"service:list\":\"pm2 list ecosystem.config.js\",\"service:delete\":\"pm2 delete ecosystem.config.js\",\"service:logs\":\"pm2 logs\",\"prettify\":\"prettier --write \\\\\"src/**/*.{ts,js,json}\\\\\"\"},\"keywords\":[\"typescript\",\"node\",\"express\",\"rest\",\"api\",\"server\"],\"dependencies\":{\"axios\":\"^1.4.0\",\"bcrypt\":\"^5.0.0\",\"connect-redis\":\"^7.1.0\",\"connect-timeout\":\"^1.9.0\",\"cors\":\"^2.8.3\",\"date-fns\":\"^2.30.0\",\"dotenv\":\"^16.0.1\",\"express\":\"^4.15.3\",\"express-pino-logger\":\"^7.0.0\",\"express-session\":\"^1.17.3\",\"express-validator\":\"^6.14.2\",\"fs-extra\":\"^11.1.1\",\"helmet\":\"^6.0.0\",\"http-status\":\"^1.5.2\",\"jsonwebtoken\":\"^8.5.1\",\"lodash-es\":\"^4.17.21\",\"morgan\":\"^1.8.2\",\"multer\":\"^1.4.5-lts.1\",\"pg\":\"^8.11.0\",\"pino-pretty\":\"^9.1.0\",\"redis\":\"^4.6.7\",\"rimraf\":\"^3.0.2\",\"swagger-jsdoc\":\"^6.2.8\",\"swagger-jsdoc-webpack-plugin\":\"^2.1.0\",\"swagger-ui-express\":\"^5.0.0\"},\"devDependencies\":{\"@babel/preset-typescript\":\"^7.18.6\",\"@types/bcrypt\":\"^5.0.0\",\"@types/connect-timeout\":\"^0.0.36\",\"@types/cors\":\"^2.8.1\",\"@types/dotenv\":\"^8.2.0\",\"@types/express\":\"^4.17.11\",\"@types/express-pino-logger\":\"^4.0.3\",\"@types/express-session\":\"^1.17.7\",\"@types/fs-extra\":\"^11.0.1\",\"@types/helmet\":\"^4.0.0\",\"@types/http-status\":\"^1.1.2\",\"@types/jsonwebtoken\":\"^8.5.0\",\"@types/lodash-es\":\"^4.17.4\",\"@types/module-alias\":\"^2.0.1\",\"@types/morgan\":\"^1.7.32\",\"@types/multer\":\"^1.4.7\",\"@types/node\":\"^18.6.4\",\"@types/pg\":\"^8.10.2\",\"@types/swagger-jsdoc\":\"^6.0.1\",\"@types/swagger-ui-express\":\"^4.1.3\",\"@typescript-eslint/eslint-plugin\":\"^5.32.0\",\"@typescript-eslint/parser\":\"^5.32.0\",\"eslint\":\"^8.21.0\",\"eslint-config-prettier\":\"^8.5.0\",\"eslint-plugin-import\":\"^2.26.0\",\"eslint-plugin-prettier\":\"^4.2.1\",\"husky\":\"^8.0.1\",\"module-alias\":\"^2.2.2\",\"nodemon\":\"^2.0.7\",\"npm-run-all\":\"^4.1.5\",\"pm2\":\"^5.1.0\",\"prettier\":\"^2.7.1\",\"ts-loader\":\"^9.4.4\",\"ts-node\":\"^10.2.0\",\"tsc\":\"^2.0.3\",\"tsconfig-paths\":\"^4.1.0\",\"tslint\":\"^6.1.3\",\"typescript\":\"^4.1.3\",\"webpack\":\"^5.88.1\",\"webpack-cli\":\"^5.1.4\",\"webpack-node-externals\":\"^3.0.0\"},\"engines\":{\"node\":\">= 16.0.0\"}}');\n\n//# sourceURL=webpack://nodejs-typescript-starter/./package.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;